generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASEURL")
}

model prices {
  id         Int      @id @default(autoincrement())
  itemId     Int
  price_date DateTime
  price      Float?

  // Relation to items:
  item       items    @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model items {
  id           Int      @id @default(autoincrement())
  cod          String?  @db.VarChar(255)
  name         String   @db.VarChar(255)
  unit         String?  @db.VarChar(255)
  category     String?  @db.VarChar(255)
  type         String?  @db.VarChar(255)
  origin_table String?  @db.VarChar(255)

  // One item can have many prices.
  prices       prices[]
}

model presupuestos {
  id          Int      @id @default(autoincrement())
  obraId      Int
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Each presupuesto belongs to one obra.
  obra        obras   @relation(fields: [obraId], references: [id])
}

model mediciones {
  id          Int      @id @default(autoincrement())
  presupuestoId      Int
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Each medicion belongs to one presupuesto.
  presupuesto        presupuestos   @relation(fields: [presupuestoId], references: [id])
}

model obras {
  id               Int               @id @default(autoincrement())
  name             String?           @unique(map: "NombreObra") @db.VarChar(200)
  montoContrato   Float?
  inaugurada       Int?              @db.SmallInt
  plazo            Int?
  fechaContrato    DateTime?         @map("Fecha de Contrato")
  fechaInicio      DateTime?         @map("Fecha de Inicio")
  fechaFin         DateTime?         @map("Fecha de Finalizaci√≥n")
  fechaLicitacion  DateTime?
  data        Json

  // These fields refer to other entities (e.g. empresa, estado, localidad).
  // You can later add relations if you define those models.
  //IdEmpresa        Int?
  //IdEstado         Int?
  //IdLocalidad      Int?

  // One obra can have many presupuestos.
  presupuestos     presupuestos[]

  // One obra can have many certificaciones.
  certificaciones  certificaciones[]
}


model certificaciones {
  id              Int         @id @default(autoincrement())
  NumCertificado  String?     @db.VarChar(50)
  Monto           Float?
  MesCertificado  DateTime?
  data        Json

  // Relate certificaciones to obras (if an obra is associated).
  IdObras         Int?
  obra            obras?      @relation(fields: [IdObras], references: [id])
  
  // Optionally, if you define an "empresa" model later you can add a similar relation.
  IdEmpresa       Int?

  FechaLiq        DateTime?
  FechaIng        DateTime?
  pagado          Int?        @db.SmallInt
  netoapagar      Float?
}
