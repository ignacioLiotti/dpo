This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-07T17:54:11.530Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
.repomixignore
app/api/certificaciones/route.ts
app/api/certificados/[id]/route.ts
app/api/certificados/route.ts
app/api/elementCategory/route.ts
app/api/obras/[id]/presupuestos/route.ts
app/api/obras/[id]/route.ts
app/api/obras/route.ts
app/api/presupuestos/[id]/mediciones/[medicionId]/route.ts
app/api/presupuestos/[id]/mediciones/route.ts
app/api/presupuestos/[id]/route.ts
app/api/presupuestos/route.ts
app/api/presupuestos/tableData/route.ts
app/api/tagsWithElements/route.ts
app/api/wip/constructionElements/route.ts
app/api/wip/empresas/route.ts
app/api/wip/getDirectory/route.ts
app/api/wip/inspectores/route.ts
app/api/wip/proyectistas/route.ts
app/api/wip/schema/route.ts
app/api/wip/test-db/route.ts
app/api/wip/upload-csv/route.ts
app/api/wip/upload-sql/route.ts
app/certificados/[id]/page.tsx
app/certificados/new/page.tsx
app/certificados/page.tsx
app/components/common/DataSection.tsx
app/components/common/DataTable.tsx
app/components/common/EditableInput.tsx
app/components/common/PageHeader.tsx
app/components/presupuesto/PresupuestoSection.tsx
app/controllers/mediciones.controller.ts
app/controllers/obras.controller.ts
app/controllers/presupuestos.controller.ts
app/dashboard/page.tsx
app/db/certificaciones/page.tsx
app/db/constructionElements/page.tsx
app/db/empresas/page.tsx
app/db/inspectores/page.tsx
app/db/layout.tsx
app/db/obras/page.tsx
app/db/proyectistas/page.tsx
app/db/tagsWithElements/page.tsx
app/globals.css
app/layout.tsx
app/obras/[id]/page.tsx
app/obras/[id]/PresupuestosContent.tsx
app/obras/[id]/TabsComponent.tsx
app/obras/create/page.tsx
app/obras/page.tsx
app/page.tsx
app/presupuesto/[id]/MedicionSection.tsx
app/presupuesto/[id]/page.tsx
app/presupuesto/all/page.tsx
app/presupuesto/components/GeneralSearch.tsx
app/presupuesto/page.tsx
app/presupuesto/types.ts
app/reactScanWrapper.tsx
app/schema/page.tsx
app/uitest/button/page.tsx
app/uitest/card/page.tsx
app/uitest/card/Tooltip.tsx
app/uitest/page.tsx
app/upload-sql/page.tsx
components.json
components/app-sidebar.tsx
components/BudgetForm.tsx
components/BudgetTable.tsx
components/CertificateForm.tsx
components/CertificateTable.tsx
components/CustomTabs/alltabs.tsx
components/CustomTabs/comp-426.tsx
components/CustomTabs/comp-433.tsx
components/CustomTabs/comp-437.tsx
components/CustomTabs/comp-440.tsx
components/CustomTabs/comp-441.tsx
components/CustomTabs/comp-442.tsx
components/DraggableRow.tsx
components/editable-cell.tsx
components/expandable-table.tsx
components/medicion/MedicionHistory.tsx
components/nav-main.tsx
components/nav-projects.tsx
components/nav-user.tsx
components/presupuesto/GlobalSearch.tsx
components/presupuesto/MedicionSection.tsx
components/presupuesto/PresupuestoSection.tsx
components/presupuesto/SearchDialog.tsx
components/Table/custom-table.tsx
components/Table/DataTableFacetedFilter.tsx
components/Table/DataTableFloatingToolbar.tsx
components/Table/DataTablePagination.tsx
components/Table/DataTableToolbar.tsx
components/team-switcher.tsx
components/testDocument/page.tsx
components/ui/avatar.tsx
components/ui/badge.tsx
components/ui/breadcrumb.tsx
components/ui/button.tsx
components/ui/card.tsx
components/ui/checkbox.tsx
components/ui/collapsible.tsx
components/ui/command.tsx
components/ui/dialog.tsx
components/ui/dropdown-menu.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/popover.tsx
components/ui/radio-group.tsx
components/ui/scroll-area.tsx
components/ui/select.tsx
components/ui/separator.tsx
components/ui/sheet.tsx
components/ui/sidebar.tsx
components/ui/skeleton.tsx
components/ui/switch.tsx
components/ui/table.tsx
components/ui/tabs.tsx
components/ui/textarea.tsx
components/ui/toast.tsx
components/ui/toaster.tsx
components/ui/tooltip.tsx
components/ui/use-toast.ts
eslint.config.mjs
import.bat
lib/cache.ts
lib/context/PresupuestoContext.tsx
lib/hooks/use-mobile.tsx
lib/hooks/use-toast.ts
lib/hooks/useMedicion.ts
lib/hooks/usePresupuesto.ts
lib/prisma.ts
lib/types/common.ts
lib/types/medicion.ts
lib/types/presupuesto.ts
lib/types/table-types.ts
lib/utils.ts
lib/utils/calculations.ts
lib/utils/errorHandler.ts
lib/utils/format.ts
lib/utils/generateNav.ts
lib/utils/table-utils.ts
lib/utils/validation.ts
next.config.ts
package.json
page.tsx
postcss.config.mjs
prisma/migrations/20250203134229_init/migration.sql
prisma/migrations/20250203134911_changes/migration.sql
prisma/migrations/migration_lock.toml
prisma/schema_old.prisma
prisma/schema.prisma
prisma/schema.prisma.backup
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
tailwind.config.ts
tsconfig.json
vercel.json

================================================================
Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: .repomixignore
================
/customdb
/test
/boludecesback

================
File: app/api/certificaciones/route.ts
================
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getCachedData } from "@/lib/cache";

export async function GET() {
	// Query 'certificaciones' table from your local DB
	const certificaciones = await getCachedData("certificaciones", async () => {
		return prisma.certificaciones.findMany();
	});
	return NextResponse.json(certificaciones);
}

================
File: app/api/certificados/[id]/route.ts
================
import { prisma } from "@/lib/prisma";
import { NextRequest, NextResponse } from "next/server";

export async function GET(
	request: NextRequest,
	{ params }: { params: Promise<{ id: string }> }
) {
	try {
		const id = (await params).id;
		const certificado = await prisma.certificaciones.findUnique({
			where: {
				IdCertificado: parseInt(id),
			},
		});

		if (!certificado) {
			return NextResponse.json(
				{ error: "Certificado not found" },
				{ status: 404 }
			);
		}

		return NextResponse.json(certificado);
	} catch (error) {
		console.error("Error fetching certificado:", error);
		return NextResponse.json(
			{ error: "Error fetching certificado" },
			{ status: 500 }
		);
	}
}

export async function PUT(
	request: NextRequest,
	{ params }: { params: Promise<{ id: string }> }
) {
	try {
		const body = await request.json();
		const { documentoJson, ...otherData } = body;
		const id = (await params).id;

		const certificado = await prisma.certificaciones.update({
			where: {
				IdCertificado: parseInt(id),
			},
			data: otherData,
		});

		return NextResponse.json(certificado);
	} catch (error) {
		console.error("Error updating certificado:", error);
		return NextResponse.json(
			{ error: "Error updating certificado" },
			{ status: 500 }
		);
	}
}

export async function DELETE(
	request: NextRequest,
	{ params }: { params: Promise<{ id: string }> }
) {
	try {
		const id = (await params).id;
		await prisma.certificaciones.delete({
			where: {
				IdCertificado: parseInt(id),
			},
		});

		return NextResponse.json({ message: "Certificado deleted successfully" });
	} catch (error) {
		console.error("Error deleting certificado:", error);
		return NextResponse.json(
			{ error: "Error deleting certificado" },
			{ status: 500 }
		);
	}
}

================
File: app/api/certificados/route.ts
================
import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";

export async function GET() {
	try {
		const certificados = await prisma.certificaciones.findMany();
		return NextResponse.json(certificados);
	} catch (error) {
		console.error("Error fetching certificados:", error);
		return NextResponse.json(
			{ error: "Error fetching certificados" },
			{ status: 500 }
		);
	}
}

export async function POST(request: Request) {
	try {
		const body = await request.json();
		const certificado = await prisma.certificaciones.create({
			data: body,
		});

		return NextResponse.json(certificado);
	} catch (error) {
		if (error instanceof Error) {
			console.log("Error: ", error.stack);
		}
		return NextResponse.json(
			{ error: "Internal Server Error" },
			{ status: 500 }
		);
	}
}

================
File: app/api/elementCategory/route.ts
================
import { prisma } from "@/lib/prisma";
import { NextResponse } from "next/server";

export async function GET(req: Request) {
	try {
		// Parse the query parameter from the request
		const url = new URL(req.url);
		const category = url.searchParams.get("category");

		// Validate the category parameter exists
		if (!category) {
			return NextResponse.json(
				{ error: "Category parameter is required." },
				{ status: 400 }
			);
		}

		// Fetch items for the requested category
		const elements = await prisma.items.findMany({
			where: {
				origin_table: category,
			},
			include: {
				prices: {
					orderBy: {
						price_date: "desc",
					},
					take: 1,
				},
			},
		});

		// Map elements to include only necessary fields
		const result = elements.map((element) => ({
			id: element.id,
			code: element.cod,
			name: element.item_name,
			unit: element.unid,
			price: element.prices[0]?.price || 0,
			category: element.category,
			origin: element.origin_table,
		}));

		// Return the result
		return NextResponse.json(result);
	} catch (error) {
		const errorMessage = error instanceof Error ? error.message : String(error);
		return NextResponse.json({ error: errorMessage }, { status: 500 });
	}
}

================
File: app/api/obras/[id]/presupuestos/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { handleAPIError } from "@/lib/utils/errorHandler";
import {
	getPresupuestosByObraId,
	createPresupuesto,
} from "@/app/controllers/presupuestos.controller";

export async function GET(
	request: Request,
	{ params }: { params: { id: string } }
) {
	try {
		const presupuestos = await getPresupuestosByObraId(Number(params.id));
		return NextResponse.json(presupuestos);
	} catch (error) {
		return handleAPIError(error);
	}
}

export async function POST(
	request: Request,
	{ params }: { params: { id: string } }
) {
	try {
		const data = await request.json();
		const presupuesto = await createPresupuesto(Number(params.id), data);
		return NextResponse.json(presupuesto, { status: 201 });
	} catch (error) {
		return handleAPIError(error);
	}
}

================
File: app/api/obras/[id]/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { handleAPIError } from "@/lib/utils/errorHandler";
import { validateRequiredFields } from "@/lib/utils/validation";
import {
	getObraById,
	updateObra,
	deleteObra,
} from "@/app/controllers/obras.controller";

export async function GET(
	request: Request,
	{ params }: { params: { id: string } }
) {
	try {
		const { id } = await params;
		const paramsId = Number(id);
		const obra = await getObraById(paramsId);

		if (!obra) {
			return NextResponse.json({ error: "Obra not found" }, { status: 404 });
		}

		return NextResponse.json(obra);
	} catch (error) {
		return handleAPIError(error);
	}
}

export async function PUT(
	request: Request,
	{ params }: { params: { id: string } }
) {
	try {
		const { id } = await params;
		const data = await request.json();
		validateRequiredFields(data, ["NombreObra"]);
		const obra = await updateObra(Number(id), data);
		return NextResponse.json(obra);
	} catch (error) {
		return handleAPIError(error);
	}
}

export async function DELETE(
	request: Request,
	{ params }: { params: { id: string } }
) {
	try {
		const { id } = await params;
		await deleteObra(Number(id));
		return new NextResponse(null, { status: 204 });
	} catch (error) {
		return handleAPIError(error);
	}
}

================
File: app/api/obras/route.ts
================
import { NextRequest, NextResponse } from "next/server";
import { handleAPIError } from "@/lib/utils/errorHandler";
import { validateRequiredFields } from "@/lib/utils/validation";
import { createObra, getAllObras } from "@/app/controllers/obras.controller";

export async function GET() {
	try {
		const obras = await getAllObras();
		if (!obras) {
			return NextResponse.json({ obras: [] });
		}
		return NextResponse.json(obras);
	} catch (error) {
		return handleAPIError(error);
	}
}

export async function POST(request: NextRequest) {
	try {
		const data = await request.json();
		validateRequiredFields(data, ["NombreObra"]);
		const obra = await createObra(data);
		return NextResponse.json(obra, { status: 201 });
	} catch (error) {
		return handleAPIError(error);
	}
}

================
File: app/api/presupuestos/[id]/mediciones/[medicionId]/route.ts
================
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

// GET /api/presupuestos/[id]/mediciones/[medicionId]
export async function GET(
	request: Request,
	{ params }: { params: { id: string; medicionId: string } }
) {
	try {
		const medicion = await prisma.mediciones.findFirst({
			where: {
				id: parseInt(params.medicionId),
				presupuestoId: parseInt(params.id),
			},
		});

		if (!medicion) {
			return NextResponse.json(
				{ error: "Medición no encontrada" },
				{ status: 404 }
			);
		}

		return NextResponse.json(medicion);
	} catch (error) {
		console.error("Error fetching medicion:", error);
		return NextResponse.json(
			{ error: "Error al cargar la medición" },
			{ status: 500 }
		);
	}
}

================
File: app/api/presupuestos/[id]/mediciones/route.ts
================
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";

// GET /api/presupuestos/[id]/mediciones
export async function GET(
	request: Request,
	{ params }: { params: { id: string } }
) {
	try {
		const mediciones = await prisma.mediciones.findMany({
			where: {
				presupuestoId: parseInt(params.id),
			},
			orderBy: {
				createdAt: "desc",
			},
		});

		return NextResponse.json(mediciones);
	} catch (error) {
		console.error("Error fetching mediciones:", error);
		return NextResponse.json(
			{ error: "Error al cargar las mediciones" },
			{ status: 500 }
		);
	}
}

// POST /api/presupuestos/[id]/mediciones
export async function POST(
	request: Request,
	{ params }: { params: { id: string } }
) {
	try {
		const body = await request.json();
		const presupuestoId = parseInt(params.id);

		// Create the medicion
		const medicion = await prisma.mediciones.create({
			data: {
				presupuestoId,
				data: {
					...body.data,
					totalCompleted: body.totalCompleted,
					completedPercentage: body.completedPercentage,
				},
			},
		});

		return NextResponse.json(medicion);
	} catch (error) {
		console.error("Error creating medicion:", error);
		return NextResponse.json(
			{ error: "Error al crear la medición" },
			{ status: 500 }
		);
	}
}

================
File: app/api/presupuestos/[id]/route.ts
================
// app/api/presupuestos/route.ts

import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { handleAPIError } from "@/lib/utils/errorHandler";
import {
	getPresupuestoById,
	updatePresupuesto,
	deletePresupuesto,
} from "@/app/controllers/presupuestos.controller";

const prisma = new PrismaClient();

// POST Handler
export async function POST(req: Request) {
	try {
		const request = await req.json();
		const { data, obraId } = request;

		console.log("aca", data, obraId);
		console.log("aca", await request);
		if (!obraId) {
			console.log("obraId is required");
			return NextResponse.json(
				{ error: "obraId is required" },
				{ status: 400 }
			);
		}

		// Create a new presupuesto
		const newPresupuesto = await prisma.presupuestos.create({
			data: {
				data,
				obraId,
			},
		});

		return NextResponse.json(newPresupuesto, { status: 201 });
	} catch (error) {
		if (error instanceof Error) {
			console.log("Error: ", error.stack);
		}
	}
}

// GET Handler
export async function GET(
	request: Request,
	{ params }: { params: { id: string } }
) {
	try {
		const presupuesto = await getPresupuestoById(Number(params.id));
		return NextResponse.json(presupuesto);
	} catch (error) {
		return handleAPIError(error);
	}
}

// PUT Handler
export async function PUT(
	request: Request,
	{ params }: { params: { id: string } }
) {
	try {
		const data = await request.json();
		const presupuesto = await updatePresupuesto(Number(params.id), data);
		return NextResponse.json(presupuesto);
	} catch (error) {
		return handleAPIError(error);
	}
}

export async function DELETE(
	request: Request,
	{ params }: { params: { id: string } }
) {
	try {
		await deletePresupuesto(Number(params.id));
		return new NextResponse(null, { status: 204 });
	} catch (error) {
		return handleAPIError(error);
	}
}

================
File: app/api/presupuestos/route.ts
================
// app/api/presupuestos/route.ts

import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// POST Handler
export async function POST(req: Request) {
	try {
		const request = await req.json();
		const { data, obraId } = request;

		if (!obraId) {
			return NextResponse.json(
				{ error: "obraId is required" },
				{ status: 400 }
			);
		}

		// Create a new presupuesto
		const newPresupuesto = await prisma.presupuestos.create({
			data: {
				data,
				obraId,
			},
		});

		return NextResponse.json(newPresupuesto, { status: 201 });
	} catch (error) {
		if (error instanceof Error) {
			console.log("Error: ", error.stack);
		}
	}
}

// GET Handler
export async function GET() {
	try {
		// Fetch all presupuestos sorted by id
		const presupuestos = await prisma.presupuestos.findMany({
			orderBy: { id: "asc" },
		});
		return NextResponse.json(presupuestos, { status: 200 });
	} catch (error) {
		if (error instanceof Error) {
			console.log("Error: ", error.stack);
		}
	}
}

// PUT Handler
export async function PUT(req: Request) {
	try {
		const { id, data } = await req.json();

		if (!id) {
			return NextResponse.json({ error: "id is required" }, { status: 400 });
		}

		// Update an existing presupuesto
		const updatedPresupuesto = await prisma.presupuestos.update({
			where: { id: Number(id) },
			data: { data },
		});

		return NextResponse.json(updatedPresupuesto, { status: 200 });
	} catch (error) {
		if (error instanceof Error) {
			console.log("Error: ", error.stack);
		}
	}
}

================
File: app/api/presupuestos/tableData/route.ts
================
import { prisma } from "@/lib/prisma";
import { getCachedData } from "@/lib/cache";
import { NextResponse } from "next/server";

// A small utility to sanitize or validate sort fields
function getSortClause(sortParam: string | null): string {
	if (!sortParam) {
		return "ORDER BY i.id ASC"; // default
	}

	// Example: sort=cod:asc or sort=name:desc
	const [field, dir] = sortParam.split(":");
	const sortField = (field || "").trim();
	const sortDir = (dir || "").trim().toUpperCase() === "DESC" ? "DESC" : "ASC";

	// Whitelist valid columns for sorting
	const validColumns = [
		"id",
		"cod",
		"name",
		"unit",
		"category",
		"type",
		"origin_table",
	];
	if (!validColumns.includes(sortField)) {
		return "ORDER BY i.id ASC"; // fallback if invalid
	}

	return `ORDER BY i.${sortField} ${sortDir}`;
}

export async function GET(request: Request) {
	try {
		const url = new URL(request.url);

		// 1) Grab parameters
		const page = parseInt(url.searchParams.get("page") || "0", 10); // e.g. 0, 1, 2, ...
		const limit = parseInt(url.searchParams.get("limit") || "100", 10);
		const searchTerm = url.searchParams.get("search") || ""; // e.g. "wood"
		const sortParam = url.searchParams.get("sort"); // e.g. "cod:asc"

		// 2) Convert page -> offset
		const start = page * limit;

		// 3) Build the ORDER BY clause
		const orderByClause = getSortClause(sortParam);

		// 4) Build a small WHERE clause for search
		//    Below we match `name` to the searchTerm (case-insensitive).
		//    Adjust for your DB or additional columns as needed.
		//    If you are on Postgres, you can do ILIKE. MySQL only has LOWER().
		const safeSearch = searchTerm.replace(/'/g, "''"); // naive escaping example
		const whereClause = safeSearch
			? `WHERE LOWER(i.name) LIKE LOWER('%${safeSearch}%')`
			: "";

		// 5) Use the cache or fetch anew
		const data = await getCachedData(
			`items_page_${page}_limit_${limit}_search_${searchTerm}_sort_${sortParam}`,
			async () => {
				// Debug query to see the actual data in prices table
				const debugQuery = `
          SELECT *
          FROM prices
          LIMIT 3;
        `;

				const itemsQuery = `
          SELECT
            i.id,
            i.cod,
            i.name,
            i.unit,
            i.category,
            i.type,
            i.origin_table,
            COALESCE(p.price, 0) as price,
            p.priceDate
          FROM items i
          LEFT JOIN (
            SELECT itemId, price, priceDate
            FROM prices p1
            WHERE (itemId, priceDate) IN (
              SELECT itemId, MAX(priceDate) as max_date
              FROM prices
              GROUP BY itemId
            )
          ) p ON i.id = p.itemId
          ${whereClause}
          ${orderByClause}
          LIMIT ${limit} OFFSET ${start}
        `;

				// 5b) Fetch total count (for all matching rows)
				const totalQuery = `
          SELECT COUNT(*) AS count
          FROM items i
          ${whereClause}
        `;

				const [items, totals, debugResults] = await Promise.all([
					prisma.$queryRawUnsafe(itemsQuery),
					prisma.$queryRawUnsafe(totalQuery),
					prisma.$queryRawUnsafe(debugQuery),
				]);

				console.log("Debug - First few prices:", debugResults);

				// 6) Process items to match the expected format
				const itemsWithDetails = (items as any[]).map((item) => ({
					id: item.id,
					name: item.name,
					unit: item.unit,
					price: item.price,
					precio: item.price,
					category: item.category,
					type: item.type,
					origin_table: item.origin_table,
				}));

				// 7) Group items by their category instead of origin_table
				const groupedItems = itemsWithDetails.reduce((acc, item) => {
					const category = item.category || "Sin Categoría";
					if (!acc[category]) {
						acc[category] = [];
					}
					acc[category].push(item);
					return acc;
				}, {} as Record<string, typeof itemsWithDetails>);

				// 8) Return the grouped data directly
				return groupedItems;
			}
		);

		// 9) Check and respond
		const allArraysEmpty = Object.values(data).every(
			(val) => Array.isArray(val) && val.length === 0
		);
		if (!data || allArraysEmpty) {
			return NextResponse.json(
				{ error: "No hay elementos disponibles." },
				{ status: 404 }
			);
		}

		return NextResponse.json(data);
	} catch (error) {
		if (error instanceof Error) {
			console.log("Error: ", error.stack);
		}
		console.error("Error fetching items:", error);
		const errorMessage =
			error instanceof Error ? error.message : "Unknown error occurred";
		return NextResponse.json({ error: errorMessage }, { status: 500 });
	}
}

================
File: app/api/tagsWithElements/route.ts
================
import { prisma } from "@/lib/prisma";
import { getCachedData } from "@/lib/cache";
import { NextResponse } from "next/server";

// A small utility to sanitize or validate sort fields
function getSortClause(sortParam: string | null): string {
	if (!sortParam) {
		return "ORDER BY i.id ASC"; // default
	}

	// Example: sort=cod:asc or sort=name:desc
	const [field, dir] = sortParam.split(":");
	const sortField = (field || "").trim();
	const sortDir = (dir || "").trim().toUpperCase() === "DESC" ? "DESC" : "ASC";

	// Whitelist valid columns for sorting
	const validColumns = [
		"id",
		"cod",
		"name",
		"unit",
		"category",
		"type",
		"origin_table",
	];
	if (!validColumns.includes(sortField)) {
		return "ORDER BY i.id ASC"; // fallback if invalid
	}

	return `ORDER BY i.${sortField} ${sortDir}`;
}

export async function GET(request: Request) {
	try {
		const url = new URL(request.url);

		// 1) Grab parameters
		const page = parseInt(url.searchParams.get("page") || "0", 10); // e.g. 0, 1, 2, ...
		const limit = parseInt(url.searchParams.get("limit") || "100", 10);
		const searchTerm = url.searchParams.get("search") || ""; // e.g. "wood"
		const sortParam = url.searchParams.get("sort"); // e.g. "cod:asc"

		// 2) Convert page -> offset
		const start = page * limit;

		// 3) Build the ORDER BY clause
		const orderByClause = getSortClause(sortParam);

		// 4) Build a small WHERE clause for search
		//    Below we match `name` to the searchTerm (case-insensitive).
		//    Adjust for your DB or additional columns as needed.
		//    If you are on Postgres, you can do ILIKE. MySQL only has LOWER().
		const safeSearch = searchTerm.replace(/'/g, "''"); // naive escaping example
		const whereClause = safeSearch
			? `WHERE LOWER(i.name) LIKE LOWER('%${safeSearch}%')`
			: "";

		// 5) Use the cache or fetch anew
		const data = await getCachedData(
			`items_page_${page}_limit_${limit}_search_${searchTerm}_sort_${sortParam}`,
			async () => {
				// 5a) Fetch paginated items
				const itemsQuery = `
          SELECT
            i.id,
            i.cod,
            i.name,
            i.unit,
            i.category,
            i.type,
            i.origin_table,
            p.price,
            p.priceDate
          FROM items i
          LEFT JOIN (
            SELECT itemId, price, priceDate
            FROM prices p1
            WHERE (itemId, priceDate) IN (
              SELECT itemId, MAX(priceDate) as max_date
              FROM prices
              GROUP BY itemId
            )
          ) p ON i.id = p.itemId
          ${whereClause}
          ${orderByClause}
          LIMIT ${limit} OFFSET ${start}
        `;

				// 5b) Fetch total count (for all matching rows)
				const totalQuery = `
          SELECT COUNT(*) AS count
          FROM items i
          ${whereClause}
        `;

				const [items, totalResult] = await Promise.all([
					prisma.$queryRawUnsafe(itemsQuery),
					prisma.$queryRawUnsafe(totalQuery),
				]);

				// totalResult should be an array of objects; each object has { count: number }
				const totalCount =
					Array.isArray(totalResult) && totalResult[0]?.count
						? Number(totalResult[0].count)
						: 0;

				// 6) Process items to match the expected format
				const itemsWithDetails = (items as any[]).map((item) => ({
					id: item.id,
					codigo: item.cod,
					nombre: item.name,
					unidad: item.unit,
					precio: item.price,
					fecha_precio: item.priceDate,
					category: item.category,
					type: item.type,
					origin_table: item.origin_table,
				}));

				// 7) Group items by their origin (backward compatibility)
				const groupedItems = itemsWithDetails.reduce((acc, item) => {
					const category = item.origin_table?.toLowerCase() || "uncategorized";
					if (!acc[category]) {
						acc[category] = [];
					}
					acc[category].push(item);
					return acc;
				}, {} as Record<string, typeof itemsWithDetails>);

				// 8) Return with total + grouped data
				return {
					materiales: groupedItems["materiales"] || [],
					indices: groupedItems["indices"] || [],
					items: groupedItems["items"] || [],
					jornales: groupedItems["jornales"] || [],
					total: totalCount,
				};
			}
		);

		// 9) Check and respond
		const allArraysEmpty = Object.values(data).every(
			(val) => Array.isArray(val) && val.length === 0
		);
		if (!data || allArraysEmpty) {
			return NextResponse.json(
				{ error: "No hay elementos disponibles." },
				{ status: 404 }
			);
		}

		return NextResponse.json(data);
	} catch (error) {
		if (error instanceof Error) {
			console.log("Error: ", error.stack);
		}
		console.error("Error fetching items:", error);
		const errorMessage =
			error instanceof Error ? error.message : "Unknown error occurred";
		return NextResponse.json({ error: errorMessage }, { status: 500 });
	}
}

================
File: app/api/wip/constructionElements/route.ts
================
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getCachedData } from "@/lib/cache";

export async function GET() {
	// Query 'elements' table from your local DBasdasd
	const elements = await getCachedData("elements", async () => {
		return prisma.items.findMany();
	});
	return NextResponse.json(elements);
}

================
File: app/api/wip/empresas/route.ts
================
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getCachedData } from "@/lib/cache";

export async function GET() {
	// Query 'empresas' table from your local DB
	const empresas = await getCachedData("empresas", async () => {
		return prisma.empresas.findMany();
	});
	return NextResponse.json(empresas);
}

================
File: app/api/wip/getDirectory/route.ts
================
import { getDirectoryStructure } from "@/lib/utils/generateNav";
import { NextResponse } from "next/server";
import path from "path";

export async function GET() {
	const appDirectory = path.join(process.cwd(), "app"); // Path to your app directory
	const directoryStructure = getDirectoryStructure(appDirectory);

	return NextResponse.json(directoryStructure);
}

================
File: app/api/wip/inspectores/route.ts
================
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getCachedData } from "@/lib/cache";

export async function GET() {
	// Query 'inspectores' table from your local DB
	const inspectores = await getCachedData("inspectores", async () => {
		return prisma.inspectores.findMany();
	});
	return NextResponse.json(inspectores);
}

================
File: app/api/wip/proyectistas/route.ts
================
import { NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { getCachedData } from "@/lib/cache";

export async function GET() {
	// Query 'proyectistass' table from your local DB
	const proyectistas = await getCachedData("proyectistas", async () => {
		return prisma.proyectistas.findMany();
	});
	return NextResponse.json(proyectistas);
}

================
File: app/api/wip/schema/route.ts
================
import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";

export async function GET() {
	try {
		const schemaText = fs.readFileSync(
			path.join(process.cwd(), "prisma/schema.prisma"),
			"utf8"
		);
		return NextResponse.json({ schema: schemaText });
	} catch (error) {
		return NextResponse.json(
			{ error: "Failed to read schema" },
			{ status: 500 }
		);
	}
}

================
File: app/api/wip/test-db/route.ts
================
import { PrismaClient } from "@prisma/client";
import { NextResponse } from "next/server";

const prisma = new PrismaClient();

export async function GET() {
	try {
		// Try to count obras as a simple test
		const count = await prisma.obras.count();
		return NextResponse.json({
			success: true,
			message: "Database connection successful",
			count,
		});
	} catch (error) {
		if (error instanceof Error) {
			console.log("Error: ", error.stack);
		}
		return NextResponse.json(
			{
				success: false,
				error:
					error instanceof Error ? error.message : "Database connection failed",
			},
			{ status: 500 }
		);
	} finally {
		await prisma.$disconnect();
	}
}

================
File: app/api/wip/upload-csv/route.ts
================
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { parse } from "csv-parse";
import { head } from "lodash";

const prisma = new PrismaClient();

function sanitizeColumnName(name: string): string {
	console.log(name);
	console.log(name.replace(/[^a-z0-9_]/g, "_").replace(/^[0-9]/, "_$&"));
	return name.replace(/[^a-z0-9_]/g, "_").replace(/^[0-9]/, "_$&");
}

function getColumnName(header: string): string {
	const sanitizedName = sanitizeColumnName(header);
	return sanitizedName === "id" ? "id" : sanitizedName;
}

function inferDecimalPrecisionAndScale(values: string[]): {
	precision: number;
	scale: number;
} {
	let maxWhole = 0;
	let maxFraction = 0;

	for (const value of values) {
		if (value.trim() === "") continue;
		const cleaned = value.replace(/^-/, ""); // Remove minus sign
		const parts = cleaned.split(".");
		const whole = parts[0] || "";
		const fraction = parts[1] || "";
		maxWhole = Math.max(maxWhole, whole.length);
		maxFraction = Math.max(maxFraction, fraction.length);
	}

	const precision = maxWhole + maxFraction;
	return { precision, scale: maxFraction };
}

function inferColumnType(values: string[]): string {
	const nonEmptyValues = values.filter((v) => v.trim() !== "");

	if (nonEmptyValues.length === 0) return "TEXT"; // Default to TEXT if column is empty

	const isInt = nonEmptyValues.every((v) => /^-?\d+$/.test(v));
	if (isInt) return "INT";

	const isFloat = nonEmptyValues.every((v) => /^-?\d+(\.\d+)?$/.test(v));
	if (isFloat) {
		const { precision, scale } = inferDecimalPrecisionAndScale(nonEmptyValues);
		return `DECIMAL(${Math.max(precision, 16)},${Math.min(scale, 4)})`;
	}

	const isDate = nonEmptyValues.every((v) => !isNaN(Date.parse(v)));
	if (isDate) return "DATETIME";

	// Find max length of values
	const maxLength = Math.max(...nonEmptyValues.map((v) => v.length));

	// Convert large VARCHAR to TEXT automatically
	if (maxLength > 191) return "TEXT"; // Anything above VARCHAR(191) becomes TEXT
	if (maxLength > 50) return `VARCHAR(${maxLength})`; // Otherwise, use VARCHAR

	return `VARCHAR(50)`; // Minimum size for shorter values
}

async function parseCSV(
	file: File
): Promise<{ headers: string[]; rows: string[][] }> {
	const text = await file.text();

	return new Promise((resolve, reject) => {
		const rows: string[][] = [];

		parse(text, {
			delimiter: ";", // Match MySQL export settings
			quote: '"', // Standard CSV quote
			escape: "\\", // Allow proper escaping
			relax_quotes: true, // Allow unescaped quotes
			relax_column_count: true, // Prevent column mismatch errors
			trim: true, // Remove extra spaces
			skip_empty_lines: true, // Ignore empty lines
		})
			.on("data", (row: string[], rowIndex: number) => {
				if (rowIndex < 10) console.log(`📌 Row ${rowIndex + 1}:`, row); // Debug first 10 rows
				// Replace escaped quotes with regular quotes
				const cleanedRow = row.map((cell) => cell.replace(/\\\"/g, '"'));
				rows.push(cleanedRow);
			})
			.on("error", (error: { message: string; lines?: number }) => {
				console.error(
					`❌ CSV Parsing Error at Line ${error.lines || "unknown"}:`,
					error.message
				);
				reject(
					new Error(
						`❌ CSV Parsing Error at Line ${error.lines || "unknown"}: ${
							error.message
						}`
					)
				);
			})
			.on("end", () => {
				const headers = rows.shift() || [];
				console.log("📌 CSV Headers:", headers);
				resolve({ headers, rows });
			});
	});
}

function sanitizeDate(value: string): string | null {
	// Handle NULL cases
	if (
		!value ||
		value.trim() === "" ||
		value.trim() === "\\N" ||
		value.toUpperCase() === "\\N"
	) {
		return null;
	}

	try {
		// First check if it's already in YYYY-MM-DD format
		const yyyymmdd = value.match(/^(\d{4})-(\d{2})-(\d{2})/);
		if (yyyymmdd) {
			return value.split(".")[0]; // Remove any milliseconds if present
		}

		// Then try DD/MM/YYYY format
		const ddmmyyyy = value.match(/^(\d{1,2})\/(\d{1,2})\/(\d{4})/);
		if (ddmmyyyy) {
			const [, day, month, year] = ddmmyyyy;
			return `${year}-${month.padStart(2, "0")}-${day.padStart(
				2,
				"0"
			)} 00:00:00`;
		}

		// Then try DD-MM-YYYY format
		const ddmmyyyyDash = value.match(/^(\d{1,2})-(\d{1,2})-(\d{4})/);
		if (ddmmyyyyDash) {
			const [, day, month, year] = ddmmyyyyDash;
			return `${year}-${month.padStart(2, "0")}-${day.padStart(
				2,
				"0"
			)} 00:00:00`;
		}

		console.warn(`⚠️ Unexpected date format: ${value}`);
		return null;
	} catch (error) {
		console.warn(`⚠️ Error parsing date: ${value}`, error);
		return null;
	}
}

async function createTableFromCSV(
	tableName: string,
	headers: string[],
	rows: string[][]
): Promise<string> {
	if (!headers.length) {
		throw new Error(`❌ No headers found. Cannot create table: ${tableName}`);
	}

	const columnTypes = headers.map((header, index) => {
		const columnValues = rows.map((row) => row[index] || "");
		return inferColumnType(columnValues);
	});

	const columns = headers.map((header, index) => {
		const columnName = getColumnName(header);
		return `${columnName} ${columnTypes[index]}`;
	});

	console.log("📌 Table Columns Definition:\n", columns);

	if (!/^[a-zA-Z_][a-zA-Z0-9_]*$/.test(tableName)) {
		throw new Error(`❌ Invalid table name: '${tableName}'`);
	}

	if (columns.length === 0) {
		throw new Error(`❌ No columns found for table '${tableName}'`);
	}

	const createTableSQL = `
    CREATE TABLE IF NOT EXISTS \`${tableName}\` (
      id INT AUTO_INCREMENT PRIMARY KEY,
      ${columns.join(",\n      ")}
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=DYNAMIC;
  `;

	console.log("🛠 SQL Query to Execute:\n", createTableSQL);

	try {
		if (!createTableSQL || createTableSQL.trim() === "") {
			throw new Error(`❌ SQL query is empty or malformed`);
		}

		const result = await prisma.$executeRawUnsafe(createTableSQL);
		console.log(`✅ Table '${tableName}' created successfully.`, result);
		return tableName;
	} catch (error) {
		if (error instanceof Error) {
			console.error(
				"❌ Error creating table:\n",
				error.stack,
				"\n",
				error.message
			);
			throw new Error(
				`❌ Failed to create table '${tableName}': ${error.message}`
			);
		} else {
			console.error("❌ Unknown error creating table:", error);
			throw new Error(
				`❌ Failed to create table '${tableName}': Unknown error occurred`
			);
		}
	}
}

function sanitizeNumeric(
	value: string,
	isDecimal: boolean = false
): string | number | null {
	if (!value || value.trim() === "") return null;

	let cleaned = value.replace(/[$€£,]/g, "").trim();

	if (isDecimal) {
		cleaned = cleaned.replace(",", ".");
		return parseFloat(cleaned);
	}

	return parseInt(cleaned);
}

async function insertDataIntoTable(
	tableName: string,
	headers: string[],
	rows: string[][]
): Promise<number> {
	if (rows.length === 0) return 0;

	// If we're inserting prices, first validate that all itemIds exist
	if (tableName === "prices") {
		const itemIds = rows
			.map((row) => {
				const itemIdIndex = headers.findIndex((h) => h === "itemId");
				return Number(row[itemIdIndex]);
			})
			.filter((id) => !isNaN(id));

		// Get unique item IDs
		const uniqueItemIds = [...new Set(itemIds)];

		// Check which items exist
		const existingItems = await prisma.items.findMany({
			where: {
				id: {
					in: uniqueItemIds,
				},
			},
			select: {
				id: true,
			},
		});

		const existingItemIds = new Set(existingItems.map((item) => item.id));

		// Find missing items
		const missingItemIds = uniqueItemIds.filter(
			(id) => !existingItemIds.has(id)
		);
		if (missingItemIds.length > 0) {
			throw new Error(
				`Cannot insert prices: Items with IDs ${missingItemIds.join(
					", "
				)} do not exist in the items table`
			);
		}
	}

	const columnMappings: Record<string, string> = {
		fechaContrato: "Fecha de Contrato",
		fechaInicio: "Fecha de Inicio",
		fechaFin: "Fecha de Finalización",
		fechaLicitacion: "FechaLicitacion",
		priceDate: "priceDate",
		unit: "unit",
		name: "name",
		// Add other mappings as needed
	};

	// Filter out empty headers and map them
	let sanitizedHeaders = headers
		.filter((header) => header.trim() !== "")
		.map((header) => columnMappings[header] || header);

	let insertedCount = 0;

	for (let i = 0; i < rows.length; i++) {
		const row = rows[i];

		try {
			// Filter out values for empty headers
			let sanitizedRow = row
				.slice(0, headers.length)
				.filter((_, index) => headers[index].trim() !== "")
				.map((value, index) => {
					const header = headers[index];

					// Handle \N values first
					if (!value || value.trim() === "" || value.trim() === "\\N") {
						return null;
					}

					// Special handling for prices table
					if (tableName === "prices") {
						// Handle priceDate column
						if (header === "priceDate") {
							// If it's just a number, assume it's a day of current month/year
							if (/^\d+$/.test(value)) {
								const date = new Date();
								date.setDate(parseInt(value));
								return date.toISOString().slice(0, 19).replace("T", " ");
							}
							const dateValue = sanitizeDate(value);
							if (dateValue === null) {
								console.warn(
									`⚠️ Could not parse date value: ${value} for column ${header}`
								);
							}
							return dateValue;
						}
						// Handle price column
						if (header === "price") {
							// Clean price value by removing multiple dots except the last one
							const cleanedPrice =
								value.split(".").slice(0, -1).join("") +
								"." +
								value.split(".").pop();
							return sanitizeNumeric(cleanedPrice, true);
						}
						// Handle numeric columns
						if (header === "id" || header === "itemId") {
							return Number(value);
						}
					} else if (tableName === "items") {
						// Special handling for items table
						if (header === "id") {
							return Number(value);
						}
						// Clean and normalize text values
						return value.trim().replace(/\\/g, "");
					} else {
						// General handling for other tables
						if (
							header.toLowerCase().includes("monto") ||
							header.toLowerCase().includes("precio") ||
							header.toLowerCase().includes("price")
						)
							return sanitizeNumeric(value, true);
						// Case insensitive check for date fields
						if (
							header.toLowerCase().includes("date") ||
							header.toLowerCase().includes("fecha") ||
							header.toLowerCase().includes("licit") ||
							/fecha|date|licit/i.test(header)
						) {
							const dateValue = sanitizeDate(value);
							if (dateValue === null) {
								console.warn(
									`⚠️ Could not parse date value: ${value} for column ${header}`
								);
							}
							return dateValue;
						}
					}

					return value.trim();
				}) as (string | number | null)[];

			console.log(`📌 Insert Row #${i + 1} Data:`, sanitizedRow);

			if (sanitizedRow.some((val) => val === undefined)) {
				console.error(
					`🚨 Row #${i + 1} contains undefined values:`,
					sanitizedRow
				);
				throw new Error(`Row #${i + 1} has undefined values.`);
			}

			const insertSQL = `
              INSERT INTO \`${tableName}\` (${sanitizedHeaders
				.map((h) => `\`${h}\``)
				.join(", ")})
              VALUES (${sanitizedRow.map(() => "?").join(", ")});
          `;

			console.log(`📌 Insert Row #${i + 1} SQL:`, insertSQL);

			await prisma.$executeRawUnsafe(insertSQL, ...sanitizedRow);
			insertedCount++;
		} catch (error) {
			console.log(
				`❌ Error inserting row #${i + 1} into '${tableName}':`,
				row,
				"\n",
				error instanceof Error ? error.message : String(error)
			);
			throw new Error(
				`Failed to insert data at row #${i + 1} in '${tableName}': ${
					error instanceof Error ? error.message : String(error)
				}`
			);
		}
	}

	console.log(`✅ Inserted ${insertedCount} rows into '${tableName}'`);
	return insertedCount;
}

export async function POST(request: Request) {
	try {
		const formData = await request.formData();
		const file = formData.get("file") as File | null;

		if (!file) {
			return NextResponse.json(
				{ error: "❌ No file provided" },
				{ status: 400 }
			);
		}

		console.log(`📂 Processing file: ${file.name}`);

		// Hardcoded flag to skip table creation
		const shouldCreateTable = false;
		console.log(
			"🔥 Skipping table creation as per constant flag: shouldCreateTable is false."
		);

		const { headers, rows } = await parseCSV(file);

		// Log extracted headers
		console.log("🛠 CSV Headers Extracted:", headers);

		if (!headers.length || !rows.length) {
			return NextResponse.json(
				{ error: "❌ CSV file is empty or malformed." },
				{ status: 400 }
			);
		}

		const tableName = sanitizeColumnName(file.name.split(".")[0]);

		// Validate headers before proceeding
		if (headers.some((h) => !h.trim())) {
			throw new Error(`❌ Some headers are empty or invalid: ${headers}`);
		}

		// Validate if rows exist before processing
		if (rows.length === 0) {
			throw new Error(`❌ No data rows found in CSV.`);
		}

		if (shouldCreateTable) {
			// Create table only if flag permits (won't be executed here)
			await createTableFromCSV(tableName, headers, rows);
			console.log("🛠 Table created successfully");
		} else {
			console.log("🔥 Skipping table creation as per constant flag.");
		}

		// Insert data into the table
		const insertedCount = await insertDataIntoTable(tableName, headers, rows);

		return NextResponse.json({
			message: "✅ CSV file processed",
			results: [
				{
					success: true,
					statement: `Table '${tableName}' ${
						shouldCreateTable ? "created/updated" : "skipped creation"
					}, ${insertedCount} rows inserted`,
				},
			],
		});
	} catch (error) {
		if (error instanceof Error) {
			console.error(
				"❌ Error processing CSV file:",
				error.stack,
				"\n",
				error.message
			);
			return NextResponse.json({ error: error.message }, { status: 500 });
		} else {
			console.error("❌ Unknown error processing CSV file:", error);
			return NextResponse.json(
				{ error: "An unknown error occurred while processing the CSV file" },
				{ status: 500 }
			);
		}
	}
}

================
File: app/api/wip/upload-sql/route.ts
================
import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

/**
 * Split SQL text into statements by semicolon,
 * ignoring semicolons inside quoted strings.
 */
/**
 * Splits a SQL string into separate statements by semicolons
 * that appear *outside* of single or double quotes.
 *
 * 1. Tracks whether we're in a single-quoted or double-quoted string.
 * 2. Logs each character index, current state, and whether we skip semicolons in quotes.
 * 3. Handles doubled single quotes ('') so they don't prematurely end a string.
 *
 * @param sql The full SQL dump as a string.
 * @returns An array of statement strings, each trimmed, in the order they appear.
 */
/**
 * Splits a SQL string into separate statements by semicolons
 * that appear *outside* of single or double quotes.
 *
 * This version has been updated to also handle backslash-escaped characters
 * inside quotes.
 *
 * @param sql The full SQL dump as a string.
 * @returns An array of statement strings, each trimmed.
 */
function splitSQLStatements(sql: string): string[] {
	const statements: string[] = [];
	let current = "";
	let inSingleQuote = false;
	let inDoubleQuote = false;

	for (let i = 0; i < sql.length; i++) {
		const char = sql[i];

		// If we are inside any quoted string and we see a backslash,
		// append it and the next character without any further checks.
		if ((inSingleQuote || inDoubleQuote) && char === "\\") {
			current += char;
			if (i + 1 < sql.length) {
				current += sql[i + 1];
				i++; // skip the next char
			}
			continue;
		}

		if (!inSingleQuote && !inDoubleQuote) {
			// We are outside of any quotes.
			if (char === "'") {
				inSingleQuote = true;
				current += char;
			} else if (char === '"') {
				inDoubleQuote = true;
				current += char;
			} else if (char === ";") {
				// A semicolon outside of quotes marks the end of a statement.
				const trimmed = current.trim();
				if (trimmed) {
					statements.push(trimmed);
				}
				current = "";
			} else {
				current += char;
			}
		} else if (inSingleQuote) {
			// We are inside a single-quoted string.
			if (char === "'") {
				// Check if it is an escaped single quote by doubling (i.e. '')
				if (i + 1 < sql.length && sql[i + 1] === "'") {
					current += "'";
					i++; // skip the next quote
				} else {
					inSingleQuote = false;
					current += "'";
				}
			} else {
				current += char;
			}
		} else if (inDoubleQuote) {
			// We are inside a double-quoted string.
			if (char === '"') {
				if (i + 1 < sql.length && sql[i + 1] === '"') {
					current += '"';
					i++;
				} else {
					inDoubleQuote = false;
					current += '"';
				}
			} else {
				current += char;
			}
		}
	}

	// Append any leftover text as the final statement.
	const leftover = current.trim();
	if (leftover.length > 0) {
		statements.push(leftover);
	}
	return statements;
}

/**
 * Transform MySQL-specific syntax into Postgres-friendly SQL.
 */
function transformMySQLtoPostgres(stmt: string): string {
	// 1) Remove MySQL comments (/* ... */, -- ...)
	//    (We do it inline so we don't break quoted text.)
	//    If your file has block comments or mid-statement line comments,
	//    you might want to remove them earlier, but carefully.
	let sql = stmt
		// Remove block comments
		.replace(/\/\*[\s\S]*?\*\//g, "")
		// Remove line comments not in quotes (naive approach—be careful if you have `--` inside strings)
		.replace(/-- .*/g, "");

	// 2) Replace backticks with double quotes
	sql = sql.replace(/`/g, '"');

	// 3) Remove or replace MySQL engine/charset
	sql = sql
		.replace(/ENGINE=InnoDB[^,)]*/gi, "")
		.replace(/AUTO_INCREMENT=\d+/gi, "")
		.replace(/CHARACTER SET [^\s,]+/gi, "")
		.replace(/COLLATE [^\s,]+/gi, "")
		.replace(/DEFAULT CHARSET=[^\s;]+/gi, "");

	// 4) Convert MySQL data types to Postgres
	sql = sql
		.replace(/int\(\d+\)/gi, "integer")
		.replace(/datetime/gi, "timestamp")
		.replace(/double/gi, "double precision")
		.replace(/longtext/gi, "text")
		.replace(/tinyint/gi, "smallint");

	// 5) Convert MySQL "AUTO_INCREMENT" -> Postgres IDENTITY
	sql = sql.replace(/AUTO_INCREMENT/gi, "GENERATED ALWAYS AS IDENTITY");

	// 6) Convert MySQL "UNIQUE KEY", "PRIMARY KEY", etc.
	sql = sql
		.replace(/UNIQUE KEY [^(]+/gi, "UNIQUE")
		// Keep PRIMARY KEY as is
		.replace(/KEY [^(]+\([^)]+\),?/gi, "") // remove normal KEY statements
		.replace(/FOREIGN KEY \([^)]+\) REFERENCES [^(]+\([^)]+\)/gi, (m) => m);

	// 7) Fix backslash-escaped quotes \'
	//    We do this only if MySQL dump used that style. Convert \'
	//    to '', typical for Postgres strings.
	//
	//    Also handle typical NULL => null
	//    And remove trailing commas before closing parenthesis in INSERT
	sql = sql
		.replace(/\\'/g, "''")
		.replace(/\bNULL\b/gi, "null")
		.replace(/,\s*\)/g, ")");

	return sql.trim();
}

export async function POST(request: Request) {
	try {
		const formData = await request.formData();
		const file = formData.get("file") as File;

		if (!file) {
			return NextResponse.json(
				{ error: "No se proporcionó ningún archivo" },
				{ status: 400 }
			);
		}

		const fileContent = await file.text();

		// 1) Split the entire file content into statements,
		//    ignoring semicolons inside quotes.
		const rawStatements = splitSQLStatements(fileContent);

		// 2) Transform each statement from MySQL to Postgres syntax
		const statements = rawStatements.map(transformMySQLtoPostgres);

		// 3) Execute only CREATE TABLE or INSERT statements
		const results: { success: boolean; statement: string; error?: string }[] =
			[];

		for (const stmt of statements) {
			const lower = stmt.toLowerCase();

			// (optional) skip empty statements after trimming
			if (!stmt.trim()) continue;

			if (lower.includes("create table") || lower.includes("insert into")) {
				try {
					// Postgres requires a semicolon at the end
					await prisma.$executeRawUnsafe(stmt + ";");
					results.push({
						success: true,
						statement: stmt.substring(0, 100) + "...",
					});
				} catch (err) {
					results.push({
						success: false,
						statement: stmt.substring(0, 100) + "...",
						error: (err as Error).message,
					});
				}
			}
		}

		return NextResponse.json({ message: "Archivo procesado", results });
	} catch (error) {
		console.error("Error processing SQL file:", error);
		return NextResponse.json(
			{ error: "Error al procesar el archivo SQL" },
			{ status: 500 }
		);
	}
}

================
File: app/certificados/[id]/page.tsx
================
'use client';

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useEffect, useState } from "react";
import { usePathname, useRouter } from "next/navigation";
import Link from "next/link";

interface Certificado {
  id: number;
  presupuestoId: number;
  documentoJson: any;
  fechaCreacion: string;
  certificadoAnteriorId: number | null;
  presupuesto: any;
  certificadoAnterior: any;
  certificadoSiguiente: any;
}

export default function CertificadoPage() {
  const pathname = usePathname();
  const router = useRouter();
  const id = pathname.split('/').pop();
  const [certificado, setCertificado] = useState<Certificado | null>(null);

  useEffect(() => {
    if (id) {
      fetch(`/api/certificados/${id}`)
        .then(res => res.json())
        .then(data => setCertificado(data))
        .catch(error => console.error('Error fetching certificado:', error));
    }
  }, [id]);

  const handleDelete = async () => {
    if (confirm('¿Está seguro que desea eliminar este certificado?')) {
      try {
        const response = await fetch(`/api/certificados/${id}`, {
          method: 'DELETE',
        });
        if (response.ok) {
          router.push('/certificados');
        }
      } catch (error) {
        console.error('Error deleting certificado:', error);
      }
    }
  };

  if (!certificado) {
    return <div>Loading...</div>;
  }

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Certificado #{certificado.id}</h1>
        <div className="space-x-4">
          <Link href="/certificados">
            <Button variant="outline">Volver</Button>
          </Link>
          <Button variant="destructive" onClick={handleDelete}>
            Eliminar
          </Button>
        </div>
      </div>

      <div className="grid gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Detalles del Certificado</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <p>
                <strong>Presupuesto:</strong> {certificado.presupuesto?.id}
              </p>
              <p>
                <strong>Fecha de Creación:</strong>{" "}
                {new Date(certificado.fechaCreacion).toLocaleDateString()}
              </p>
              <p>
                <strong>Certificado Anterior:</strong>{" "}
                {certificado.certificadoAnterior
                  ? `#${certificado.certificadoAnterior.id}`
                  : "Primero"}
              </p>
              <p>
                <strong>Certificado Siguiente:</strong>{" "}
                {certificado.certificadoSiguiente
                  ? `#${certificado.certificadoSiguiente.id}`
                  : "Ninguno"}
              </p>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Documento JSON</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="bg-muted p-4 rounded-lg overflow-auto max-h-96">
              {JSON.stringify(certificado.documentoJson, null, 2)}
            </pre>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

================
File: app/certificados/new/page.tsx
================
'use client';

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useRouter } from "next/navigation";
import { useState } from "react";
import Link from "next/link";

export default function NewCertificadoPage() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    presupuestoId: '',
    documentoJson: '',
    certificadoAnteriorId: '',
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    try {
      const jsonData = JSON.parse(formData.documentoJson);
      const response = await fetch('/api/certificados', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          presupuestoId: parseInt(formData.presupuestoId),
          documentoJson: jsonData,
          certificadoAnteriorId: formData.certificadoAnteriorId ? parseInt(formData.certificadoAnteriorId) : null,
        }),
      });

      if (response.ok) {
        router.push('/certificados');
      } else {
        alert('Error al crear el certificado');
      }
    } catch (error) {
      console.error('Error creating certificado:', error);
      alert('Error: El JSON ingresado no es válido');
    }
  };

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Nuevo Certificado</h1>
        <Link href="/certificados">
          <Button variant="outline">Volver</Button>
        </Link>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Crear Nuevo Certificado</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="presupuestoId">ID del Presupuesto</Label>
              <Input
                id="presupuestoId"
                type="number"
                required
                value={formData.presupuestoId}
                onChange={(e) =>
                  setFormData({ ...formData, presupuestoId: e.target.value })
                }
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="certificadoAnteriorId">
                ID del Certificado Anterior (opcional)
              </Label>
              <Input
                id="certificadoAnteriorId"
                type="number"
                value={formData.certificadoAnteriorId}
                onChange={(e) =>
                  setFormData({
                    ...formData,
                    certificadoAnteriorId: e.target.value,
                  })
                }
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="documentoJson">Documento JSON</Label>
              <Textarea
                id="documentoJson"
                required
                className="min-h-[200px] font-mono"
                value={formData.documentoJson}
                onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) =>
                  setFormData({ ...formData, documentoJson: e.target.value })
                }
                placeholder="{\n  // Ingrese el JSON del documento aquí\n}"
              />
            </div>

            <Button type="submit">Crear Certificado</Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: app/certificados/page.tsx
================
'use client';

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useEffect, useState } from "react";
import Link from "next/link";

interface Certificado {
  id: number;
  presupuestoId: number;
  documentoJson: any;
  fechaCreacion: string;
  certificadoAnteriorId: number | null;
  presupuesto: any;
}

export default function CertificadosPage() {
  const [certificados, setCertificados] = useState<Certificado[]>([]);

  useEffect(() => {
    fetch('/api/certificados')
      .then(res => res.json())
      .then(data => setCertificados(data))
      .catch(error => console.error('Error fetching certificados:', error));
  }, []);

  return (
    <div className="container mx-auto py-10">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Certificados Mensuales</h1>
        <Link href="/certificados/new">
          <Button>Crear Nuevo Certificado</Button>
        </Link>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {certificados.map((certificado) => (
          <Link href={`/certificados/${certificado.id}`} key={certificado.id}>
            <Card className="hover:shadow-lg transition-shadow">
              <CardHeader>
                <CardTitle>Certificado #{certificado.id}</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-gray-500">
                  Presupuesto: {certificado.presupuesto?.id}
                </p>
                <p className="text-sm text-gray-500">
                  Fecha: {new Date(certificado.fechaCreacion).toLocaleDateString()}
                </p>
                <p className="text-sm text-gray-500">
                  Certificado Anterior: {certificado.certificadoAnteriorId || 'Primero'}
                </p>
              </CardContent>
            </Card>
          </Link>
        ))}
      </div>
    </div>
  );
}

================
File: app/components/common/DataSection.tsx
================
import React from 'react';
import { motion } from 'framer-motion';
import { Package } from 'lucide-react';
import { cn } from '@/lib/utils';
import { DataTable } from './DataTable';
import { BaseSectionProps } from '@/lib/types/common';

interface DataSectionProps<T> extends BaseSectionProps {
  items: T[];
  columns: Array<{
    header: string;
    key: keyof T;
    editable?: boolean;
    width?: string;
    render?: (value: any, item: T) => React.ReactNode;
  }>;
  onUpdate?: (id: string | number, key: keyof T, value: string) => void;
  onDelete?: (id: string | number) => void;
  getRowId: (item: T) => string | number;
  showActions?: boolean;
  footer?: React.ReactNode;
}

export function DataSection<T>({
  tag,
  tagIndex,
  items,
  columns,
  onUpdate,
  onDelete,
  getRowId,
  showActions = false,
  highlightChanges = false,
  footer,
}: DataSectionProps<T>) {
  const ref = React.useRef(null);

  // Animation variants
  const containerVariants = {
    hidden: { scale: 1.1, opacity: 0 },
    visible: { scale: 1, opacity: 1 }
  };

  const borderVariants = {
    hidden: { borderColor: 'rgba(59, 130, 246, 0.75)' },
    visible: { borderColor: 'rgba(59, 130, 246, 0)' }
  };

  return (
    <motion.div
      ref={ref}
      id={`section-${tag}`}
      initial="visible"
      animate="visible"
      variants={containerVariants}
      transition={{ duration: 1 }}
      className="relative scroll-mt-10"
    >
      <motion.div
        initial="visible"
        animate="visible"
        variants={borderVariants}
        transition={{ duration: 1.5, delay: 0.2 }}
        className={cn(
          "border-2 rounded-lg",
          (!Array.isArray(items) || items.length === 0) && "border-dashed border-muted-foreground/50 bg-muted/50"
        )}
      >
        {/* Section Header */}
        <h3 className={cn(
          "text-[14px] font-bold bg-input/20 rounded-lg p-2 pl-4 flex items-center justify-between gap-2",
          (!Array.isArray(items) || items.length === 0) && "text-muted-foreground"
        )}>
          <span className="flex items-center gap-2">
            <Package size={16} strokeWidth={2} aria-hidden="true" />
            {tagIndex + 1}. {tag.toUpperCase()}
          </span>
        </h3>

        {/* Empty state */}
        {(!Array.isArray(items) || items.length === 0) && (
          <div className="h-24 flex flex-col items-center justify-center gap-2 text-muted-foreground">
            <Package className="h-8 w-8 opacity-50" />
            <span className="text-sm">No hay elementos en esta sección</span>
          </div>
        )}

        {/* Data table */}
        {Array.isArray(items) && items.length > 0 && (
          <DataTable
            data={items}
            columns={columns}
            onUpdate={onUpdate}
            onDelete={onDelete}
            getRowId={getRowId}
            showActions={showActions}
            highlightChanges={highlightChanges}
          />
        )}

        {/* Optional footer */}
        {footer}
      </motion.div>
    </motion.div>
  );
}

================
File: app/components/common/DataTable.tsx
================
import React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { EditableInput } from './EditableInput';
import { Button } from '@/components/ui/button';
import { Trash2 } from 'lucide-react';
import { cn } from '@/lib/utils';

interface Column<T> {
  header: string;
  key: keyof T;
  editable?: boolean;
  width?: string;
  render?: (value: any, item: T) => React.ReactNode;
}

interface DataTableProps<T> {
  data: T[];
  columns: Column<T>[];
  onUpdate?: (id: string | number, key: keyof T, value: string) => void;
  onDelete?: (id: string | number) => void;
  getRowId: (item: T) => string | number;
  showActions?: boolean;
  highlightChanges?: boolean;
  className?: string;
}

export function DataTable<T>({
  data,
  columns,
  onUpdate,
  onDelete,
  getRowId,
  showActions = false,
  highlightChanges = false,
  className,
}: DataTableProps<T>) {
  return (
    <Table className={cn("bg-white", className)}>
      <TableHeader>
        <TableRow className="bg-white">
          {columns.map((column) => (
            <TableHead
              key={String(column.key)}
              className={cn("bg-white", column.width)}
            >
              {column.header}
            </TableHead>
          ))}
          {showActions && (
            <TableHead className="bg-white w-[100px] text-center">
              Acciones
            </TableHead>
          )}
        </TableRow>
      </TableHeader>

      <TableBody>
        {data.map((item) => (
          <TableRow key={getRowId(item)}>
            {columns.map((column) => (
              <TableCell
                key={`${getRowId(item)}-${String(column.key)}`}
                className="border-r"
              >
                {column.editable && onUpdate ? (
                  <EditableInput
                    value={item[column.key]}
                    onChange={(value) => onUpdate(getRowId(item), column.key, value)}
                    highlightChanges={highlightChanges}
                  />
                ) : column.render ? (
                  column.render(item[column.key], item)
                ) : (
                  String(item[column.key] || '')
                )}
              </TableCell>
            ))}
            {showActions && onDelete && (
              <TableCell className="text-center border-r border-l">
                <Button
                  variant="destructive"
                  className="flex items-center gap-1 h-6 w-7 p-0 mx-auto"
                  onClick={() => onDelete(getRowId(item))}
                >
                  <Trash2 className="w-4 h-4" />
                </Button>
              </TableCell>
            )}
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}

================
File: app/components/common/EditableInput.tsx
================
import React, { useState, useEffect, useRef } from 'react';
import { cn } from "@/lib/utils";
import { EditableCellProps } from '@/lib/types/common';

export function EditableInput({
  value: initialValue,
  onChange,
  suffix = "",
  prefix = "",
  originalValue,
  highlightChanges = false,
}: EditableCellProps) {
  const [value, setValue] = useState(String(initialValue));
  const originalValueRef = useRef(originalValue);
  const hasChanged = originalValueRef.current !== undefined && String(originalValueRef.current) !== String(initialValue);
  const shouldHighlight = highlightChanges && hasChanged;
  const hiddenSpanRef = useRef<HTMLSpanElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    setValue(String(initialValue));
  }, [initialValue]);

  const handleBlur = () => {
    onChange(value);
  };

  return (
    <div className={cn(
      "flex items-center justify-center gap-1 h-full flex-grow relative group",
      shouldHighlight && "bg-yellow-100"
    )}>
      {prefix && <span className="text-sm text-gray-700">{prefix}</span>}
      <div className="relative">
        <input
          ref={inputRef}
          className={cn(
            "border-b border-transparent group-hover:border-gray-300 group-focus:border-gray-300",
            "focus:outline-none bg-transparent text-right focus-within:border-gray-300 w-[20px] min-w-0"
          )}
          value={value}
          style={{ width: hiddenSpanRef.current ? `${hiddenSpanRef.current.offsetWidth + 4}px` : 'auto' }}
          onKeyDown={(e) => {
            if (e.key === 'Enter') {
              e.preventDefault();
              (e.target as HTMLInputElement).blur();
            }
          }}
          onChange={(e) => setValue(e.target.value)}
          onBlur={handleBlur}
        />
        <span
          ref={hiddenSpanRef}
          className="invisible absolute top-0 left-0 whitespace-pre"
          style={{
            font: 'inherit',
            position: 'absolute',
            padding: '0',
            border: '0',
            whiteSpace: 'pre'
          }}
        >
          {value}
        </span>
      </div>
      {suffix && <span className="text-sm text-gray-700">{suffix}</span>}
      {shouldHighlight && (
        <div className="absolute invisible group-hover:visible bg-black text-white text-xs rounded py-1 px-2 -top-8 left-1/2 transform -translate-x-1/2">
          Original: {originalValueRef.current}
        </div>
      )}
    </div>
  );
}

================
File: app/components/common/PageHeader.tsx
================
import React from 'react';
import { Card } from '@/components/ui/card';

interface PageHeaderProps {
  title: string;
  subtitle: string;
  obra: string;
  ubicacion: string;
}

export function PageHeader({ title, subtitle, obra, ubicacion }: PageHeaderProps) {
  return (
    <div className="text-center mb-8">
      <h1 className="text-2xl font-bold text-gray-800 mb-4">
        {title}
      </h1>
      <Card className="text-gray-600 flex flex-col justify-center items-start p-2 px-4">
        <p className="mb-2">Obra: <b>{obra}</b></p>
        <p>Ubicacion: <b>{ubicacion}</b></p>
      </Card>

      <h2 className="mt-4 text-lg font-bold uppercase underline">
        {subtitle}
      </h2>
    </div>
  );
}

================
File: app/components/presupuesto/PresupuestoSection.tsx
================
import React from 'react'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Input } from "@/components/ui/input"
import { cn } from '@/lib/utils'
import { PresupuestoItem, MedicionItem } from '@/app/presupuesto/types'

interface PresupuestoSectionProps {
  tag: string
  tagIndex: number
  items: PresupuestoItem[] | MedicionItem[]
  previewVersion: 'false' | 'medicion'
  grandTotal: number
  sectionRubros: string[]
  sectionIacums: string[]
  updateData: (tag: string, itemId: string | number, key: string, value: string) => void
  handleDeleteRow: (tag: string, itemId: string | number) => void
  allElements: any[]
  highlightChanges: boolean
}

export function PresupuestoSection({
  tag,
  tagIndex,
  items,
  previewVersion,
  grandTotal,
  sectionRubros,
  sectionIacums,
  updateData,
  handleDeleteRow,
  allElements,
  highlightChanges,
}: PresupuestoSectionProps) {
  // Rest of the component implementation...
  // ... existing code ...
}

================
File: app/controllers/mediciones.controller.ts
================
import { prisma } from "@/lib/prisma";
import { APIError } from "@/lib/utils/errorHandler";

interface Medicion {
	id: number;
	presupuestoId: number;
	data: any;
	createdAt: Date;
	updatedAt: Date;
}

interface MedicionWithPresupuesto extends Medicion {
	presupuesto: {
		id: number;
		obraId: number;
		data: any;
		createdAt: Date;
		updatedAt: Date;
	};
}

export async function getMedicionesByPresupuestoId(presupuestoId: number) {
	const mediciones = await prisma.$queryRaw<Medicion[]>`
    SELECT * FROM mediciones 
    WHERE presupuestoId = ${presupuestoId}
    ORDER BY createdAt DESC
  `;

	if (!mediciones || mediciones.length === 0) {
		throw new APIError("No mediciones found for this presupuesto", 404);
	}

	return mediciones;
}

export async function getMedicionById(id: number) {
	const [medicion] = await prisma.$queryRaw<MedicionWithPresupuesto[]>`
    SELECT m.*, p.* 
    FROM mediciones m
    LEFT JOIN presupuestos p ON m.presupuestoId = p.id
    WHERE m.id = ${id}
  `;

	if (!medicion) {
		throw new APIError("Medicion not found", 404);
	}

	return medicion;
}

export async function createMedicion(presupuestoId: number, data: any) {
	// First check if the presupuesto exists
	const presupuesto = await prisma.presupuestos.findUnique({
		where: { id: presupuestoId },
	});

	if (!presupuesto) {
		throw new APIError("Presupuesto not found", 404);
	}

	const now = new Date();
	const [medicion] = await prisma.$queryRaw<Medicion[]>`
    INSERT INTO mediciones (presupuestoId, data, createdAt, updatedAt)
    VALUES (${presupuestoId}, ${JSON.stringify(
		data.data || {}
	)}, ${now}, ${now})
    RETURNING *
  `;

	return medicion;
}

export async function updateMedicion(id: number, data: any) {
	const [existingMedicion] = await prisma.$queryRaw<Medicion[]>`
    SELECT * FROM mediciones WHERE id = ${id}
  `;

	if (!existingMedicion) {
		throw new APIError("Medicion not found", 404);
	}

	const now = new Date();
	const [medicion] = await prisma.$queryRaw<Medicion[]>`
    UPDATE mediciones 
    SET data = ${JSON.stringify(data.data)}, updatedAt = ${now}
    WHERE id = ${id}
    RETURNING *
  `;

	return medicion;
}

export async function deleteMedicion(id: number) {
	const [existingMedicion] = await prisma.$queryRaw<Medicion[]>`
    SELECT * FROM mediciones WHERE id = ${id}
  `;

	if (!existingMedicion) {
		throw new APIError("Medicion not found", 404);
	}

	await prisma.$queryRaw`
    DELETE FROM mediciones WHERE id = ${id}
  `;

	return null;
}

================
File: app/controllers/obras.controller.ts
================
import { prisma } from "@/lib/prisma";
import { APIError } from "@/lib/utils/errorHandler";
import { Prisma } from "@prisma/client";

export async function getAllObras() {
	try {
		const obras = await prisma.obras.findMany({
			include: {
				presupuestos: true,
			},
		});

		if (!obras) {
			throw new APIError("No obras found", 404);
		}

		return obras;
	} catch (error) {
		console.error("Error in getAllObras:", error);
		throw error;
	}
}

export async function getObraById(id: number) {
	console.log("getObraById called with id:", id);
	try {
		const obra = await prisma.obras.findFirst({
			where: {
				id: id,
			},
			include: {
				presupuestos: true,
			},
		});

		if (!obra) {
			throw new APIError("Obra not found", 404);
		}

		return obra;
	} catch (error) {
		console.log("Error in getObraById:", error.stack);
		console.error("Error in getObraById:", error);
		throw error;
	}
}

export async function createObra(data: any) {
	return prisma.obras.create({
		data: {
			NombreObra: data.name,
			Monto_Contrato: data.Monto_Contrato,
			plazo: data.plazo,
			Fecha_de_Contrato: data.Fecha_de_Contrato
				? new Date(data.Fecha_de_Contrato)
				: null,
			Fecha_de_Inicio: data.Fecha_de_Inicio
				? new Date(data.Fecha_de_Inicio)
				: null,
			Fecha_de_Finalizaci_n: data.Fecha_de_Finalizaci_n
				? new Date(data.Fecha_de_Finalizaci_n)
				: null,
			Fechalicit: data.Fechalicit ? new Date(data.Fechalicit) : null,
			inaugurada: data.inaugurada || 0,
		},
	});
}

export async function updateObra(id: number, data: Prisma.obrasUpdateInput) {
	try {
		const updateData: Prisma.obrasUpdateInput = {
			NombreObra: data.NombreObra,
			Monto_Contrato: data.Monto_Contrato,
			plazo: data.plazo,
			Fecha_de_Contrato: data.Fecha_de_Contrato,
			Fecha_de_Inicio: data.Fecha_de_Inicio,
			Fecha_de_Finalizaci_n: data.Fecha_de_Finalizaci_n,
			Fechalicit: data.Fechalicit,
			inaugurada: data.inaugurada,
			data: data.data || Prisma.JsonNull,
		};

		return await prisma.obras.update({
			where: {
				IdObras: id,
			},
			data: updateData,
		});
	} catch (error) {
		console.error("Error in updateObra:", error);
		throw error;
	}
}

export async function deleteObra(id: number) {
	const obra = await prisma.obras.findUnique({
		where: { IdObras: id },
	});

	if (!obra) {
		throw new APIError("Obra not found", 404);
	}

	return prisma.obras.delete({
		where: { IdObras: id },
	});
}

================
File: app/controllers/presupuestos.controller.ts
================
import { prisma } from "@/lib/prisma";
import { APIError } from "@/lib/utils/errorHandler";

export async function getPresupuestosByObraId(obraId: number) {
	try {
		const presupuestos = await prisma.presupuestos.findMany({
			where: {
				id: obraId,
			},
			orderBy: {
				createdAt: "desc",
			},
		});

		return presupuestos;
	} catch (error) {
		console.error("Error in getPresupuestosByObraId:", error);
		throw new APIError("Failed to fetch presupuestos");
	}
}

export async function getPresupuestoById(id: number) {
	const presupuesto = await prisma.presupuestos.findUnique({
		where: { id },
		include: {
			obra: true,
		},
	});

	if (!presupuesto) {
		throw new APIError("Presupuesto not found", 404);
	}

	return presupuesto;
}

export async function createPresupuesto(obraId: number, data: any) {
	try {
		// First check if the obra exists
		const obra = await prisma.obras.findUnique({
			where: {
				IdObras: obraId,
			},
		});

		if (!obra) {
			throw new APIError("Obra not found", 404);
		}

		// Create the presupuesto
		const presupuesto = await prisma.presupuestos.create({
			data: {
				obraId: obraId,
				data: data,
			},
		});

		return presupuesto;
	} catch (error) {
		console.error("Error in createPresupuesto:", error);
		if (error instanceof APIError) {
			throw error;
		}
		throw new APIError("Failed to create presupuesto");
	}
}

export async function updatePresupuesto(id: number, data: any) {
	try {
		const presupuesto = await prisma.presupuestos.update({
			where: {
				id: id,
			},
			data: {
				data: data,
			},
		});

		return presupuesto;
	} catch (error) {
		console.error("Error in updatePresupuesto:", error);
		throw new APIError("Failed to update presupuesto");
	}
}

export async function deletePresupuesto(id: number) {
	try {
		const presupuesto = await prisma.presupuestos.delete({
			where: {
				id: id,
			},
		});

		return presupuesto;
	} catch (error) {
		console.error("Error in deletePresupuesto:", error);
		throw new APIError("Failed to delete presupuesto");
	}
}

================
File: app/dashboard/page.tsx
================
'use client'
import CustomTable, { ElementRow } from "@/components/Table/custom-table"
import { Card } from "@/components/ui/card"
import { useEffect, useState } from "react"

const CACHE_KEY = 'dashboard_data_cache';
const CACHE_EXPIRY = 1000 * 60 * 60; // 1 hour

const fetchMoreData = async (start: number, limit: number = 100): Promise<ElementRow[] | null> => {
  try {
    const res = await fetch(`/api/tagsWithElements?start=${start}&limit=${limit}`);
    if (!res.ok) throw new Error(`Failed to fetch data: ${res.statusText}`);
    const data = await res.json();
    console.log('data', data);
    return data;
  } catch (error) {
    console.error('Error in fetchMoreData:', error);
    return null;
  }
}

export default function Page() {
  const [data, setData] = useState<ElementRow[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadData = async () => {
      try {
        // Try to get data from cache first
        const cached = localStorage.getItem(CACHE_KEY);
        if (cached) {
          const { data: cachedData, timestamp } = JSON.parse(cached);

          // Check if cache is still valid (not expired)
          if (Date.now() - timestamp < CACHE_EXPIRY) {
            setData(cachedData);
            setIsLoading(false);
            return;
          }
        }

        // If no cache or expired, fetch fresh data
        setIsLoading(true);
        const freshData = await fetchMoreData(0, 100);

        if (freshData) {
          // Update state
          setData(freshData);

          // Save to cache with timestamp
          localStorage.setItem(CACHE_KEY, JSON.stringify({
            data: freshData,
            timestamp: Date.now()
          }));
        }
      } catch (error) {
        console.error('Error loading data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadData();
  }, []);

  return (
    <div className="flex flex-1 flex-col gap-4 p-4 bg-muted/70">
      <Card className="min-h-[100vh] flex-1 rounded-xl md:min-h-min p-0">
        {isLoading ? (
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900" />
          </div>
        ) : (
          <CustomTable
          />
        )}
      </Card>
      {/* <Card className="min-h-[100vh] flex-1 rounded-xl md:min-h-min p-0" >
            <ExpandableTable />
          </Card> */}
      <div className="grid auto-rows-min gap-4 md:grid-cols-3">
        <div className="aspect-video rounded-xl bg-muted/50" />
        <div className="aspect-video rounded-xl bg-muted/50" />
        <div className="aspect-video rounded-xl bg-muted/50" />
      </div>
    </div>
  );
}

================
File: app/db/certificaciones/page.tsx
================
"use client";

import { useEffect, useState } from "react";

interface Certificacion {
  IdCertificado: number;
  NumCertificado: string | null;
  Monto: number | null;
  MesCertificado: Date | null;
  IdObras: number | null;
  IdTipos: number | null;
  IdInspectores: number | null;
  IdEmpresa: number | null;
  MesBasico: Date | null;
  FechaLiq: Date | null;
  FechaIng: Date | null;
  pagado: number | null;
  netoapagar: number | null;
  fuente: number | null;
  numexpte: string | null;
  provisorio: number | null;
}

export default function CertificacionesPage() {
  const [certificaciones, setCertificaciones] = useState<Certificacion[]>([]);

  useEffect(() => {
    // Call our local route
    fetch("/api/certificaciones")
      .then((res) => res.json())
      .then((data) => {
        const formattedData = data.map((certificado: Certificacion) => ({
          ...certificado,
          MesCertificado: certificado.MesCertificado ? new Date(certificado.MesCertificado) : null,
          MesBasico: certificado.MesBasico ? new Date(certificado.MesBasico) : null,
          FechaLiq: certificado.FechaLiq ? new Date(certificado.FechaLiq) : null,
          FechaIng: certificado.FechaIng ? new Date(certificado.FechaIng) : null,
        }));
        setCertificaciones(formattedData);
      });
  }, []);

  console.log(certificaciones);

  if (certificaciones.length === 0) {
    return <div>Loading...</div>;
  }

  return (
    <div className="p-4">
      <h1 className="font-bold text-xl mb-4">Certificaciones</h1>
      <table className="min-w-full border">
        <thead>
          <tr>
            <th className="border px-2 py-1">ID</th>
            <th className="border px-2 py-1">NumCertificado</th>
            <th className="border px-2 py-1">Monto</th>
            <th className="border px-2 py-1">MesCertificado</th>
            <th className="border px-2 py-1">IdObras</th>
            <th className="border px-2 py-1">IdTipos</th>
            <th className="border px-2 py-1">IdInspectores</th>
            <th className="border px-2 py-1">IdEmpresa</th>
            <th className="border px-2 py-1">MesBasico</th>
            <th className="border px-2 py-1">FechaLiq</th>
            <th className="border px-2 py-1">FechaIng</th>
            <th className="border px-2 py-1">Pagado</th>
            <th className="border px-2 py-1">Neto a Pagar</th>
            <th className="border px-2 py-1">Fuente</th>
            <th className="border px-2 py-1">NumExpte</th>
            <th className="border px-2 py-1">Provisorio</th>
          </tr>
        </thead>
        <tbody>
          {certificaciones.map((certificado) => (
            <tr key={certificado.IdCertificado}>
              <td className="border px-2 py-1 text-center">{certificado.IdCertificado}</td>
              <td className="border px-2 py-1">{certificado.NumCertificado}</td>
              <td className="border px-2 py-1">{certificado.Monto}</td>
              <td className="border px-2 py-1">{certificado.MesCertificado?.toLocaleDateString()}</td>
              <td className="border px-2 py-1">{certificado.IdObras}</td>
              <td className="border px-2 py-1">{certificado.IdTipos}</td>
              <td className="border px-2 py-1">{certificado.IdInspectores}</td>
              <td className="border px-2 py-1">{certificado.IdEmpresa}</td>
              <td className="border px-2 py-1">{certificado.MesBasico?.toLocaleDateString()}</td>
              <td className="border px-2 py-1">{certificado.FechaLiq?.toLocaleDateString()}</td>
              <td className="border px-2 py-1">{certificado.FechaIng?.toLocaleDateString()}</td>
              <td className="border px-2 py-1">{certificado.pagado}</td>
              <td className="border px-2 py-1">{certificado.netoapagar}</td>
              <td className="border px-2 py-1">{certificado.fuente}</td>
              <td className="border px-2 py-1">{certificado.numexpte}</td>
              <td className="border px-2 py-1">{certificado.provisorio}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: app/db/constructionElements/page.tsx
================
"use client";

import { useEffect, useState } from "react";

interface Element {
  id: number;
  name: string;
  unit: string;
}

export default function ElementsPage() {
  const [elements, setElements] = useState<Element[]>([]);

  useEffect(() => {
    // Call our local route
    fetch("/api/constructionElements")
      .then((res) => res.json())
      .then((data) => {
        setElements(data);
      });
  }, []);

  return (
    <div className="p-4">
      <h1 className="font-bold text-xl mb-4">Elements</h1>
      <table className="min-w-full border">
        <thead>
          <tr>
            <th className="border px-2 py-1">ID</th>
            <th className="border px-2 py-1">Name</th>
            <th className="border px-2 py-1">Unit</th>
          </tr>
        </thead>
        <tbody>
          {elements.map((element) => (
            <tr key={element.id}>
              <td className="border px-2 py-1 text-center">{element.id}</td>
              <td className="border px-2 py-1">{element.name}</td>
              <td className="border px-2 py-1">{element.unit}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: app/db/empresas/page.tsx
================
"use client";

import { useEffect, useState } from "react";

interface Empresa {
  IdEmpresa: number;
  Nombreempresa: string | null;
  Responsable: string | null;
  Dirección: string | null;
  Telefono: string | null;
  Cuit: string | null;
  Observaciones: string | null;
}

export default function EmpresasPage() {
  const [empresas, setEmpresas] = useState<Empresa[]>([]);

  useEffect(() => {
    // Call our local route
    fetch("/api/empresas")
      .then((res) => res.json())
      .then((data) => {
        setEmpresas(data);
      });
  }, []);

  return (
    <div className="p-4">
      <h1 className="font-bold text-xl mb-4">Empresas</h1>
      <table className="min-w-full border">
        <thead>
          <tr>
            <th className="border px-2 py-1">ID</th>
            <th className="border px-2 py-1">Nombre</th>
            <th className="border px-2 py-1">Responsable</th>
            <th className="border px-2 py-1">Dirección</th>
            <th className="border px-2 py-1">Teléfono</th>
            <th className="border px-2 py-1">Cuit</th>
            <th className="border px-2 py-1">Observaciones</th>
          </tr>
        </thead>
        <tbody>
          {empresas.map((empresa) => (
            <tr key={empresa.IdEmpresa}>
              <td className="border px-2 py-1 text-center">{empresa.IdEmpresa}</td>
              <td className="border px-2 py-1">{empresa.Nombreempresa}</td>
              <td className="border px-2 py-1">{empresa.Responsable}</td>
              <td className="border px-2 py-1">{empresa.Dirección}</td>
              <td className="border px-2 py-1">{empresa.Telefono}</td>
              <td className="border px-2 py-1">{empresa.Cuit}</td>
              <td className="border px-2 py-1">{empresa.Observaciones}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: app/db/inspectores/page.tsx
================
"use client";

import { useEffect, useState } from "react";

interface Inspector {
  IdInspectores: number;
  Tratamiento: string | null;
  Apellido: string | null;
  Nombres: string | null;
  Campo1: string | null;
  Dirección: string | null;
  Teléfono: string | null;
  Inspector: number | null;
}

export default function InspectoresPage() {
  const [inspectores, setInspectores] = useState<Inspector[]>([]);

  useEffect(() => {
    // Call our local route
    fetch("/api/inspectores")
      .then((res) => res.json())
      .then((data) => {
        setInspectores(data);
      });
  }, []);

  if (inspectores.length === 0) {
    return <div>Loading...</div>;
  }

  return (
    <div className="p-4">
      <h1 className="font-bold text-xl mb-4">Inspectores</h1>
      <table className="min-w-full border">
        <thead>
          <tr>
            <th className="border px-2 py-1">ID</th>
            <th className="border px-2 py-1">Tratamiento</th>
            <th className="border px-2 py-1">Apellido</th>
            <th className="border px-2 py-1">Nombres</th>
            <th className="border px-2 py-1">Campo1</th>
            <th className="border px-2 py-1">Dirección</th>
            <th className="border px-2 py-1">Teléfono</th>
            <th className="border px-2 py-1">Inspector</th>
          </tr>
        </thead>
        <tbody>
          {inspectores.map((inspector) => (
            <tr key={inspector.IdInspectores}>
              <td className="border px-2 py-1 text-center">{inspector.IdInspectores}</td>
              <td className="border px-2 py-1">{inspector.Tratamiento}</td>
              <td className="border px-2 py-1">{inspector.Apellido}</td>
              <td className="border px-2 py-1">{inspector.Nombres}</td>
              <td className="border px-2 py-1">{inspector.Campo1}</td>
              <td className="border px-2 py-1">{inspector.Dirección}</td>
              <td className="border px-2 py-1">{inspector.Teléfono}</td>
              <td className="border px-2 py-1">{inspector.Inspector}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: app/db/layout.tsx
================
import Link from "next/link";

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div>
      <nav className="bg-gray-100 p-4">
        <ul className="flex space-x-4">
          <li>
            <Link href="/db/proyectistas">
              Proyectistas
            </Link>
          </li>
          <li>
            <Link href="/db/obras">
              Obras
            </Link>
          </li>
          <li>
            <Link href="/db/empresas">
              Empresas
            </Link>
          </li>
          <li>
            <Link href="/db/inspectores">
              Inspectores
            </Link>
          </li>
        </ul>
      </nav>
      <main className="p-4">
        {children}
      </main>
    </div>
  );
}

================
File: app/db/obras/page.tsx
================
"use client";

import { useEffect, useState } from "react";

interface Obra {
  IdObras: number;
  NombreObra: string | null;
  Norma_Legal: string | null;
  Monto_Contrato: number | null;
  IdEmpresa: number | null;
  IdInspectores: number | null;
  IdReparticion: number | null;
  IdAvance: number | null;
  Plazo: number | null;
  IdModalidad: number | null;
  IdLocalidad: number | null;
  IdAreas: number | null;
  Fecha_de_Contrato: Date | null;
  Fecha_de_Inicio: Date | null;
  Fecha_de_Finalización: Date | null;
  Memoria_Desc: string | null;
  Codigo_Meta: string | null;
  Departamento: number | null;
  Monto_Adicional_1: number | null;
  Plazo_Adicional1: number | null;
  Final_adicional1: Date | null;
  Monto_Adicional_2: number | null;
  Plazo_Adicional2: number | null;
  Final_adicional2: Date | null;
  Plazo_Adicional3: number | null;
  Final_adicional3: Date | null;
  IdProyectista: number | null;
  Norma1: string | null;
  Norma2: string | null;
  Norma3: string | null;
  Amp_Cont1: string | null;
  Amp_Cont2: string | null;
  Observaciones: string | null;
  Monto_Adicional_3: number | null;
  Amp_Cont3: string | null;
  Redet_monto_1: number | null;
  Redet_monto_2: number | null;
  Redet_monto_3: number | null;
  Redet_norma_1: string | null;
  Redet_norma_2: string | null;
  Redet_norma_3: string | null;
  Proyecto: number | null;
  AñoTerminada: number | null;
  Expte: string | null;
  pliego: number | null;
  basico: string | null;
  prioridad: number | null;
  fuenteO: number | null;
  Edificio: number | null;
  pptoof: number | null;
  '3p': number | null;
  Fechalicit: Date | null;
  ResponsableProy: string | null;
  Fechapliego: Date | null;
  Fechaelevado: Date | null;
  NormaARP: string | null;
  NormaARD: string | null;
  fechaARP: Date | null;
  fechaARD: Date | null;
  inaugurada: number | null;
  ainaugurar: number | null;
  fechainaugur: Date | null;
  noinaugur: number | null;
  observinaugur: string | null;
}

export default function ObrasPage() {
  const [obras, setObras] = useState<Obra[]>([]);

  useEffect(() => {
    // Call our local route
    fetch("/api/obras")
      .then((res) => res.json())
      .then((data) => {
        const formattedData = data.map((obra: Obra) => ({
          ...obra,
          Fecha_de_Contrato: obra.Fecha_de_Contrato ? new Date(obra.Fecha_de_Contrato) : null,
          Fecha_de_Inicio: obra.Fecha_de_Inicio ? new Date(obra.Fecha_de_Inicio) : null,
          Fecha_de_Finalización: obra.Fecha_de_Finalización ? new Date(obra.Fecha_de_Finalización) : null,
          Final_adicional1: obra.Final_adicional1 ? new Date(obra.Final_adicional1) : null,
          Final_adicional2: obra.Final_adicional2 ? new Date(obra.Final_adicional2) : null,
          Final_adicional3: obra.Final_adicional3 ? new Date(obra.Final_adicional3) : null,
          Fechalicit: obra.Fechalicit ? new Date(obra.Fechalicit) : null,
          Fechapliego: obra.Fechapliego ? new Date(obra.Fechapliego) : null,
          Fechaelevado: obra.Fechaelevado ? new Date(obra.Fechaelevado) : null,
          fechaARP: obra.fechaARP ? new Date(obra.fechaARP) : null,
          fechaARD: obra.fechaARD ? new Date(obra.fechaARD) : null,
          fechainaugur: obra.fechainaugur ? new Date(obra.fechainaugur) : null,
        }));
        setObras(formattedData);
      });
  }, []);

  console.log(obras);

  if (obras.length === 0) {
    return <div>Loading...</div>;
  }

  return (
    <div className="p-4">
      <h1 className="font-bold text-xl mb-4">Obras</h1>
      <table className="min-w-full border">
        <thead>
          <tr>
            <th className="border px-2 py-1">ID</th>
            <th className="border px-2 py-1">Nombre Obra</th>
            <th className="border px-2 py-1">Norma Legal</th>
            <th className="border px-2 py-1">Monto Contrato</th>
            <th className="border px-2 py-1">Fecha de Contrato</th>
            <th className="border px-2 py-1">Fecha de Inicio</th>
            <th className="border px-2 py-1">Fecha de Finalización</th>
          </tr>
        </thead>
        <tbody>
          {obras.map((obra) => (
            <tr key={obra.IdObras}>
              <td className="border px-2 py-1 text-center">{obra.IdObras}</td>
              <td className="border px-2 py-1">{obra.NombreObra}</td>
              <td className="border px-2 py-1">{obra.Norma_Legal}</td>
              <td className="border px-2 py-1">{obra.Monto_Contrato}</td>
              <td className="border px-2 py-1">{obra.Fecha_de_Contrato?.toLocaleDateString()}</td>
              <td className="border px-2 py-1">{obra.Fecha_de_Inicio?.toLocaleDateString()}</td>
              <td className="border px-2 py-1">{obra.Fecha_de_Finalización?.toLocaleDateString()}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: app/db/proyectistas/page.tsx
================
"use client";

import { useEffect, useState } from "react";

interface Proyectista {
  IdProyectista: number;
  Tratamiento: string | null;
  Apellido: string | null;
  Nombres: string | null;
  Campo1: string | null;
  Dirección: string | null;
  Teléfono: string | null;
  Inspector: number | null;
}

export default function ProyectistasPage() {
  const [proyectistas, setProyectistas] = useState<Proyectista[]>([]);

  useEffect(() => {
    // Call our local route
    fetch("/api/proyectistas")
      .then((res) => res.json())
      .then((data) => {
        setProyectistas(data);
      });
  }, []);

  console.log(proyectistas);

  if (proyectistas.length === 0) {
    return <div>Loading...</div>;
  }

  return (
    <div className="p-4">
      <h1 className="font-bold text-xl mb-4">Proyectistas</h1>
      <table className="min-w-full border">
        <thead>
          <tr>
            <th className="border px-2 py-1">ID</th>
            <th className="border px-2 py-1">Tratamiento</th>
            <th className="border px-2 py-1">Apellido</th>
            <th className="border px-2 py-1">Nombres</th>
            <th className="border px-2 py-1">Campo1</th>
            <th className="border px-2 py-1">Dirección</th>
            <th className="border px-2 py-1">Teléfono</th>
            <th className="border px-2 py-1">Inspector</th>
          </tr>
        </thead>
        <tbody>
          {proyectistas.map((proyectista) => (
            <tr key={proyectista.IdProyectista}>
              <td className="border px-2 py-1 text-center">{proyectista.IdProyectista}</td>
              <td className="border px-2 py-1">{proyectista.Tratamiento}</td>
              <td className="border px-2 py-1">{proyectista.Apellido}</td>
              <td className="border px-2 py-1">{proyectista.Nombres}</td>
              <td className="border px-2 py-1">{proyectista.Campo1}</td>
              <td className="border px-2 py-1">{proyectista.Dirección}</td>
              <td className="border px-2 py-1">{proyectista.Teléfono}</td>
              <td className="border px-2 py-1">{proyectista.Inspector}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: app/db/tagsWithElements/page.tsx
================
"use client";

import { useEffect, useState } from "react";

interface Element {
  id: number;
  name: string;
  unit: string;
  element_tags: {
    tags: {
      name: string;
    }
  }[];
  prices: {
    price: number;
    valid_from: string;
    valid_to: string | null;
  }[];
}

export default function ElementsPage() {
  const [elements, setElements] = useState<Element[]>([]);

  useEffect(() => {
    fetch("/api/tagsWithElements")
      .then((res) => res.json())
      .then(setElements);
  }, []);

  if (!elements.length) return <div>Loading...</div>;

  return (
    <div className="p-4">
      <h1 className="font-bold text-xl mb-4">Elements</h1>
      <table className="min-w-full border">
        <thead>
          <tr>
            <th className="border px-2 py-1">ID</th>
            <th className="border px-2 py-1">Name</th>
            <th className="border px-2 py-1">Unit</th>
            <th className="border px-2 py-1">Tags</th>
            <th className="border px-2 py-1">Current Price</th>
            <th className="border px-2 py-1">Valid From</th>
          </tr>
        </thead>
        <tbody>
          {elements.map((element) => (
            <tr key={element.id}>
              <td className="border px-2 py-1">{element.id}</td>
              <td className="border px-2 py-1">{element.name}</td>
              <td className="border px-2 py-1">{element.unit}</td>
              <td className="border px-2 py-1">
                {element.element_tags.map(et => et.tags.name).join(", ")}
              </td>
              <td className="border px-2 py-1">
                {element.prices[0]?.price}
              </td>
              <td className="border px-2 py-1">
                {new Date(element.prices[0]?.valid_from).toLocaleDateString()}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: app/globals.css
================
@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";
:root,
.light,
.light-theme {
	--violet-1: #fdfdff;
	--violet-2: #f7f8ff;
	--violet-3: #f0f1fe;
	--violet-4: #e4e8ff;
	--violet-5: #d8ddff;
	--violet-6: #c9ceff;
	--violet-7: #b4bbf7;
	--violet-8: #999fee;
	--violet-9: #6564db;
	--violet-10: #5a58c6;
	--violet-11: #5655c2;
	--violet-12: #292960;

	--violet-a1: #0000ff02;
	--violet-a2: #0020ff08;
	--violet-a3: #0011ee0f;
	--violet-a4: #0026ff1b;
	--violet-a5: #0021ff27;
	--violet-a6: #0018ff36;
	--violet-a7: #0118e44b;
	--violet-a8: #000fd566;
	--violet-a9: #0200c49b;
	--violet-a10: #0300a8a7;
	--violet-a11: #0200a4aa;
	--violet-a12: #000042d6;

	--violet-contrast: #fff;
	--violet-surface: #f5f6ffcc;
	--violet-indicator: #6564db;
	--violet-track: #6564db;
}
@supports (color: color(display-p3 1 1 1)) {
	@media (color-gamut: p3) {
		:root,
		.light,
		.light-theme {
			--violet-1: oklch(99.4% 0.0025 279.5);
			--violet-2: oklch(98.1% 0.0089 279.5);
			--violet-3: oklch(96.2% 0.0171 279.5);
			--violet-4: oklch(93.5% 0.0346 279.5);
			--violet-5: oklch(90.4% 0.0514 279.5);
			--violet-6: oklch(86.5% 0.0677 279.5);
			--violet-7: oklch(80.8% 0.0858 279.5);
			--violet-8: oklch(72.9% 0.1144 279.5);
			--violet-9: oklch(56.7% 0.1772 279.5);
			--violet-10: oklch(52.2% 0.1659 279.5);
			--violet-11: oklch(51% 0.1659 279.5);
			--violet-12: oklch(31.4% 0.0954 279.5);

			--violet-a1: color(display-p3 0.0196 0.0196 1 / 0.008);
			--violet-a2: color(display-p3 0.0196 0.1451 0.8784 / 0.032);
			--violet-a3: color(display-p3 0.0039 0.0706 0.8706 / 0.059);
			--violet-a4: color(display-p3 0.0039 0.1176 0.9255 / 0.102);
			--violet-a5: color(display-p3 0.0078 0.1137 0.9216 / 0.15);
			--violet-a6: color(display-p3 0.0039 0.0784 0.9255 / 0.208);
			--violet-a7: color(display-p3 0.0039 0.0863 0.8275 / 0.291);
			--violet-a8: color(display-p3 0.0039 0.051 0.7725 / 0.397);
			--violet-a9: color(display-p3 0.0078 0 0.7255 / 0.608);
			--violet-a10: color(display-p3 0.0118 0 0.6196 / 0.655);
			--violet-a11: color(display-p3 0.0078 0 0.6 / 0.667);
			--violet-a12: color(display-p3 0 0 0.2431 / 0.84);

			--violet-contrast: #fff;
			--violet-surface: color(display-p3 0.9608 0.9647 0.9961 / 0.8);
			--violet-indicator: oklch(56.7% 0.1772 279.5);
			--violet-track: oklch(56.7% 0.1772 279.5);
		}
	}
}

@layer base {
	:root {
		font-family: system-ui, "Open Sans", "Helvetica Neue", sans-serif;
		/* hsl(210deg 13.95% 83.14%) el mas oscuro */
		/* #f6f8fa no tan oscuro */
		/* #fafafa mas clarito */

		/* text secondary 7c7f90 mas clarito */
		/* text mas oscuro sin ser negro hsl(210deg 8.75% 31.37%) */

		--text-secondary-coso: hsl(231, 8%, 53%);

		--purple-900: 255 92% 35%; /* Deep purple */
		--purple-800: 255 92% 45%; /* Rich purple */
		--purple-700: 255 92% 55%; /* Strong purple */
		--purple-600: 255 92% 65%; /* Vibrant purple */
		--purple-500: 255 92% 76%; /* Given vibrant purple */
		--purple-400: 253 94% 84%; /* Lighter purple */
		--purple-300: 252 95% 88%; /* Light purple */
		--purple-200: 251 95% 92%; /* Very light purple */
		--purple-100: 250 95% 96%; /* Nearly white purple */

		--navy-900: 210 11% 18%;
		--navy-800: 210 10% 21%;
		--navy-700: 210 37% 25%;
		--navy-600: 210 36% 33%;
		--navy-500: 210 36% 41%;
		--navy-400: 210 26% 53%;
		--navy-300: 210 26% 65%;
		--navy-200: 210 26% 77%;
		--navy-100: 210 27% 97%;

		--blue-900: 200 76.52% 12%;
		--blue-800: 200 76.52% 23%;
		--blue-700: 200 76.52% 35%;
		--blue-600: 200 76.52% 46%;
		--blue-500: 200.95deg 76.52% 51.57%;
		--blue-400: 200 87% 66%;
		--blue-300: 200 88% 75%;
		--blue-200: 200 86% 83%;
		--blue-100: 200 86% 92%;

		--cyan-900: 166 99% 25%; /* Deep cyan */
		--cyan-800: 166 99% 35%; /* Dark cyan */
		--cyan-700: 166 99% 45%; /* Strong cyan */
		--cyan-600: 165 99% 55%; /* Vibrant cyan */
		--cyan-500: 165 99% 65%; /* Given vibrant cyan */
		--cyan-400: 164 100% 75%; /* Lighter cyan */
		--cyan-300: 164 100% 80%; /* Light cyan */
		--cyan-200: 163 100% 85%; /* Very light cyan */
		--cyan-100: 163 100% 90%; /* Nearly white cyan */

		--teal-900: 183 100% 7%;
		--teal-800: 184 97% 14%;
		--teal-700: 184 98% 22%;
		--teal-600: 185 97% 29%;
		--teal-500: 184 98% 36%;
		--teal-400: 185 57% 49%;
		--teal-300: 184 55% 62%;
		--teal-200: 184 54% 74%;
		--teal-100: 183 55% 87%;

		--green-900: 171 89% 7%;
		--green-800: 171 89% 15%;
		--green-700: 172 89% 22%;
		--green-600: 172 89% 30%;
		--green-500: 172 89% 37%;
		--green-400: 172 53% 50%;
		--green-300: 172 52% 62%;
		--green-200: 171 53% 75%;
		--green-100: 172 52% 81%;

		--pink-900: 11 55% 12%;
		--pink-800: 336 36% 28%;
		--pink-700: 336 37% 42%;
		--pink-600: 336 48% 56%;
		--pink-500: 336 88% 71%;
		--pink-400: 336 88% 76%;
		--pink-300: 336 89% 82%;
		--pink-200: 336 87% 88%;
		--pink-100: 337 87% 94%;

		--red-900: 11 55% 12%;
		--red-800: 10 54% 25%;
		--red-700: 11 54% 37%;
		--red-600: 10 54% 49%;
		--red-500: 10 85% 61%;
		--red-400: 10 85% 69%;
		--red-300: 11 85% 77%;
		--red-200: 10 85% 85%;
		--red-100: 11 85% 92%;

		--orange-900: 30 60% 12%;
		--orange-800: 30 60% 24%;
		--orange-700: 30 61% 35%;
		--orange-600: 30 61% 47%;
		--orange-500: 30 87% 59%;
		--orange-400: 30 87% 67%;
		--orange-300: 30 87% 75%;
		--orange-200: 30 86% 84%;
		--orange-100: 30 86% 92%;

		--yellow-900: 39 53% 13%;
		--yellow-800: 38 53% 25%;
		--yellow-700: 38 53% 38%;
		--yellow-600: 38 55% 51%;
		--yellow-500: 38 91% 63%;
		--yellow-400: 38 92% 71%;
		--yellow-300: 38 91% 78%;
		--yellow-200: 38 92% 85%;
		--yellow-100: 38 93% 89%;

		--grey-900: 220 4% 14%;
		--grey-800: 214 5% 28%;
		--grey-700: 207 4% 43%;
		--grey-600: 208 6% 57%;
		--grey-500: 210 11% 71%;
		--grey-400: 208 11% 77%;
		--grey-300: 207 10% 83%;
		--grey-200: 214 12% 88%;
		--grey-100: 220 10% 94%;

		--shade-900: 0 0% 0%;
		--shade-800: 0 0% 10%;
		--shade-700: 0 0% 30%;
		--shade-600: 0 0% 40%;
		--shade-500: 0 0% 50%;
		--shade-400: 0 0% 60%;
		--shade-300: 0 0% 70%;
		--shade-200: 0 0% 80%;
		--shade-150: 0 0% 90%;
		--shade-100: 0 0% 100%;

		--background: var(--shade-100);
		--background-dim: var(--navy-100);
		--foreground: 0 0% 20%;
		--foreground-dim: 213 6% 35%;
		--foreground-muted: var(--shade-150);
		--foreground-secondary: 228 3% 64%;

		--muted: 210 40% 96.1%;
		--muted-foreground: 215.4 16.3% 46.9%;

		--popover: var(--shade-100);
		--popover-foreground: 222.2 84% 4.9%;

		--card: var(--shade-100);
		--card-foreground: 222.2 84% 4.9%;

		--border: 214.3 31.8% 91.4%;
		--input: 214.3 31.8% 80.4%;

		--primary: var(--navy-500);
		--primary-foreground: var(--shade-800);

		--secondary: 210 40% 96.1%;
		--secondary-foreground: 231 8% 53%;

		--accent: 210 40% 96.1%;
		--accent-foreground: 222.2 47.4% 11.2%;

		--destructive: 0 84.2% 60.2%;
		--destructive-foreground: var(--red-900);

		--ring: 215 20.2% 65.1%;

		--radius: 0.5rem;

		/* --------------------------------------------------------------------
   * 2) Semantic color tokens: brand, accent, destructive, success, alert,
   *    and input. Each with background, foreground, border, secondary.
   *
   * You can hardcode them (e.g., brand uses purple), or reference from
   * your base “stock” colors above.
   * -------------------------------------------------------------------- */

		/* Brand */
		--brand: var(--purple-600); /* main brand color */
		--brand-background: var(--purple-100);
		--brand-foreground: var(--purple-900);
		--brand-border: var(--purple-400);
		--brand-secondary: var(--purple-300);

		/* Accent */
		--accent: var(--red-500);
		--accent-background: var(--red-100);
		--accent-foreground: var(--red-900);
		--accent-border: var(--red-400);
		--accent-secondary: var(--red-300);

		/* Destructive */
		--destructive: var(--red-400);
		--destructive-background: var(--red-100);
		--destructive-foreground: var(--red-900);
		--destructive-border: var(--red-600);
		--destructive-secondary: var(--red-200);

		/* Success */
		--success: var(--green-400);
		--success-background: var(--green-100);
		--success-foreground: var(--green-900);
		--success-border: var(--green-600);
		--success-secondary: var(--green-200);

		/* Alert (often called "warning") */
		--alert: var(--yellow-400);
		--alert-background: var(--yellow-100);
		--alert-foreground: var(--yellow-900);
		--alert-border: var(--yellow-600);
		--alert-secondary: var(--yellow-200);

		/* input */
		--input: var(--blue-500);
		--input-background: white;
		--input-foreground: var(--shade-900);
		--input-border: var(--shade-800);
		--input-secondary: var(--shade-150);

		/* accent */
		--accent: var(--shade-200);
		--accent-background: var(--shade-100);
		--accent-foreground: var(--shade-800);
		--accent-border: var(--shade-800);

		/* Example for your general backgrounds & text */
		--background: var(--shade-100);
		--foreground: var(--shade-900);
		--border: 0 0% 90%;

		--black: 203 13% 12%;
	}

	html[data-layout-mode="dark"] {
		--background: var(--navy-900);
		--background-dim: var(--navy-800);
		--foreground: var(--shade-200);
		--foreground-dim: var(--shade-700);

		--muted: 217.2 32.6% 17.5%;
		--muted-foreground: 215 20.2% 65.1%;

		--popover: 222.2 84% 4.9%;
		--popover-foreground: 210 40% 98%;

		--card: 222.2 84% 4.9%;
		--card-foreground: 210 40% 98%;

		--border: var(--shade-700) / 0.5;
		--input: 217.2 32.6% 17.5%;

		--primary: 210 40% 98%;
		--primary-foreground: var(--shade-100);

		--secondary: 217.2 32.6% 17.5%;
		--secondary-foreground: 210 40% 98%;

		--accent: var(--shade-200) / 0.1;
		--accent-foreground: 210 40% 98%;

		--destructive: 0 62.8% 30.6%;
		--destructive-foreground: 0 85.7% 97.3%;

		--ring: 217.2 32.6% 17.5%;

		--brand: 226, 36%, 41%;
		--brand-foreground: 225, 27%, 88%;
		--brand-text: var(--shade-200);

		--input: 219, 87%, 58%;
		--input-foreground: 219, 86%, 92%;

		--warning: 38, 91%, 63%;
		--warning-foreground: 38, 93%, 89%;

		--success: 172, 89%, 37%;
		--success-foreground: 172, 52%, 81%;

		--border-brand: var(--shade-100);
		--border-brand-foreground: var(--shade-900);
		--accent-brand-secondary: var(--shade-500);
		--accent-brand-secondary-foreground: var(--shade-900);
		--secondary-brand: var(--navy-700);
		/* --accent-brand-foreground: var(--navy-800);
      --accent-secondary-brand: 20 100% 50%;
      --accent-secondary-brand-foreground: var(--navy-800);
      --secondary-brand-foreground: var(--navy-800); */

		--border-input: var(--shade-100);
		--border-input-foreground: var(--shade-900);
		--accent-input-secondary: var(--shade-500);
		--accent-input-secondary-foreground: var(--shade-900);

		--border-warning: var(--shade-100);
		--border-warning-foreground: var(--shade-900);
		--accent-warning-secondary: var(--shade-500);
		--accent-warning-secondary-foreground: var(--shade-900);

		--border-success: var(--shade-100);
		--border-success-foreground: var(--shade-900);
		--accent-success-secondary: var(--shade-500);
		--accent-success-secondary-foreground: var(--shade-900);

		--border-destructive: var(--shade-100);
		--border-destructive-foreground: var(--shade-900);
		--accent-destructive-secondary: var(--shade-500);
		--accent-destructive-secondary-foreground: var(--shade-900);

		--dark: var(--shade-100);
		--dark-muted: var(--shade-200);
		--light-custom: var(--shade-900);
		--dark-foreground: var(--shade-500);
		--secondary-dark: 0 0% 15%;
		--secondary-dark-foreground: var(--shade-500);
		--accentDark: var(--shade-800);
		--accentDark-foreground: var(--shade-500);
	}
}

@layer utilities {
	.border-border {
		/* your custom styles */
	}
	.bg-background {
		/* your custom styles */
	}
	.text-foreground {
		/* your custom styles */
	}
}

@layer base {
	* {
		@apply border-border;
	}
	body {
		@apply bg-background text-foreground;
	}
	blockquote,
	dl,
	dd,
	h1,
	h2,
	h3,
	h4,
	h5,
	h6,
	hr,
	figure,
	p,
	pre {
		margin: 0;
	}
	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		font-size: inherit;
		font-weight: inherit;
	}
	*,
	::before,
	::after {
		box-sizing: border-box;
		border-width: 0;
		border-style: solid;
		border-color: theme("borderColor.DEFAULT", currentColor);
	}
}
.sqd-editor .form-control {
	-webkit-appearance: auto !important;
	-moz-appearance: auto !important;
	appearance: auto !important;
}
@layer base {
	:root {
		--background: 0 0% 100%;
		--foreground: 240 10% 3.9%;
		--card: 0 0% 100%;
		--card-foreground: 240 10% 3.9%;
		--popover: 0 0% 100%;
		--popover-foreground: 240 10% 3.9%;
		--primary: 240 5.9% 10%;
		--primary-foreground: 0 0% 98%;
		--secondary: 240 4.8% 95.9%;
		--secondary-foreground: 240 5.9% 10%;
		--muted: 240 4.8% 95.9%;
		--muted-foreground: 240 3.8% 46.1%;
		--accent: 240 4.8% 95.9%;
		--accent-foreground: 240 5.9% 10%;
		--destructive: 0 84.2% 60.2%;
		--destructive-foreground: 0 0% 100%;
		--border: 240 5.9% 90%;
		--input: 240 4.9% 83.9%;
		--ring: 240 5% 64.9%;
		--radius: 0.5rem;
	}
	.dark {
		--background: 240 10% 3.9%;
		--foreground: 0 0% 98%;
		--card: 240 10% 3.9%;
		--card-foreground: 0 0% 98%;
		--popover: 240 10% 3.9%;
		--popover-foreground: 0 0% 98%;
		--primary: 0 0% 98%;
		--primary-foreground: 240 5.9% 10%;
		--secondary: 240 3.7% 15.9%;
		--secondary-foreground: 0 0% 98%;
		--muted: 240 5.9% 10%;
		--muted-foreground: 240 4.4% 58%;
		--accent: 240 5.9% 10%;
		--accent-foreground: 0 0% 98%;
		--destructive: 0 84.2% 60.2%;
		--destructive-foreground: 0 0% 100%;
		--border: 240 3.7% 15.9%;
		--input: 240 3.7% 15.9%;
		--ring: 240 3.8% 46.1%;
	}
}

:root {
	--ease-in-quad: cubic-bezier(0.55, 0.085, 0.68, 0.53);
	--ease-in-cubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);
	--ease-in-quart: cubic-bezier(0.895, 0.03, 0.685, 0.22);
	--ease-in-quint: cubic-bezier(0.755, 0.05, 0.855, 0.06);
	--ease-in-expo: cubic-bezier(0.95, 0.05, 0.795, 0.035);
	--ease-in-circ: cubic-bezier(0.6, 0.04, 0.98, 0.335);

	--ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
	--ease-out-cubic: cubic-bezier(0.215, 0.61, 0.355, 1);
	--ease-out-quart: cubic-bezier(0.165, 0.84, 0.44, 1);
	--ease-out-quint: cubic-bezier(0.23, 1, 0.32, 1);
	--ease-out-expo: cubic-bezier(0.19, 1, 0.22, 1);
	--ease-out-circ: cubic-bezier(0.075, 0.82, 0.165, 1);

	--ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955);
	--ease-in-out-cubic: cubic-bezier(0.645, 0.045, 0.355, 1);
	--ease-in-out-quart: cubic-bezier(0.77, 0, 0.175, 1);
	--ease-in-out-quint: cubic-bezier(0.86, 0, 0.07, 1);
	--ease-in-out-expo: cubic-bezier(1, 0, 0, 1);
	--ease-in-out-circ: cubic-bezier(0.785, 0.135, 0.15, 0.86);
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { SidebarInset, SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/app-sidebar";
import { Separator } from "@radix-ui/react-dropdown-menu";
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from "@/components/ui/breadcrumb";
import { Bot, BrainCogIcon, Coins, DatabaseZapIcon, FilePlus, FlaskConicalIcon, FolderSearch2, HardHatIcon, House, LayoutTemplateIcon } from "lucide-react";
import ReactScanWrapper from "./reactScanWrapper";
import { Toaster } from "@/components/ui/toaster";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Modify the transform function to store icon keys
// const transformDirectoryToNav = (
//   structure: Record<string, any>,
//   basePath: string = ""
// ): any[] => {
//   const result: any[] = [];

//   const findIconKey = (key: string) => {
//     switch (key.toLowerCase()) {
//       case "create":
//         return "FilePlus";
//       case "main":
//         return "House";
//       case "explore":
//         return "FolderSearch2";
//       case "api":
//         return "BrainCogIcon";
//       case "dashboard":
//         return "LayoutTemplateIcon";
//       case "db":
//         return "DatabaseZapIcon";
//       case "obras":
//         return "HardHatIcon";
//       case "presupuesto":
//         return "Coins";
//       case "uitest":
//         return "FlaskConicalIcon";
//       default:
//         return "Bot"; // Default icon key
//     }
//   };

//   for (const key in structure) {
//     if (key === "files") continue;

//     const folder = structure[key];
//     const files = folder.files || [];
//     const hasPageFile = files.includes("page.tsx");
//     const subfolders = Object.keys(folder).filter(k => k !== "files");

//     if (hasPageFile) {
//       const iconKey = findIconKey(key);

//       const items = transformDirectoryToNav(folder, `${basePath}/${key}`);
//       result.push({
//         title: capitalizeFirstLetter(key),
//         url: `${basePath}/${key}`.replace(/\/+/g, "/"),
//         iconKey: iconKey, // Store icon key
//         items: [
//           {
//             title: "Main",
//             url: `${basePath}/${key}`.replace(/\/+/g, "/"),
//             iconKey: "House", // Use the Main icon key for the "Main" page
//           },
//           ...items
//         ]
//       });
//     } else if (typeof folder === "object") {
//       const iconKey = findIconKey(key);

//       result.push({
//         title: capitalizeFirstLetter(key),
//         url: `${basePath}/${key}`.replace(/\/+/g, "/"),
//         iconKey: iconKey, // Store icon key
//         items: transformDirectoryToNav(folder, `${basePath}/${key}`)
//       });
//     }
//   }

//   return result;
// }

// // Map icon keys back to components
// const iconMap = {
//   FilePlus,
//   House,
//   FolderSearch2,
//   BrainCogIcon,
//   LayoutTemplateIcon,
//   DatabaseZapIcon,
//   HardHatIcon,
//   Coins,
//   FlaskConicalIcon,
//   Bot
// };
// // Function to map icon keys back to components
// const mapIconsToComponents = (navItems: { iconKey: keyof typeof iconMap; items: { iconKey: keyof typeof iconMap }[] }[]) => {
//   return navItems.map(item => ({
//     ...item,
//     icon: iconMap[item.iconKey],
//     items: item.items.map(subItem => ({
//       ...subItem,
//       icon: iconMap[subItem.iconKey]
//     }))
//   }));
// };

const capitalizeFirstLetter = (string: string) => {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // const res = await fetch("http://localhost:3000/api/getDirectory", {
  //   cache: "no-store",
  // });

  // const data = await res.json();

  // const transformed = transformDirectoryToNav(data);

  // console.log('transformed', transformed)

  const mapped = [
    // {
    //   "title": "Api",
    //   "url": "/api",
    //   "iconKey": "BrainCogIcon",
    //   "items": [
    //     {
    //       "title": "Certificaciones",
    //       "url": "/api/certificaciones",
    //       "iconKey": "Bot",
    //       "items": []
    //     },
    //     {
    //       "title": "Certificados",
    //       "url": "/api/certificados",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "[id]",
    //           "url": "/api/certificados/[id]",
    //           "iconKey": "Bot",
    //           "items": []
    //         }
    //       ]
    //     },
    //     {
    //       "title": "ConstructionElements",
    //       "url": "/api/constructionElements",
    //       "iconKey": "Bot",
    //       "items": []
    //     },
    //     {
    //       "title": "ElementCategory",
    //       "url": "/api/elementCategory",
    //       "iconKey": "Bot",
    //       "items": []
    //     },
    //     {
    //       "title": "Empresas",
    //       "url": "/api/empresas",
    //       "iconKey": "Bot",
    //       "items": []
    //     },
    //     {
    //       "title": "GetDirectory",
    //       "url": "/api/getDirectory",
    //       "iconKey": "Bot",
    //       "items": []
    //     },
    //     {
    //       "title": "Inspectores",
    //       "url": "/api/inspectores",
    //       "iconKey": "Bot",
    //       "items": []
    //     },
    //     {
    //       "title": "Obras",
    //       "url": "/api/obras",
    //       "iconKey": "HardHatIcon",
    //       "items": [
    //         {
    //           "title": "[id]",
    //           "url": "/api/obras/781",
    //           "iconKey": "Bot",
    //           "items": [
    //             {
    //               "title": "Presupuestos",
    //               "url": "/api/obras/[id]/presupuestos",
    //               "iconKey": "Bot",
    //               "items": []
    //             }
    //           ]
    //         },
    //         {
    //           "title": "[obraId]",
    //           "url": "/api/obras/[obraId]",
    //           "iconKey": "Bot",
    //           "items": []
    //         }
    //       ]
    //     },
    //     {
    //       "title": "Presupuestos",
    //       "url": "/api/presupuestos",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "TableData",
    //           "url": "/api/presupuestos/tableData",
    //           "iconKey": "Bot",
    //           "items": []
    //         },
    //         {
    //           "title": "[id]",
    //           "url": "/api/presupuestos/[id]",
    //           "iconKey": "Bot",
    //           "items": []
    //         }
    //       ]
    //     },
    //     {
    //       "title": "Proyectistas",
    //       "url": "/api/proyectistas",
    //       "iconKey": "Bot",
    //       "items": []
    //     },
    //     {
    //       "title": "TagsWithElements",
    //       "url": "/api/tagsWithElements",
    //       "iconKey": "Bot",
    //       "items": []
    //     }
    //   ]
    // },
    // {
    //   "title": "Certificados",
    //   "url": "/certificados",
    //   "iconKey": "Bot",
    //   "items": [
    //     {
    //       "title": "Main",
    //       "url": "/certificados",
    //       "iconKey": "House"
    //     },
    //     {
    //       "title": "New",
    //       "url": "/certificados/new",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "Main",
    //           "url": "/certificados/new",
    //           "iconKey": "House"
    //         }
    //       ]
    //     },
    //     {
    //       "title": "[id]",
    //       "url": "/certificados/[id]",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "Main",
    //           "url": "/certificados/[id]",
    //           "iconKey": "House"
    //         }
    //       ]
    //     }
    //   ]
    // },
    {
      "title": "Dashboard",
      "url": "/dashboard",
      "iconKey": "LayoutTemplateIcon",
      "items": [
        {
          "title": "Main",
          "url": "/",
          "iconKey": "House"
        }
      ]
    },
    // {
    //   "title": "Db",
    //   "url": "/db",
    //   "iconKey": "DatabaseZapIcon",
    //   "items": [
    //     {
    //       "title": "Certificaciones",
    //       "url": "/db/certificaciones",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "Main",
    //           "url": "/db/certificaciones",
    //           "iconKey": "House"
    //         }
    //       ]
    //     },
    //     {
    //       "title": "ConstructionElements",
    //       "url": "/db/constructionElements",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "Main",
    //           "url": "/db/constructionElements",
    //           "iconKey": "House"
    //         }
    //       ]
    //     },
    //     {
    //       "title": "Empresas",
    //       "url": "/db/empresas",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "Main",
    //           "url": "/db/empresas",
    //           "iconKey": "House"
    //         }
    //       ]
    //     },
    //     {
    //       "title": "Inspectores",
    //       "url": "/db/inspectores",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "Main",
    //           "url": "/db/inspectores",
    //           "iconKey": "House"
    //         }
    //       ]
    //     },
    //     {
    //       "title": "Obras",
    //       "url": "/db/obras",
    //       "iconKey": "HardHatIcon",
    //       "items": [
    //         {
    //           "title": "Main",
    //           "url": "/db/obras",
    //           "iconKey": "House"
    //         }
    //       ]
    //     },
    //     {
    //       "title": "Proyectistas",
    //       "url": "/db/proyectistas",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "Main",
    //           "url": "/db/proyectistas",
    //           "iconKey": "House"
    //         }
    //       ]
    //     },
    //     {
    //       "title": "TagsWithElements",
    //       "url": "/db/tagsWithElements",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "Main",
    //           "url": "/db/tagsWithElements",
    //           "iconKey": "House"
    //         }
    //       ]
    //     }
    //   ]
    // },
    {
      "title": "Obras",
      "url": "/obras",
      "iconKey": "HardHatIcon",
      "items": [
        {
          "title": "Main",
          "url": "/obras",
          "iconKey": "House"
        },
        {
          "title": "Create",
          "url": "/obras/create",
          "iconKey": "FilePlus",
          "items": [
            {
              "title": "Main",
              "url": "/obras/create",
              "iconKey": "House"
            }
          ]
        },
        {
          "title": "[id]",
          "url": "/obras/781",
          "iconKey": "Bot",
          "items": [
            {
              "title": "Main",
              "url": "/obras/[id]",
              "iconKey": "House"
            }
          ]
        }
      ]
    },
    {
      "title": "Presupuesto",
      "url": "/presupuesto",
      "iconKey": "Coins",
      "items": [
        {
          "title": "Main",
          "url": "/presupuesto",
          "iconKey": "House"
        },
        {
          "title": "All",
          "url": "/presupuesto/all",
          "iconKey": "Bot",
          "items": [
            {
              "title": "Main",
              "url": "/presupuesto/all",
              "iconKey": "House"
            }
          ]
        },
        {
          "title": "Components",
          "url": "/presupuesto/components",
          "iconKey": "Bot",
          "items": []
        },
        {
          "title": "[id]",
          "url": "/presupuesto/[id]",
          "iconKey": "Bot",
          "items": [
            {
              "title": "Main",
              "url": "/presupuesto/[id]",
              "iconKey": "House"
            }
          ]
        }
      ]
    },
    // {
    //   "title": "Uitest",
    //   "url": "/uitest",
    //   "iconKey": "FlaskConicalIcon",
    //   "items": [
    //     {
    //       "title": "Main",
    //       "url": "/uitest",
    //       "iconKey": "House"
    //     },
    //     {
    //       "title": "Button",
    //       "url": "/uitest/button",
    //       "iconKey": "Bot",
    //       "items": [
    //         {
    //           "title": "Main",
    //           "url": "/uitest/button",
    //           "iconKey": "House"
    //         }
    //       ]
    //     }
    //   ]
    // }
  ]

  return (
    <html lang="en">
      <head>
        {/* rest of your scripts go under */}
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ReactScanWrapper>
          <SidebarProvider>
            <AppSidebar mappedData={mapped as any} />
            <SidebarInset>
              <header className="flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12">
                <div className="flex items-center gap-2 px-4">
                  <SidebarTrigger className="-ml-1" />
                  <Separator className="mr-2 h-4" />
                  <Breadcrumb>
                    <BreadcrumbList>
                      <BreadcrumbItem className="hidden md:block">
                        <BreadcrumbLink href="#">
                          Building Your Application
                        </BreadcrumbLink>
                      </BreadcrumbItem>
                      <BreadcrumbSeparator className="hidden md:block" />
                      <BreadcrumbItem>
                        <BreadcrumbPage>Data Fetching</BreadcrumbPage>
                      </BreadcrumbItem>
                    </BreadcrumbList>
                  </Breadcrumb>
                </div>
              </header>

              {children}
            </SidebarInset>
          </SidebarProvider>
        </ReactScanWrapper>
        <Toaster />
      </body>
    </html>
  );
}

================
File: app/obras/[id]/page.tsx
================
'use client';

import { usePathname } from 'next/navigation';
import { useEffect, useState } from 'react';
import TabsComponent from './TabsComponent';

function ObraPage() {
  const pathname = usePathname();
  const id = pathname.split('/').pop(); // Extract the ID from the pathname
  const [obra, setObra] = useState(null);

  useEffect(() => {
    if (id) {
      // Fetch the obra data
      fetch(`/api/obras/${id}`)
        .then((response) => response.json())
        .then((data) => setObra(data))
        .catch((error) => console.error('Error fetching obra:', error));
    }
  }, [id]);

  if (!obra) {
    return <div>Loading...</div>;
  }

  console.log(obra);

  return (
    <div className="flex flex-col bg-muted/70 h-full gap-16 px-11 py-5">
      <TabsComponent
        obra={obra} />
    </div>
  );
}

export default ObraPage;

================
File: app/obras/[id]/PresupuestosContent.tsx
================
import { TabsContent } from '@/components/ui/tabs';
import { motion } from "framer-motion";
import ExampleDocument from '@/components/testDocument/page';
import { cn } from '@/lib/utils';
import { useEffect, useState } from 'react';

interface Presupuesto {
  id: number;
  obraId: number;
  data: any;
  createdAt: string;
  updatedAt: string;
  certificados?: { name: string }[];
}

function PresupuestosContent({ obraId }: { obraId: string }) {
  const [selectedPresupuesto, setSelectedPresupuesto] = useState<Presupuesto | null>(null);
  const [presupuestos, setPresupuestos] = useState<Presupuesto[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const fetchPresupuestos = async () => {
      if (!obraId) return;

      setIsLoading(true);
      setError(null);

      try {
        console.log('Fetching presupuestos for obra:', obraId);
        const response = await fetch(`/api/obras/${obraId}/presupuestos`);

        console.log('Response:', response);

        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          throw new Error(errorData.error || `Error ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log("Presupuestos loaded:", data);

        if (!Array.isArray(data)) {
          throw new Error('Invalid response format');
        }

        setPresupuestos(data);

        // If there are presupuestos and none is selected, select the first one
        if (data.length > 0 && !selectedPresupuesto) {
          setSelectedPresupuesto(data[0]);
        }
      } catch (error) {
        console.error('Error fetching presupuestos:', error);
        setError(error instanceof Error ? error.message : 'Error desconocido');
      } finally {
        setIsLoading(false);
      }
    };

    fetchPresupuestos();
  }, [obraId]); // Remove selectedPresupuesto from dependencies to avoid infinite loop

  if (isLoading) {
    return (
      <TabsContent value="tab-2" className="h-full mt-16">
        <div className="flex flex-col items-center justify-center h-full gap-6">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900" />
          <p className="text-gray-500">Cargando presupuestos...</p>
        </div>
      </TabsContent>
    );
  }

  if (error) {
    return (
      <TabsContent value="tab-2" className="h-full mt-16">
        <div className="flex flex-col items-center justify-center h-full gap-6">
          <p className="text-red-500">Error: {error}</p>
        </div>
      </TabsContent>
    );
  }

  return (
    <TabsContent value="tab-2" className="h-full mt-16">
      {presupuestos.length === 0 ? (
        <div className="flex flex-col items-center justify-center h-full gap-6">
          <p className="text-gray-500">No hay presupuestos disponibles.</p>
        </div>
      ) : (
        <div className="flex gap-4 h-full items-start">
          <div className="flex flex-col gap-5">
            {presupuestos.map((presupuesto) => (
              <div
                key={presupuesto.id}
                onClick={() => setSelectedPresupuesto(presupuesto)}
                className={cn(
                  'flex flex-col justify-center items-start p-4 w-[15vw] max-w-[15vw] h-20 rounded-lg relative z-20 cursor-pointer'
                )}
              >
                <h2 className="font-semibold text-xl">Presupuesto #{presupuesto.id}</h2>
                <p className="text-sm text-muted-foreground">
                  {new Date(presupuesto.createdAt).toLocaleDateString('es-AR', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </p>
                <motion.span
                  className={cn(
                    '-z-10 w-full h-[80px] absolute',
                    selectedPresupuesto?.id === presupuesto.id
                      ? 'shadow-[-20px_4px_6px_-1px_#0000001a]'
                      : ''
                  )}
                  animate={{
                    width: selectedPresupuesto?.id === presupuesto.id ? 310 : 275,
                  }}
                  exit={{ width: 275 }}
                />
                <motion.span
                  className={cn(
                    'flex flex-col justify-center items-start p-4 w-[15vw] h-20 rounded-lg absolute left-0 -z-10 cursor-pointer transition-colors',
                    selectedPresupuesto?.id === presupuesto.id
                      ? 'bg-white'
                      : 'bg-gray-200'
                  )}
                  animate={{
                    width: selectedPresupuesto?.id === presupuesto.id ? 310 : 275,
                  }}
                  exit={{ width: 275 }}
                />
              </div>
            ))}
          </div>

          <div className="bg-white rounded-lg w-full h-full flex justify-end items-start relative shadow-md">
            <div className="absolute left-[10%] -top-10">
              <ExampleDocument defaultData={selectedPresupuesto?.data || null} />
            </div>
            <div className="flex flex-col gap-6 w-32 bg-gray-200 rounded-r-lg h-full justify-start items-center p-4">
              {selectedPresupuesto?.certificados?.map((certificado, index) => (
                <div
                  key={index}
                  className="flex h-36 w-24 rounded-sm bg-white shadow-sm"
                >
                  <p>{certificado.name}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
    </TabsContent>
  );
}

export default PresupuestosContent;

================
File: app/obras/[id]/TabsComponent.tsx
================
// app/obras/[id]/TabsComponent.tsx
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { House, PanelsTopLeft, Box } from 'lucide-react';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import PresupuestosContent from './PresupuestosContent';
import { formatCurrency } from '@/lib/utils/format';
import { MedicionHistory } from '@/components/medicion/MedicionHistory';
import { useEffect, useState } from 'react';
import { useMedicion } from '@/lib/hooks/useMedicion';
import { MedicionData } from '@/lib/types/presupuesto';

interface Obra {
  NombreObra: string;
  Observaciones: string;
  IdObras: string;
  Monto_Contrato?: number;
  Plazo?: number;
  Fecha_de_Contrato?: Date;
  Fecha_de_Inicio?: Date;
  presupuestos?: { id: number }[];
}

function TabsComponent({
  obra,
}: {
  obra: Obra
}) {
  const [mediciones, setMediciones] = useState<MedicionData[]>([]);
  const { getMediciones } = useMedicion({
    presupuestoId: obra.presupuestos?.[0]?.id || 0
  });

  useEffect(() => {
    if (obra.presupuestos?.[0]?.id) {
      const loadMediciones = async () => {
        try {
          const data = await getMediciones();
          setMediciones(data);
        } catch (err) {
          console.error("Error loading mediciones:", err);
        }
      };
      loadMediciones();
    }
  }, [getMediciones, obra.presupuestos]);

  // Calculate progress based on dates
  const calculateProgress = () => {
    if (!obra.Fecha_de_Inicio || !obra.Plazo) return 0;

    const startDate = new Date(obra.Fecha_de_Inicio);
    const endDate = new Date(startDate);
    endDate.setDate(endDate.getDate() + (obra.Plazo * 30)); // Assuming Plazo is in months

    const today = new Date();
    const totalDays = endDate.getTime() - startDate.getTime();
    const daysElapsed = today.getTime() - startDate.getTime();

    const progress = (daysElapsed / totalDays) * 100;
    return Math.min(Math.max(progress, 0), 100);
  };

  const progress = calculateProgress();
  const formattedStartDate = obra.Fecha_de_Inicio
    ? new Date(obra.Fecha_de_Inicio).toLocaleDateString()
    : 'Pending';
  const formattedEndDate = obra.Fecha_de_Inicio && obra.Plazo
    ? new Date(new Date(obra.Fecha_de_Inicio).setMonth(new Date(obra.Fecha_de_Inicio).getMonth() + obra.Plazo)).toLocaleDateString()
    : 'Pending';

  return (
    <Tabs defaultValue="tab-1">
      <div className="flex justify-between items-center">
        <div className="flex flex-col gap-2">
          <h1 className="text-3xl font-semibold">{obra.NombreObra}</h1>
          <p className="text-sm text-input/60 font-semibold">{obra.Observaciones}</p>
        </div>

        <ScrollArea>
          <TabsList className="mb-3">
            <TabsTrigger value="tab-1">
              <House
                className="-ms-0.5 me-1.5 opacity-60"
                size={16}
                strokeWidth={2}
                aria-hidden="true"
              />
              Overview
            </TabsTrigger>
            <TabsTrigger value="tab-2" className="group">
              <PanelsTopLeft
                className="-ms-0.5 me-1.5 opacity-60"
                size={16}
                strokeWidth={2}
                aria-hidden="true"
              />
              Presupuestos
              <Badge className="ms-1.5 bg-primary/15 px-1 transition-opacity group-data-[state=inactive]:opacity-50">
                {obra.presupuestos?.length || 0}
              </Badge>
            </TabsTrigger>
            <TabsTrigger value="tab-3" className="group">
              <Box
                className="-ms-0.5 me-1.5 opacity-60"
                size={16}
                strokeWidth={2}
                aria-hidden="true"
              />
              Packages
              <Badge className="ms-1.5 transition-opacity group-data-[state=inactive]:opacity-50">
                New
              </Badge>
            </TabsTrigger>
          </TabsList>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>

      <TabsContent value="tab-1" className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Project Overview Card */}
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
            <h3 className="font-semibold text-lg mb-4">Project Overview</h3>
            <div className="space-y-3">
              <div>
                <label className="text-sm font-medium text-muted-foreground">Project Name</label>
                <p className="text-base">{obra.NombreObra}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-muted-foreground">Project ID</label>
                <p className="text-base">{obra.IdObras}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-muted-foreground">Contract Duration</label>
                <p className="text-base">{obra.Plazo ? `${obra.Plazo} months` : 'Not specified'}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-muted-foreground">Notes</label>
                <p className="text-base">{obra.Observaciones || 'No observations available'}</p>
              </div>
            </div>
          </div>

          {/* Progress Card */}
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
            <h3 className="font-semibold text-lg mb-4">Project Progress</h3>
            <div className="space-y-4">
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Overall Progress</span>
                  <span className="font-medium">{progress.toFixed(1)}%</span>
                </div>
                <div className="h-2 rounded-full bg-secondary">
                  <div
                    className="h-full rounded-full bg-primary transition-all duration-300"
                    style={{ width: `${progress}%` }}
                  />
                </div>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-muted-foreground">Start Date</p>
                  <p className="font-medium">{formattedStartDate}</p>
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Expected End Date</p>
                  <p className="font-medium">{formattedEndDate}</p>
                </div>
              </div>
            </div>
          </div>

          {/* Budget Overview */}
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
            <h3 className="font-semibold text-lg mb-4">Budget Overview</h3>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-muted-foreground">Contract Amount</p>
                  <p className="font-medium">{obra.Monto_Contrato ? formatCurrency(obra.Monto_Contrato) : 'Not specified'}</p>
                </div>
                <div>
                  <p className="text-sm text-muted-foreground">Number of Budgets</p>
                  <p className="font-medium">{obra.presupuestos?.length || 0} presupuestos</p>
                </div>
              </div>
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span className="text-muted-foreground">Budget Utilization</span>
                  <span className="font-medium">{progress.toFixed(1)}%</span>
                </div>
                <div className="h-2 rounded-full bg-secondary">
                  <div
                    className="h-full rounded-full bg-primary transition-all duration-300"
                    style={{ width: `${progress}%` }}
                  />
                </div>
              </div>
            </div>
          </div>

          {/* Contract Details */}
          <div className="rounded-lg border bg-card text-card-foreground shadow-sm p-6">
            <h3 className="font-semibold text-lg mb-4">Contract Details</h3>
            <div className="space-y-4">
              <div>
                <p className="text-sm text-muted-foreground mb-2">Important Dates</p>
                <div className="space-y-2">
                  <div>
                    <label className="text-sm font-medium">Contract Date</label>
                    <p className="text-sm">
                      {obra.Fecha_de_Contrato
                        ? new Date(obra.Fecha_de_Contrato).toLocaleDateString()
                        : 'Not specified'}
                    </p>
                  </div>
                  <div>
                    <label className="text-sm font-medium">Project Start</label>
                    <p className="text-sm">{formattedStartDate}</p>
                  </div>
                </div>
              </div>
              <div>
                <p className="text-sm text-muted-foreground mb-2">Contract Status</p>
                <p className="text-sm">
                  {progress === 100 ? 'Completed' : progress > 0 ? 'In Progress' : 'Not Started'}
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Mediciones History */}
        {mediciones.length > 0 && obra.presupuestos?.[0]?.id && (
          <div className="mt-8">
            <MedicionHistory presupuestoId={obra.presupuestos[0].id} />
          </div>
        )}
      </TabsContent>

      <PresupuestosContent
        obraId={obra.IdObras}
      />

      <TabsContent value="tab-3">
        <p className="p-4 pt-1 text-center text-xs text-muted-foreground">Content for Tab 3</p>
      </TabsContent>
    </Tabs>
  );
}

export default TabsComponent;

================
File: app/obras/create/page.tsx
================
"use client";

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

type Field = {
  name: string;
  label: string;
  type: string; // e.g. 'text', 'number', 'date'...
};

type FieldSection = {
  sectionName: string;
  fields: Field[];
};

// Example: only a small subset of your actual fields.
const obraFieldSections: FieldSection[] = [
  {
    sectionName: "General Info",
    fields: [
      { name: "NombreObra", label: "Nombre de la Obra", type: "text" },
      { name: "Norma_Legal", label: "Norma Legal", type: "text" },
      { name: "Norma_Legal2", label: "Norma Legal 2", type: "text" },
      { name: "IdEmpresa", label: "IdEmpresa (Int)", type: "number" },
    ],
  },
  {
    sectionName: "Montos & Contratos",
    fields: [
      { name: "Monto_Contrato", label: "Monto Contrato (Float)", type: "number" },
      { name: "Plazo", label: "Plazo (Int)", type: "number" },
      { name: "Monto_Adicional_1", label: "Monto Adicional 1 (Float)", type: "number" },
      { name: "Monto_Adicional_2", label: "Monto Adicional 2 (Float)", type: "number" },
    ],
  },
  {
    sectionName: "Fechas",
    fields: [
      { name: "Fecha_de_Contrato", label: "Fecha de Contrato", type: "date" },
      { name: "Fecha_de_Inicio", label: "Fecha de Inicio", type: "date" },
      { name: "Fecha_de_Finalizaci_n", label: "Fecha de Finalización", type: "date" },
    ],
  },
  {
    sectionName: "Observaciones & Memorias",
    fields: [
      { name: "Observaciones", label: "Observaciones", type: "text" },
      { name: "Memoria_Desc", label: "Memoria Desc", type: "text" },
    ],
  },
  // ... Create as many sections as you like and add the rest of your fields
];

export default function CreateObraPage() {
  const router = useRouter();
  const [formData, setFormData] = useState<Record<string, any>>({});

  // Handle changes from any input
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Example: parse numeric or date fields if needed
    // if (formData["IdEmpresa"]) {
    //   formData["IdEmpresa"] = parseInt(formData["IdEmpresa"], 10);
    // }
    // if (formData["Monto_Contrato"]) {
    //   formData["Monto_Contrato"] = parseFloat(formData["Monto_Contrato"]);
    // }

    try {
      const res = await fetch("/api/obras", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });
      if (res.ok) {
        router.push("/db/obras");
      } else {
        console.error("Error creating obra:", await res.text());
      }
    } catch (error) {
      console.error("Error creating obra:", error);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Create New Obra</h1>

      <form onSubmit={handleSubmit}>
        {obraFieldSections.map((section) => (
          <div key={section.sectionName} className="mb-10">
            <h2 className="text-xl font-semibold mb-4">{section.sectionName}</h2>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {section.fields.map((field) => (
                <div key={field.name} className="space-y-2">
                  <Label htmlFor={field.name}>{field.label}</Label>
                  <Input
                    id={field.name}
                    name={field.name}
                    type={field.type}
                    value={formData[field.name] || ""}
                    onChange={handleChange}
                  // You can add required if needed:
                  // required
                  />
                </div>
              ))}
            </div>
          </div>
        ))}

        <div className="flex gap-4 pt-4">
          <Button type="submit">Create Obra</Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push("/db/obras")}
          >
            Cancel
          </Button>
        </div>
      </form>
    </div>
  );
}

================
File: app/obras/page.tsx
================
"use client";

import { Key, ReactNode, useEffect, useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { useRouter } from "next/navigation";

// Add mapping data with proper types
const estadosMap: Record<number, string> = {
  1: "Certificado",
  2: "Redeterminacion",
  3: "Pliego / Contrato",
  4: "Solicitud de Obra",
  5: "Docum. p/ Obra",
  6: "Adicional / Ampliacion Plazos",
  7: "Recepcion",
  8: "Provision de Obra",
  9: "Personal",
  10: "Conforme a Obra",
  11: "Gestion Administrativa"
};

const localidadesMap: Record<number, string> = {
  1: "Alvear",
  2: "Bella Vista",
  3: "Caá Catí",
  4: "Corrientes",
  5: "Carlos Pellegrini",
  6: "Concepción",
  7: "Curuzú Cuatiá",
  8: "Empedrado",
  9: "Esquina",
  10: "Gdor. Martínez",
  11: "Goya",
  12: "Parada Acuña",
  13: "Ita Ibate",
  14: "Itatí",
  15: "Ituzaingó",
  16: "Lavalle",
  17: "Loreto",
  18: "M. I. Loza",
  19: "Manantiales",
  20: "Mburucuyá",
  21: "Mercedes",
  22: "Mocoretá                  ",
  23: "Mte. Caseros             ",
  24: "P. de los Libres          ",
  25: "Paso de la Patria        ",
  26: "Saladas                  ",
  27: "San Cosme                ",
  28: "San Lorenzo             ",
  29: "San Miguel               ",
  30: "San Roque               ",
  31: "Santa Ana               ",
  32: "Sauce                   ",
  33: "Santo Tomé               ",
  34: "Cnia. Liebig´s          ",
  35: "Gdor. Virasoro         ",
  36: "Yapeyú                  ",
  37: "Est. Torrent            ",
  38: "Garruchos               ",
  39: "Santa Rosa               ",
  40: "Tabay                   ",
  41: "Cnia. Tatacuá            ",
  42: "Lomas de Vallejos        ",
  43: "Palmar Grande           ",
  44: "Juan Pujol               ",
  45: "9 de Julio              ",
  46: "Chavarría               ",
  47: "Pedro R. Fernández        ",
  48: "Cnia. Pando               ",
  50: "Yataity Calle           ",
  51: "Santa Lucía             ",
  52: "Pueblo Libertador        ",
  53: "Cnia. Madariaga           ",
  54: "Perugorría",
  55: "Cnia. Libertad           ",
  56: "Pda. Pucheta             ",
  57: "Bonpland                  ",
  58: "Tapebicuá                 ",
  59: "Guaviravi                 ",
  60: "La Cruz                   ",
  61: "El Sombrero               ",
  62: "J.R. Gómez                ",
  63: "San Carlos               ",
  64: "Villa Olivari            ",
  65: "San Antonio               ",
  66: "Yahapé                    ",
  67: "Riachuelo                ",
  68: "Laguna Brava              ",
  69: "San Cayetano              ",
  70: "Herlitzka                 ",
  71: "San Luis del Palmar       ",
  72: "Ramada Paso               ",
  73: "Isla Apipé                ",
  74: "Berón de Astrada          ",
  75: "Felipe Yofre              ",
  77: "Pje. Gomez Cué            ",
  78: "Pso. Pesoa                ",
  79: "Carolina                 ",
  80: "Cruz de los Milagros      ",
  81: "Ingenio Primer Correntino ",
  82: "Cazadores Correntinos     ",
  83: "Villa Córdoba             ",
  84: "Est. Libertad             ",
  85: "Pje. Perichon             ",
  86: "Rincon del Guayquiraró    ",
  87: "Tres de Abril             ",
  88: "Ensenada Grande           ",
  89: "Pje. Santo Domingo        ",
  90: "Varias Localidades        ",
  92: "Cnia. El Progreso         ",
  93: "Pje. Cerrito . LAV        ",
  94: "Pje Yahavere . CON        ",
  95: "Manuel Derqui             ",
  96: "Cnia. San Jose . LAV      ",
  97: "Pje. San Pedro . SCO      ",
  98: "Cañada Quiroz"
};

const dptosMap: Record<number, string> = {
  1: "Capital",
  2: "San Cosme",
  3: "San Luis del palmar",
  4: "Itatí",
  5: "Berón de Astrada",
  6: "Gral. Paz",
  7: "San Miguel",
  8: "Ituzaingó",
  9: "Santo Tomé",
  10: "Alvear",
  11: "San Martín",
  12: "P. de los Libres",
  13: "Mercedes",
  14: "Monte Caseros",
  15: "Curuzú Cuatiá",
  16: "Sauce",
  17: "Esquina",
  18: "Goya",
  19: "Lavalle",
  20: "San Roque",
  21: "Bella Vista",
  22: "Empedrado",
  23: "Mburucuyá",
  24: "Saladas",
  25: "Concepción"
};

const empresasMap: Record<number, string> = {
  1: "ACIFA S.R.L.",
  2: "EM.AR.CO S.A.",
  3: "MIGUEL A. ROMA Const.",
  4: "NODARCO S.R.L.",
  5: "AZ S.A.",
  6: "EDIFICADORA CORRENTINA S.A.",
  7: "CONSTRUSERV S.R.L.",
  8: "PROAS ING. S.R.L.",
  9: "CARBO S.A.",
  10: "Ing. ORLANDO PETERSON",
  11: "Arq. CARLOS MIGUEL SEGOVIA",
  12: "Ing. MARIO CARZINO",
  13: "Ing. Juan J. Meana Carbajal",
  14: "ALFA Const.",
  15: "Ing. ARNALDO JORGE GILI",
  16: "ANSA S.A.",
  17: "Ing. LUIS MONZON PANDO",
  18: "S.R. & Asociados",
  19: "CONSTRUMAR S.A.",
  20: "D.R. Const.",
  21: "Arq. ANIBAL MONZON GRAMAJO",
  22: "GINSA S.A.",
  23: "Ing. IFRAN JOSE",
  24: "Ing. FRANCISCO M. CRUZ",
  25: "JU.VIC. Constructora",
  26: "LICON Constructora",
  27: "MECAR S.A.",
  28: "NORCON S.R.L",
  29: "ZICON S.R.L.",
  30: "ARCA S.A.",
  31: "Ing. GERMAN A. CUNDOM",
  32: "Daniel Meana OBRAS CIVILES",
  33: "MACRO Construcciones",
  34: "CUATRO CAMINOS S.R.L.",
  35: "MORENO, ENRIQUE FABIAN",
  36: "ALBORNOZ, Mario Hector",
  37: "JEVI S.A.",
  38: "Arq. Carlos R. Agazzani",
  39: "EMSA S.A.",
  40: "R.G.M. Construcciones",
  41: "Timbó S.R.L.",
  42: "INGPORT S.R.L.",
  43: "SAIACH Construcciones S.A.",
  44: "Arq° Maria del Carmen Languasco",
  45: "Brunel Constr.",
  46: "Hector Osvaldo Romero",
  47: "Ing. Nelson E. Lértora",
  48: "Ing. Daniel Alfredo Meana",
  49: "CILEA SRL",
  50: "Ing. Antonio L. Martín",
  51: "Elizalde Construcciones",
  52: "ARQUISA S.R.L.",
  53: "D&C de Analía Silvano",
  54: "CO.AL.",
  55: "Ing. Horacio Argañaraz",
  56: "CARMA SRL",
  57: "CANALES S.A.",
  58: "Arq. Jorge Nicanor Gomez",
  59: "Ing. Eduardo Romero Gentile",
  60: "Ing. Mario Alberto Poupard",
  61: "Ing. Fernando Pipán",
  62: "Quito Caballero Construcciones",
  63: "VERGES S.A.",
  64: "Mejores Hospitales S.A.",
  65: "MAV Construcciones",
  66: "D.M. Construcciones S.A.",
  67: "José Francisco Moreno",
  68: "Electrofuturo S.R.L.",
  69: "Ing. Ricardo Dimas Cantero",
  70: "Consecor S.R.L.",
  71: "Del Rio Construcciones",
  72: "AltaGracia Construcciones SRL",
  73: "J.V. Construcciones S.R.L.",
  74: "STECON S.R.L.",
  75: "Ing° Emilio Guillermo Sticchi",
  76: "Ing. Elvio R. Ramírez Const.",
  77: "Argentina Construcciones S.R.L.",
  78: "A.J.R. Construcciones",
  79: "ALCEPA S.A",
  80: "ZINARQ",
  81: "Arq° Carlos Rugnon",
  82: "Nexo Obras y Servicios S.A.",
  83: "Construnor S.R.L.",
  84: "Chacabuco S.R.L.",
  85: "Ing. Marcelo Valdéz",
  86: "Talez S.R.L.",
  87: "Ing. Artigas Const.",
  88: "Parras Walter D.",
  89: "Ingenieria y Servicios",
  90: "Lecon",
  91: "FMC Constructora",
  92: "GEC S.A.",
  93: "Arq. THOM, Alejandro",
  94: "Ing° Abraham Tayar",
  95: "Ing° Jorge Bernal",
  96: "Miguel Antonio ORTEGA",
  97: "Arena",
  98: "Dasernic",
  99: "Ing. Raul Duarte",
  100: "BOAKNIN SALVADOR",
  101: "Horminor",
  102: "DC Construcciones",
  103: "Towada Construcciones",
  104: "Ing. Luis Walter Quijano",
  105: "D.F. Construcciones",
  106: "Constructora Roca S.R.L.",
  107: "Ing. Gomez Enriquez Jose A.",
  108: "J.M.G. S.R.L.",
  109: "Arq. Hugo Daniel Sosa",
  110: "Arq° Luisa Esther Acevedo",
  111: "HAR.CEM.HAR.SRL",
  112: "D.J.B. S.R.L.",
  113: "TAYAR Construcc.",
  114: "Rentamaq S.R.L",
  115: "C.R.A. Construcciones",
  116: "GENERGIA S.A",
  117: "Ing. Hugo R. Sanchez",
  118: "OLIVEROS, Juan manuel",
  119: "Pilares SRL",
  120: "Proyectos y Estudios Especiales",
  121: "OLIVA, Ruben Omar",
  122: "MONPAN S.R.L.",
  123: "HITO S.A.",
  124: "SEIMAC S.A.",
  125: "San Antonio Servicios",
  126: "GARUPA S.R.L.",
  127: "Piragine Luis Ariel Const.",
  128: "Ing. Jorge A. Petriette",
  129: "Ceramica Norte S.A.",
  130: "Reino Natural S.R.L.",
  131: "CEMAR S.A.",
  132: "Ninguna",
  133: "Constructora del Fou S.R.L",
  134: "Ing. Roberto  Armoa",
  135: "Construquen S.R.L.",
  136: "AKARANDU",
  137: "RI.OS. MAQ",
  138: "Ing. Guillermo A. Zamudio",
  139: "Traverso, Fernando Antonio",
  140: "LUIS WALTER QUIJANO",
  141: "TyN Constructora",
  142: "SETA Ingenieria S.A.",
  143: "Comercializadora del NEA",
  144: "Irupe Construcciones",
  145: "Cavercon S.A",
  146: "Electro-Rural S.R.L.",
  147: "Aceros y Construcciones SRL",
  148: "Electrovial S.A.",
  149: "COP S.R.L.",
  150: "BAZTAN SRL",
  151: "Soluciones en Obras Civiles",
  152: "Avedis Tecno Agro Vial S.A.",
  153: "Delfou",
  154: "UTE Ing. Raul Duarte - GEC S.A.",
  155: "Ing. Oscar A. Maidana",
  156: "",
  157: "PASAR EMPRENDIMIENTOS SAS",
  158: "Concret Libres S.A.",
  159: "LUALZI",
  160: "GEC S.A. - CONCRET LIBRES S.A. UT II",
  161: "GEC S.A. - CONCRET LIBRES S.A. UT I",
  162: "IMI S.R.L.",
  164: "DIMAR Servicios",
  166: "VITA S.R.L.",
  167: "SOLUCIONES Corporativas SRL"
};

interface Obra {
  id: Key | null | undefined;
  name: ReactNode;
  Norma_Legal: ReactNode;
  montoContrato: ReactNode;
  IdEmpresa: ReactNode;
  IdInspectores: ReactNode;
  IdReparticion: ReactNode;
  IdAvance: ReactNode;
  Plazo: ReactNode;
  IdModalidad: ReactNode;
  IdLocalidad: ReactNode;
  IdAreas: ReactNode;
  Fecha_de_Contrato: ReactNode;
  Fecha_de_Inicio: ReactNode;
  Fecha_de_Finalizaci__n: ReactNode;
  Memoria_Desc: ReactNode;
  Codigo_Meta: ReactNode;
  Departamento: ReactNode;
  Monto_Adicional_1: ReactNode;
  Plazo_Adicional1: ReactNode;
  Final_adicional1: ReactNode;
  Monto_Adicional_2: ReactNode;
  Plazo_Adicional2: ReactNode;
  Final_adicional2: ReactNode;
  Plazo_Adicional3: ReactNode;
  Final_adicional3: ReactNode;
  IdProyectista: ReactNode;
  Norma1: ReactNode;
  Norma2: ReactNode;
  Norma3: ReactNode;
  Amp_Cont1: ReactNode;
  Amp_Cont2: ReactNode;
  Observaciones: ReactNode;
  Monto_Adicional_3: ReactNode;
  Amp_Cont3: ReactNode;
  Redet_monto_1: ReactNode;
  Redet_monto_2: ReactNode;
  Redet_monto_3: ReactNode;
  Redet_norma_1: ReactNode;
  Redet_norma_2: ReactNode;
  Redet_norma_3: ReactNode;
  Proyecto: ReactNode;
  A__oTerminada: ReactNode;
  Expte: ReactNode;
  pliego: ReactNode;
  basico: ReactNode;
  prioridad: ReactNode;
  fuenteO: ReactNode;
  Edificio: ReactNode;
  pptoof: ReactNode;
  p: ReactNode;
  Fechalicit: ReactNode;
  ResponsableProy: ReactNode;
  Fechapliego: ReactNode;
  Fechaelevado: ReactNode;
  NormaARP: ReactNode;
  NormaARD: ReactNode;
  fechaARP: ReactNode;
  fechaARD: ReactNode;
  inaugurada: ReactNode;
  ainaugurar: ReactNode;
  fechainaugur: ReactNode;
  noinaugur: ReactNode;
  observinaugur: ReactNode;
  id: number;
  nombre: string;
  ubicacion: string;
  estado: string;
  fechaInicio: Date;
}

export default function ObrasPage() {
  const [obras, setObras] = useState<Obra[]>([]);
  const router = useRouter();

  useEffect(() => {
    fetch("/api/obras")
      .then((res) => res.json())
      .then((data) => {
        console.log('data', data);
        setObras(data);
      });
  }, []);



  const handleRowClick = (id: Key | null | undefined) => {
    router.push(`/obras/${id}`);
  };

  const formatDate = (date: ReactNode) => {
    if (!date) return "-";
    return new Date(date as string).toLocaleDateString();
  };

  const formatCurrency = (amount: ReactNode) => {
    if (!amount) return "-";
    return new Intl.NumberFormat('es-AR', {
      style: 'currency',
      currency: 'ARS'
    }).format(Number(amount));
  };

  const getEstadoName = (id: ReactNode) => {
    return estadosMap[Number(id)] || 'Sin estado';
  };

  const getLocalidadName = (id: ReactNode) => {
    return localidadesMap[Number(id)] || 'Sin ubicación';
  };

  const getDepartamentoName = (id: ReactNode) => {
    return dptosMap[Number(id)] || 'Sin departamento';
  };

  const getEmpresaName = (id: ReactNode) => {
    return empresasMap[Number(id)] || 'Sin empresa';
  };

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Obras</h1>
        <Link href="/db/obras/create">
          <Button>Nueva Obra</Button>
        </Link>
      </div>

      <div className="bg-white rounded-lg shadow overflow-x-auto">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead className="w-[100px]">ID</TableHead>
              <TableHead className="min-w-[200px]">Nombre</TableHead>
              <TableHead className="min-w-[150px]">Monto Contrato</TableHead>
              <TableHead className="min-w-[150px]">Empresa</TableHead>
              <TableHead className="min-w-[120px]">Estado</TableHead>
              <TableHead className="min-w-[120px]">Fecha Inicio</TableHead>
              <TableHead className="min-w-[120px]">Fecha Fin</TableHead>
              <TableHead className="min-w-[150px]">Ubicación</TableHead>
              <TableHead className="min-w-[150px]">Departamento</TableHead>
              <TableHead className="min-w-[120px]">Avance</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {obras.map((obra) => (
              <TableRow
                key={obra.id}
                className="cursor-pointer hover:bg-gray-100 transition-colors"
                onClick={() => handleRowClick(obra.id)}
              >
                <TableCell className="font-medium">{obra.id}</TableCell>
                <TableCell>
                  <div className="font-medium">{obra.name}</div>
                  {obra.Memoria_Desc && (
                    <div className="text-sm text-gray-500 truncate max-w-[300px]">
                      {obra.Memoria_Desc}
                    </div>
                  )}
                </TableCell>
                <TableCell>{formatCurrency(obra.montoContrato)}</TableCell>
                <TableCell>{getEmpresaName(obra.IdEmpresa)}</TableCell>
                <TableCell>
                  <div className={`inline-flex px-2 py-1 rounded-full text-xs font-semibold
                    ${getEstadoName(obra.IdAvance) === 'Certificado' ? 'bg-green-100 text-green-800' :
                      getEstadoName(obra.IdAvance) === 'En Ejecución' ? 'bg-blue-100 text-blue-800' :
                        'bg-gray-100 text-gray-800'}`}>
                    {getEstadoName(obra.IdAvance)}
                  </div>
                </TableCell>
                <TableCell>{formatDate(obra.Fecha_de_Inicio)}</TableCell>
                <TableCell>{formatDate(obra.Fecha_de_Finalizaci__n)}</TableCell>
                <TableCell>{getLocalidadName(obra.IdLocalidad)}</TableCell>
                <TableCell>{getDepartamentoName(obra.Departamento)}</TableCell>
                <TableCell>
                  <div className="w-full bg-gray-200 rounded-full h-2.5">
                    <div
                      className="bg-blue-600 h-2.5 rounded-full"
                      style={{ width: `${obra.IdAvance ? obra.IdAvance : '0'}%` }}
                    ></div>
                  </div>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

================
File: app/page.tsx
================
'use client'
import CustomTable, { ElementRow } from "@/components/Table/custom-table"
import { Card } from "@/components/ui/card"
import { useEffect, useState } from "react"

const CACHE_KEY = 'dashboard_data_cache';
const CACHE_EXPIRY = 1000 * 60 * 60; // 1 hour

const fetchMoreData = async (start: number, limit: number = 100): Promise<ElementRow[] | null> => {
  try {
    const res = await fetch(`/api/tagsWithElements?start=${start}&limit=${limit}`);
    if (!res.ok) throw new Error(`Failed to fetch data: ${res.statusText}`);
    const data = await res.json();
    console.log('data', data);
    return data;
  } catch (error) {
    console.error('Error in fetchMoreData:', error);
    return null;
  }
}

export default function Page() {
  const [data, setData] = useState<ElementRow[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadData = async () => {
      try {
        // Try to get data from cache first
        const cached = localStorage.getItem(CACHE_KEY);
        if (cached) {
          const { data: cachedData, timestamp } = JSON.parse(cached);

          // Check if cache is still valid (not expired)
          if (Date.now() - timestamp < CACHE_EXPIRY) {
            setData(cachedData);
            setIsLoading(false);
            return;
          }
        }

        // If no cache or expired, fetch fresh data
        setIsLoading(true);
        const freshData = await fetchMoreData(0, 100);

        if (freshData) {
          // Update state
          setData(freshData);

          // Save to cache with timestamp
          localStorage.setItem(CACHE_KEY, JSON.stringify({
            data: freshData,
            timestamp: Date.now()
          }));
        }
      } catch (error) {
        console.error('Error loading data:', error);
      } finally {
        setIsLoading(false);
      }
    };

    loadData();
  }, []);

  return (
    <div className="flex flex-1 flex-col gap-4 p-4 bg-muted/70">
      <Card className="min-h-[100vh] flex-1 rounded-xl md:min-h-min p-0">
        {isLoading ? (
          <div className="flex items-center justify-center h-64">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900" />
          </div>
        ) : (
          <CustomTable
          />
        )}
      </Card>
      {/* <Card className="min-h-[100vh] flex-1 rounded-xl md:min-h-min p-0" >
            <ExpandableTable />
          </Card> */}
      <div className="grid auto-rows-min gap-4 md:grid-cols-3">
        <div className="aspect-video rounded-xl bg-muted/50" />
        <div className="aspect-video rounded-xl bg-muted/50" />
        <div className="aspect-video rounded-xl bg-muted/50" />
      </div>
    </div>
  );
}

================
File: app/presupuesto/[id]/MedicionSection.tsx
================
'use client'

import React from 'react'
import { BookIcon, Save } from 'lucide-react'
import { Button } from '@/components/ui/button'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { PresupuestoSection } from '@/components/presupuesto/PresupuestoSection'
import { useMedicion } from '@/lib/hooks/useMedicion'
import { GroupedMedicionData } from '../types'
import { cn } from '@/lib/utils'
import { usePresupuesto } from '@/lib/hooks/usePresupuesto'
import { MedicionItem } from '@/lib/types/medicion'

interface MedicionSectionProps {
  presupuestoId: string | number
  initialData: GroupedMedicionData
}

export default function MedicionSection({ presupuestoId, initialData }: MedicionSectionProps) {
  const {
    data,
    mediciones,
    loading,
    error,
    resetToLatestMedicion,
    viewMedicionDetail,
    updateData: updateMedicionData,
    saveMedicion,
  } = useMedicion({
    presupuestoId,
    initialData,
  })

  // Get presupuesto data to calculate parcial values
  const { data: presupuestoData, grandTotal } = usePresupuesto({ presupuestoId })

  // State to force recalculation
  const [updateCounter, setUpdateCounter] = React.useState(0)

  // Debug logs
  console.log('MedicionSection render:', {
    presupuestoId,
    presupuestoData,
    grandTotal,
    medicionData: data,
    updateCounter
  });

  // Wrapper for updateData that triggers recalculation
  const handleUpdateData = React.useCallback((tag: string, itemId: string | number, key: keyof MedicionItem, value: string) => {
    console.log('handleUpdateData called:', { tag, itemId, key, value });

    // Update the data
    updateMedicionData(tag, itemId, key, value);

    // Force immediate recalculation
    setUpdateCounter(prev => prev + 1);
  }, [updateMedicionData]);

  // Calculate global totals with weighted values
  const globalTotals = React.useMemo(() => {
    console.log('Recalculating global totals, counter:', updateCounter);
    let anterior = 0;
    let presente = 0;
    let acumulado = 0;

    if (!presupuestoData || !data) {
      console.log('Missing data for calculations:', { presupuestoData, data });
      return { anterior, presente, acumulado };
    }

    Object.entries(data).forEach(([tag, items]) => {
      const presupuestoItems = presupuestoData[tag] || [];
      console.log(`Processing section ${tag}:`, { items, presupuestoItems });

      items.forEach(item => {
        // Find corresponding presupuesto item to get its parcial value
        const presupuestoItem = presupuestoItems.find(p => p.id === item.id);
        if (!presupuestoItem) {
          console.log(`No presupuesto item found for medicion item:`, item);
          return;
        }

        // Calculate parcial percentage (item's contribution to total)
        const itemTotal = (presupuestoItem.quantity || 0) * (presupuestoItem.unitPrice || 0);
        const parcialPercentage = (itemTotal / (grandTotal || 1)) * 100;

        // Calculate weighted values
        const itemAnterior = ((item.anterior || 0) / 100) * parcialPercentage;
        const itemPresente = ((item.presente || 0) / 100) * parcialPercentage;
        const itemAcumulado = (((item.anterior || 0) + (item.presente || 0)) / 100) * parcialPercentage;

        anterior += itemAnterior;
        presente += itemPresente;
        acumulado += itemAcumulado;

        console.log(`Item ${item.name} calculations:`, {
          itemTotal,
          grandTotal,
          parcialPercentage,
          rawValues: {
            anterior: item.anterior,
            presente: item.presente,
            acumulado: (item.anterior || 0) + (item.presente || 0)
          },
          weightedValues: {
            anterior: itemAnterior,
            presente: itemPresente,
            acumulado: itemAcumulado
          },
          runningTotals: { anterior, presente, acumulado }
        });
      });
    });

    console.log('Final global totals:', { anterior, presente, acumulado });
    return { anterior, presente, acumulado };
  }, [data, presupuestoData, grandTotal, updateCounter]);

  if (loading) return <div>Cargando mediciones...</div>
  if (error) return <div>{error}</div>

  return (
    <div className='flex flex-col gap-8'>
      {/* Main content */}
      <div className="rounded-lg border-none border-gray-200 space-y-8">
        {Object.entries(data).map(([tag, items], tagIndex) => {
          const presupuestoItems = presupuestoData[tag] || []
          return (
            <PresupuestoSection
              key={tag}
              tag={tag}
              tagIndex={tagIndex}
              items={items}
              previewVersion="medicion"
              grandTotal={grandTotal}
              sectionRubros={[]}
              sectionIacums={[]}
              updateData={(itemId, key, value) => {
                // Only allow medicion keys
                if (key === 'anterior' || key === 'presente' || key === 'acumulado') {
                  handleUpdateData(tag, itemId, key, value)
                }
              }}
              handleDeleteRow={() => { }}
              allElements={[]}
              highlightChanges={false}
              presupuestoItems={presupuestoItems}
            />
          )
        })}

        {/* Global totals */}
        <div className="rounded-lg border border-gray-200 shadow-md p-4">
          <h3 className="text-lg font-bold mb-4">Avance de Obra Total</h3>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="text-center">Anterior</TableHead>
                <TableHead className="text-center">Presente</TableHead>
                <TableHead className="text-center">Acumulado a la Fecha</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              <TableRow className="bg-black/5">
                <TableCell className="text-center font-bold">
                  {globalTotals.anterior.toFixed(2)}%
                </TableCell>
                <TableCell className="text-center font-bold">
                  {globalTotals.presente.toFixed(2)}%
                </TableCell>
                <TableCell className="text-center font-bold">
                  {globalTotals.acumulado.toFixed(2)}%
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>

          {/* Detailed calculations */}
          <div className="mt-4 text-sm space-y-4">
            <h4 className="font-semibold">Cálculos Detallados:</h4>
            {Object.entries(data).map(([tag, items]) => {
              const presupuestoItems = presupuestoData[tag] || []
              let sectionDetails = {
                tag,
                items: items.map(item => {
                  const presupuestoItem = presupuestoItems.find(p => p.id === item.id)
                  console.log('presupuestoItem', presupuestoData);
                  if (!presupuestoItem) return null

                  const itemTotal = (presupuestoItem.quantity || 0) * (presupuestoItem.unitPrice || 0)
                  const parcialPercentage = (itemTotal / (grandTotal || 1)) * 100
                  const anterior = ((item.anterior || 0) / 100) * parcialPercentage
                  const presente = ((item.presente || 0) / 100) * parcialPercentage
                  const acumulado = (((item.anterior || 0) + (item.presente || 0)) / 100) * parcialPercentage

                  return {
                    name: item.name,
                    itemTotal,
                    parcialPercentage,
                    anterior,
                    presente,
                    acumulado
                  } as const
                }).filter((item): item is NonNullable<typeof item> => item !== null)
              }

              return (
                <div key={tag} className="border rounded p-2">
                  <div className="font-medium">{tag}</div>
                  {sectionDetails.items.map((detail, idx) => (
                    <div key={idx} className="ml-4 text-xs space-y-1 mt-2">
                      <div className="font-medium">{detail.name}</div>
                      <div>Monto: ${detail.itemTotal.toFixed(2)} ({detail.parcialPercentage.toFixed(2)}% del total)</div>
                      <div>Contribución al avance:</div>
                      <div className="ml-2">Anterior: {detail.anterior.toFixed(2)}%</div>
                      <div className="ml-2">Presente: {detail.presente.toFixed(2)}%</div>
                      <div className="ml-2">Acumulado: {detail.acumulado.toFixed(2)}%</div>
                    </div>
                  ))}
                </div>
              )
            })}
          </div>
        </div>
      </div>

      {/* Sidebar controls */}
      <div className='flex flex-col justify-between gap-8'>
        {mediciones.length > 0 && (
          <Dialog>
            <DialogTrigger asChild>
              <Button
                type="button"
                variant="outline"
                className="h-9 w-full justify-start px-3"
              >
                <BookIcon className="w-4 h-4 mr-2" />
                Ver Mediciones Anteriores
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-3xl">
              <DialogHeader>
                <DialogTitle>Historial de Mediciones</DialogTitle>
              </DialogHeader>
              <div className="space-y-4">
                <div className="flex justify-end mb-4">
                  <Button
                    variant="outline"
                    onClick={resetToLatestMedicion}
                  >
                    Volver a Última Medición
                  </Button>
                </div>
                <div className="rounded-lg border shadow-md">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Fecha</TableHead>
                        <TableHead>Elementos Medidos</TableHead>
                        <TableHead className="text-right">Acciones</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {mediciones.map((medicion) => (
                        <TableRow key={medicion.id}>
                          <TableCell>
                            {new Date(medicion.data.fecha).toLocaleDateString('es-AR', {
                              day: '2-digit',
                              month: '2-digit',
                              year: 'numeric',
                              hour: '2-digit',
                              minute: '2-digit'
                            })}
                          </TableCell>
                          <TableCell>
                            {medicion.data.items.filter(item => item.presente > 0).length} elementos
                          </TableCell>
                          <TableCell className="text-right">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => viewMedicionDetail(medicion)}
                            >
                              Ver Detalle
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              </div>
            </DialogContent>
          </Dialog>
        )}
        <Button
          type="button"
          variant="default"
          className="h-9 w-full justify-start px-3"
          onClick={saveMedicion}
        >
          <Save className="w-4 h-4 mr-2" />
          Guardar Medición
        </Button>
      </div>
    </div>
  )
}

================
File: app/presupuesto/[id]/page.tsx
================
'use client'

import React, { useEffect, useState, useCallback } from 'react'
import { useParams } from 'next/navigation'
import { Check, Plus, Trash2, FilePenLine, BookIcon } from "lucide-react"
import { Button } from "@/components/ui/button"
import {
  Command,
  CommandInput,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { debounce } from 'lodash'
import { Card } from '@/components/ui/card'
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Box, House, PanelsTopLeft } from "lucide-react";
import { cn } from '@/lib/utils'
import { motion } from 'framer-motion'
import { Save } from "lucide-react"
import { PresupuestoSection } from '@/components/presupuesto/PresupuestoSection'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import dynamic from 'next/dynamic'
import { GroupedPresupuestoData, GroupedMedicionData, PresupuestoItem } from '../types'

// Dynamically import MedicionSection to prevent mixing of types
const MedicionSection = dynamic(() => import('./MedicionSection'), {
  loading: () => <div>Cargando medición...</div>
})

interface TableItem {
  id: string | number
  name: string
  unit: string
  price: number
  category: string
  accumulated?: string | number
  parcial?: string | number
  rubro?: string | number
  element_tags?: Array<{ tags: { name: string } }>
  quantity?: number
  unitPrice?: number
  totalPrice?: number
  anterior?: number
  presente?: number
  acumulado?: number
  originalUnit?: string
}

interface GroupedData {
  [tag: string]: TableItem[]
}

interface MedicionData {
  fecha: string
  items: {
    itemId: string | number
    anterior: number
    presente: number
    acumulado: number
  }[]
}

interface Medicion {
  id: number
  presupuestoId: number
  data: MedicionData
  createdAt: string
  updatedAt: string
}

const testData = {
  "MATERIALES ELECTRICOS": [
    {
      "id": 1,
      "name": "VIGUETAS Y LADRILLOS ",
      "unit": "NULL",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Viguetas pretensadas serie 1 (SERIE ASTER 2 ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Viguetas pretensadas serie 2 (SERIE ASTER 3 ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 5,
      "name": "Viguetas pretensadas serie 5 (SERIE \"C\" 5 ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "Viguetas pretensadas serie 7 (SERIE \"D\" 6ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "Ladrillos cer?micos de 9,5 x 25 x 40 cm",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "Ladrillos cer?micos de 12,5 x 25 x 40 cm",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "Ladrillos de poliest. expandido de 12 x 100 x 40 cm",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "Disyuntores diferenciales": [
    {
      "id": 16,
      "name": "Arrancador para corriente alterna de 20 w",
      "unit": "c/u",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 17,
      "name": "Arrancador para corriente alterna de 40 w",
      "unit": "c/u",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "MATERIALES CA├æERIA CLOACAL Y AGUA": [
    {
      "id": 1,
      "name": "DEMOLICION Y RETIROS",
      "unit": "NULL",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Demolici?n techo F?C? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Demolici?n techo H?G? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 5,
      "name": "Demolici?n de pavimentos",
      "unit": "m3",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "Demolici?n tabique esp. 0,10",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "Demolici?n de piso de mosaicos",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "Demolici?n contrapiso de Hormig?n de cemento",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "Retiro de aberturas hasta 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "INSTALACION DE AIRE ACONDICIONADO": [
    {
      "id": 16,
      "name": "Retiro de aberturas > 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 17,
      "name": "Picado de mamposteria ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "ampliacion aula",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "escuela nueva",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "NULL",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "refaccion max",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "CA├æO DE P.V.C. P/CLOACA Y VENTILACION": [
    {
      "id": 1,
      "name": "DEMOLICION Y RETIROS",
      "unit": "NULL",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Demolici?n techo F?C? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "510",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Demolici?n techo H?G? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 5,
      "name": "Demolici?n de pavimentos",
      "unit": "m3",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "Demolici?n tabique esp. 0,10",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "310",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "Demolici?n de piso de mosaicos",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "Demolici?n contrapiso de Hormig?n de cemento",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "Retiro de aberturas hasta 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 16,
      "name": "Retiro de aberturas > 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 17,
      "name": "Picado de mamposteria ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "REVOQUES": [
    {
      "id": 5,
      "name": "caps",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "120",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Medio Oficial",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Oficial",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 1,
      "name": "Oficial Especializado",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ]
}

export default function PresupuestoPage() {
  const params = useParams()
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [data, setData] = useState<GroupedPresupuestoData>({})
  const [previewVersion, setPreviewVersion] = useState<'false' | 'medicion'>('false')
  const [isScrolled, setIsScrolled] = useState(false)

  useEffect(() => {
    const fetchData = async () => {
      try {
        const presupuestoResponse = await fetch(`/api/presupuestos/${params.id}`)
        if (!presupuestoResponse.ok) throw new Error('Error al cargar el presupuesto.')
        const presupuestoData = await presupuestoResponse.json()
        setData(presupuestoData.data)
        console.log('data', presupuestoData.data)
        setLoading(false)
      } catch (err) {
        console.error('Error fetching data:', err)
        setError('Error al cargar los datos.')
        setLoading(false)
      }
    }
    fetchData()
  }, [params.id])

  // Update scroll detection
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0)
    }

    window.addEventListener('scroll', handleScroll)
    handleScroll()

    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

  // Transform presupuesto data to medicion data
  const transformToMedicionData = (): GroupedMedicionData => {
    const medicionData: GroupedMedicionData = {};

    Object.entries(data).forEach(([tag, items]) => {
      medicionData[tag] = items.map(item => ({
        id: item.id,
        name: item.name,
        category: item.category || '',
        anterior: 0,
        presente: 0,
        acumulado: 0
      }));
    });

    return medicionData;
  };

  // Calculate grand total and section rubros
  const { grandTotal, sectionRubros } = React.useMemo(() => {
    const total = Object.values(data).reduce((total, items) => {
      if (!Array.isArray(items)) return total;
      return total + items.reduce((sectionTotal, item) => {
        const itemTotal = (item.quantity || 0) * (item.unitPrice || 0);
        return sectionTotal + itemTotal;
      }, 0);
    }, 0);

    const rubros = Object.entries(data).map(([tag, items]) => {
      if (!Array.isArray(items)) return 0;

      const sectionTotal = items.reduce((sum, item) => {
        const itemTotal = (item.quantity || 0) * (item.unitPrice || 0);
        return sum + itemTotal;
      }, 0);

      return total > 0 ? (sectionTotal * 100 / total) : 0;
    });

    return { grandTotal: total, sectionRubros: rubros };
  }, [data]);

  // Calculate running total (IACUM) for each section
  const sectionIacums = React.useMemo(() => {
    let runningTotal = 0;
    return Object.entries(data).map(([tag, items]) => {
      if (!Array.isArray(items)) return 0;

      const sectionTotal = items.reduce((sum, item) => {
        const itemTotal = (item.quantity || 0) * (item.unitPrice || 0);
        return sum + itemTotal;
      }, 0);

      runningTotal += sectionTotal;
      return grandTotal > 0 ? (runningTotal * 100 / grandTotal) : 0;
    });
  }, [data, grandTotal]);

  // Update data when a value changes
  const updateData = (tag: string, itemId: string | number, key: keyof PresupuestoItem, value: string) => {
    setData(prev => {
      const newData = { ...prev }
      const items = newData[tag] || []
      const itemIndex = items.findIndex(it => String(it.id) === String(itemId))

      if (itemIndex > -1) {
        const item = items[itemIndex]
        const numValue = Number(value) || 0

        // Create updated item with new value
        const updatedItem = { ...item, [key]: numValue }

        // Recalculate totalPrice if quantity or unitPrice changes
        if (key === 'quantity' || key === 'unitPrice') {
          updatedItem.totalPrice = (updatedItem.quantity || 0) * (updatedItem.unitPrice || 0)
        }

        // Update the item in the array
        newData[tag] = [
          ...items.slice(0, itemIndex),
          updatedItem,
          ...items.slice(itemIndex + 1),
        ]

        // Calculate new grand total
        const grandTotal = Object.values(newData).reduce((total, sectionItems) => {
          return total + sectionItems.reduce((sectionTotal, item) => {
            return sectionTotal + ((item.quantity || 0) * (item.unitPrice || 0))
          }, 0)
        }, 0)

        // Update parcial values for all sections
        Object.keys(newData).forEach(sectionTag => {
          const sectionTotal = newData[sectionTag].reduce((sum, item) => {
            return sum + ((item.quantity || 0) * (item.unitPrice || 0))
          }, 0)

          newData[sectionTag] = newData[sectionTag].map(item => {
            const itemTotal = (item.quantity || 0) * (item.unitPrice || 0)
            return {
              ...item,
              totalPrice: itemTotal,
              parcial: grandTotal > 0 ? (itemTotal * 100 / grandTotal) : 0,
              rubro: grandTotal > 0 ? (sectionTotal * 100 / grandTotal) : 0
            }
          })
        })
      }
      return newData
    })
  }

  if (loading) return <div>Cargando...</div>
  if (error) return <div>{error}</div>

  return (
    <div className='flex items-start justify-center gap-8 relative'>
      <div className='flex flex-col gap-2 mb-16'>
        <Tabs defaultValue="tab-1" className={cn("sticky top-0 z-10 p-3 pt-5 -mt-5", isScrolled ? "-ml-20" : "w-1/2")}>
          <TabsList>
            <motion.div className="bg-muted rounded-lg flex">
              <span className='w-full'>
                <TabsTrigger value="tab-1" className="py-2 w-full justify-start" asChild onClick={() => setPreviewVersion('false')}>
                  <motion.button className="inline-flex items-center justify-center gap-1.5">
                    <FilePenLine size={16} strokeWidth={2} />
                    <span>Vista Presupuesto</span>
                  </motion.button>
                </TabsTrigger>
              </span>
              <span className='w-full'>
                <TabsTrigger value="tab-2" className="py-2 w-full justify-start" asChild onClick={() => setPreviewVersion('medicion')}>
                  <motion.button className="inline-flex items-center justify-center gap-1.5">
                    <BookIcon size={16} strokeWidth={2} />
                    <span>Nueva Medición</span>
                  </motion.button>
                </TabsTrigger>
              </span>
            </motion.div>
          </TabsList>
        </Tabs>

        <div className="max-w-[1000px] min-w-[1000px] p-6 bg-white rounded-xl shadow-lg relative border">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-2xl font-bold text-gray-800 mb-4">
              Ministerio de Obras y Servicios Públicos
            </h1>
            <Card className="text-gray-600 flex flex-col justify-center items-start p-2 px-4">
              <p className="mb-2">Obra: <b>COMISARIA LAGUNA BRAVA - Obra Nueva 1226</b></p>
              <p>Ubicacion: <b>CORRIENTES CAPITAL</b></p>
            </Card>

            <h2 className="mt-4 text-lg font-bold uppercase underline">
              {previewVersion === 'medicion' ? 'Medición de Avance de Obra' : 'Planilla de Presupuesto'}
            </h2>
          </div>

          {/* Content */}
          {previewVersion === 'medicion' ? (
            <MedicionSection
              presupuestoId={params.id as string}
              initialData={transformToMedicionData()}
            />
          ) : (
            <div className="rounded-lg border-none border-gray-200 space-y-8">
              {Object.entries(data).map(([tag, items], tagIndex) => (
                <PresupuestoSection
                  key={tag}
                  tag={tag}
                  tagIndex={tagIndex}
                  items={items}
                  previewVersion={previewVersion}
                  grandTotal={grandTotal}
                  sectionRubros={sectionRubros}
                  sectionIacums={sectionIacums}
                  updateData={(itemId, key, value) => updateData(tag, itemId, key, value)}
                  handleDeleteRow={() => { }}
                  allElements={[]}
                  highlightChanges={false}
                />
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

/**
 * A simple inline-edit <input> cell
 */
function EditableInput({
  value: initialValue,
  onChange,
  suffix = "",
}: {
  value: string | number
  onChange: (val: string) => void
  suffix?: string
}) {
  const [value, setValue] = useState(String(initialValue))

  // Keep local state in sync if value changes externally
  useEffect(() => {
    setValue(String(initialValue))
  }, [initialValue])

  const handleBlur = () => {
    // Call parent onChange
    onChange(value)
  }

  return (
    <div className="flex items-center justify-center gap-1">
      <input
        className="border-b border-transparent group-hover:border-gray-300 group-focus:border-gray-300 focus:outline-none bg-transparent w-[50px] text-right focus-within:border-gray-300"
        value={value}
        onChange={(e) => setValue(e.target.value)}
        onBlur={handleBlur}
      />
      {suffix && <span className="text-sm text-gray-700 peer">{suffix}</span>}
    </div>
  )
}

================
File: app/presupuesto/all/page.tsx
================
'use client'
import Link from 'next/link';
import React from 'react';

// Assuming you have a function to fetch all presupuestos
const fetchPresupuestos = async () => {
  try {
    const response = await fetch('/api/presupuestos');
    if (!response.ok) {
      throw new Error('Failed to fetch presupuestos');
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching presupuestos:', error);
    return [];
  }
};

const PresupuestoList = () => {
  const [presupuestos, setPresupuestos] = React.useState([]);

  React.useEffect(() => {
    const loadPresupuestos = async () => {
      const data = await fetchPresupuestos();
      console.log(data);
      setPresupuestos(data);
    };
    loadPresupuestos();
  }, []);

  return (
    <ul>
      {presupuestos.map((presupuesto: { id: string | number }) => (
        <li key={presupuesto.id}>
          <Link href={`/presupuesto/${presupuesto.id}`}>
            presupuesto {presupuesto.id}
          </Link>
        </li>
      ))}
    </ul>
  );
};

export default PresupuestoList;

================
File: app/presupuesto/components/GeneralSearch.tsx
================
import React, { useState, useCallback, memo } from 'react';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandInput, CommandEmpty, CommandGroup, CommandList, CommandItem } from "@/components/ui/command";
import { Button } from "@/components/ui/button";
import { Plus, Check } from "lucide-react";
import { debounce } from 'lodash';
import { cn } from "@/lib/utils";

export const GeneralSearch = memo(({
  allElements,
  existingItems,
  onAddElement
}: {
  allElements: any[];
  existingItems: any[];
  onAddElement: (element: any, tag?: string) => void;
}) => {
  const [open, setOpen] = useState(false);
  const [searchValue, setSearchValue] = useState('');
  const [filteredElements, setFilteredElements] = useState<any[]>([]);

  const debouncedSearch = useCallback(
    debounce((searchTerm: string) => {
      if (searchTerm.length >= 2) {
        const filtered = allElements.filter(element =>
          element.name?.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !existingItems.some(existing => existing.id === element.id)
        );
        setFilteredElements(filtered);
      } else {
        setFilteredElements([]);
      }
    }, 300),
    [allElements, existingItems]
  );

  const handleSearch = (value: string) => {
    setSearchValue(value);
    debouncedSearch(value);
  };

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="secondary"
          className="fixed bottom-4 right-4 rounded-full w-12 h-12 p-0 shadow-lg"
        >
          <Plus className="w-6 h-6" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[400px] p-0" align="end">
        {/* @ts-ignore */}
        <Command>
          {/* @ts-ignore */}
          <CommandInput
            // @ts-ignore
            placeholder="Buscar en todos los elementos..."
            value={searchValue}
            onValueChange={handleSearch}
          />
          {/* @ts-ignore */}
          <CommandEmpty>
            {searchValue.length < 4
              ? "Ingrese al menos 4 caracteres"
              : "No se encontraron elementos"}
          </CommandEmpty>
          {/* @ts-ignore */}
          <CommandGroup>
            {/* @ts-ignore */}
            <CommandList>
              {filteredElements.map((element: any) => (
                // @ts-ignore
                <CommandItem
                  key={element.id}
                  onSelect={() => {
                    onAddElement(element);
                    setOpen(false);
                    setSearchValue('');
                  }}
                >
                  <Check className={cn("mr-2 h-4 w-4", "opacity-0")} />
                  {element.name}
                </CommandItem>
              ))}
            </CommandList>
          </CommandGroup>
        </Command>
      </PopoverContent>
    </Popover>
  );
});

================
File: app/presupuesto/page.tsx
================
'use client'

import React, { useEffect, useState, useCallback, Suspense, memo } from 'react'
import { useSearchParams } from 'next/navigation'
import { Plus, House, PanelsTopLeft, Box, FolderPlus, Save, FilePenLine, BookLock, BookIcon, BookLockIcon, FolderOpen } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card } from '@/components/ui/card'
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { PresupuestoSection } from '@/components/presupuesto/PresupuestoSection'
import { SearchDialog } from '@/components/presupuesto/SearchDialog'
import { debounce } from 'lodash'
import { motion, AnimatePresence } from 'framer-motion'
import { cn } from '@/lib/utils'

// Remove SWR import and add localStorage helper functions
const CACHE_KEY_PREFIX = 'presupuesto_cache_'
const CACHE_DURATION = 1000 * 60 * 30 // 30 minutes

const getCacheKey = (ids: string[]) => `${CACHE_KEY_PREFIX}${ids.join(',')}`

const getFromCache = (key: string) => {
  try {
    const item = localStorage.getItem(key)
    if (!item) return null

    const { data, timestamp } = JSON.parse(item)
    const now = new Date().getTime()

    if (now - timestamp > CACHE_DURATION) {
      localStorage.removeItem(key)
      return null
    }

    return data
  } catch (error) {
    return null
  }
}

const saveToCache = (key: string, data: any) => {
  try {
    const item = {
      data,
      timestamp: new Date().getTime()
    }
    localStorage.setItem(key, JSON.stringify(item))
  } catch (error) {
    console.error('Error saving to cache:', error)
  }
}

interface TagObject {
  tags: {
    name: string;
  };
}

interface TableItem {
  id: string | number
  name: string
  unit: string
  quantity: number
  unitPrice: number
  totalPrice: number
  price: number
  category: string
  accumulated?: string | number
  parcial?: string | number
  rubro?: string | number
  element_tags?: { tags: { name: string } }[]
  originalUnit?: string
  originalQuantity?: number
  originalUnitPrice?: number
  targetSection?: string
  nombre?: string // Add this for backward compatibility
}

interface GroupedData {
  [tag: string]: TableItem[]
}

interface AddSectionDialogProps {
  onAdd: (sectionName: string) => void
}

function AddSectionDialog({ onAdd }: AddSectionDialogProps) {
  const [open, setOpen] = useState(false)
  const [sectionName, setSectionName] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (sectionName.trim()) {
      onAdd(sectionName.trim())
      setSectionName('')
      setOpen(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button
          type="button"
          variant="outline"
          size="icon"
          className="h-8 w-full"
        >
          <Plus className="w-4 h-4" />
          Agregar Sección
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Agregar Nueva Sección</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <Input
            placeholder="Nombre de la sección"
            value={sectionName}
            onChange={(e) => setSectionName(e.target.value)}
            autoFocus
          />
          <Button type="submit" className="w-full">
            Agregar Sección
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  )
}

function PresupuestoContent() {
  const searchParams = useSearchParams()
  const idsParam = searchParams.get('selectedIds') ?? ''
  const ids = React.useMemo(() => idsParam.split(',').filter(Boolean), [idsParam])

  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [data, setData] = useState<GroupedData>({})
  const [newSections, setNewSections] = useState<Set<string>>(new Set())
  const [allElements, setAllElements] = useState<TableItem[]>([])
  const [previewVersion, setPreviewVersion] = useState<string | boolean>('false')
  const [isGlobalSearchOpen, setIsGlobalSearchOpen] = useState(false)
  const [newSectionName, setNewSectionName] = useState('')
  const [isAddSectionOpen, setIsAddSectionOpen] = useState(false)
  const [isScrolled, setIsScrolled] = useState(false)

  // Handle global element selection
  const handleGlobalElementSelect = (elements: TableItem[]) => {
    elements.forEach(element => {
      if (!element.targetSection) {
        setError('Por favor seleccione una sección para todos los elementos')
        return
      }
      addElementToSection(element.targetSection, element)
    })
    setIsGlobalSearchOpen(false)
  }

  // Handle adding new section
  const handleAddSection = (e: React.FormEvent) => {
    e.preventDefault()
    if (newSectionName.trim()) {
      addNewSection(newSectionName.trim())
      setNewSectionName('')
      setIsAddSectionOpen(false)
    }
  }

  // Fetch all elements on mount
  useEffect(() => {
    const fetchElements = async () => {
      try {
        const response = await fetch('/api/presupuestos/tableData')
        if (!response.ok) throw new Error('Error al cargar los elementos.')
        const elements = await response.json()

        const elementsAsArray = Object.values(elements).flat()

        console.log('elementsAsArray', elementsAsArray)
        console.log('ids', ids)
        // Filter elements based on selectedIds
        const filteredElements = elementsAsArray.filter((element: any) => {
          return ids.includes(String(element.id));
        });

        // Transform only the filtered elements
        console.log('filteredElements', filteredElements)
        const transformedElements = filteredElements.map((element: any) => ({
          id: element.id,
          name: element.nombre || element.name || 'Sin descripción',
          unit: element.unidad || element.unit || '',
          quantity: element.cantidad || 0,
          unitPrice: element.precio || element.price || 0,
          totalPrice: (element.cantidad || 0) * (element.precio || 0),
          price: element.precio || element.price || 0,
          category: element.category || 'Sin categoría',
          parcial: 0,
          rubro: 0,
          accumulated: 0,
        }))

        // Group filtered elements by their tags
        const groupedElements = transformedElements.reduce((acc: GroupedData, element: TableItem) => {
          if (element.category) {
            const tagName = element.category
            if (!acc[tagName]) {
              acc[tagName] = []
            }
            acc[tagName].push(element)
          }
          return acc
        }, {})

        setAllElements(elementsAsArray as TableItem[])
        console.log('groupedElements', groupedElements)
        setData(groupedElements)
      } catch (err) {
        console.error('Error fetching elements:', err)
        setError('Error al cargar los elementos disponibles.')
      }
    }
    fetchElements()
  }, [ids])

  // Load data from localStorage on initial render
  useEffect(() => {
    const savedData = localStorage.getItem('presupuesto_table_data')
    console.log('savedData', savedData)
    if (savedData) {
      try {
        const parsedData = JSON.parse(savedData)
        setData(parsedData)
      } catch (error) {
        console.error('Error loading data from localStorage:', error)
      }
    }
  }, [])

  // Save data to localStorage whenever it changes
  useEffect(() => {
    if (Object.keys(data).length > 0) {
      localStorage.setItem('presupuesto_table_data', JSON.stringify(data))
    }
  }, [data])

  // -----------------------------
  //   Update Data in state
  // -----------------------------
  const updateData = (
    tag: string,
    itemId: string | number,
    key: keyof TableItem,
    newValue: string
  ) => {
    setData(prev => {
      const newData = { ...prev }
      const arr = newData[tag] || []
      const itemIndex = arr.findIndex(it => String(it.id) === String(itemId))
      if (itemIndex > -1) {
        const oldItem = arr[itemIndex]
        newData[tag] = [
          ...arr.slice(0, itemIndex),
          { ...oldItem, [key]: newValue },
          ...arr.slice(itemIndex + 1),
        ]
      }
      return newData
    })
  }

  // Add element to a section
  const addElementToSection = (tag: string, element: any) => {
    setData(prev => {
      const newData = { ...prev }
      if (!newData[tag]) {
        newData[tag] = []
      }
      newData[tag] = [
        ...newData[tag],
        {
          id: element.id,
          name: element.nombre || element.name || 'Sin descripción',
          unit: element.unidad || element.unit || '',
          quantity: element.cantidad || 0,
          unitPrice: element.precio || element.price || 0,
          totalPrice: (element.cantidad || 0) * (element.precio || 0),
          price: element.precio || element.price || 0,
          category: element.category || 'Sin categoría',
          parcial: 0,
          rubro: 0,
          accumulated: 0,
        },
      ]
      return newData
    })
  }

  // -----------------------------
  //   Delete row from a tag
  // -----------------------------
  const handleDeleteRow = (tag: string, itemId: string | number) => {
    setData(prev => {
      const newData = { ...prev }
      newData[tag] = newData[tag]?.filter(item => String(item.id) !== String(itemId)) || []
      return newData
    })
  }

  // -----------------------------
  //   Handle Form Submit
  // -----------------------------
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Assume 'data' is your form data state
    console.log('Original data:', data);

    // Inject obraId: 100 into the data
    const dataWithObraId = {
      data: { ...data },
      obraId: 781, // Adding default obraId
    };

    console.log('Data with obraId:', dataWithObraId);

    // Serialize the data to JSON
    const jsonData = JSON.stringify(dataWithObraId);
    console.log('Serialized JSON:', jsonData);

    try {
      const response = await fetch('/api/presupuestos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al guardar los datos.');
      }

      const result = await response.json();
      console.log('Save successful:', result);
      // Optionally, show a success message to the user
      alert('Presupuesto creado exitosamente!');
    } catch (error) {
      console.error('Error saving data:', error);
      setError('Error al guardar los datos.');
    }
  };

  const addNewSection = (sectionName: string) => {
    // Create new section
    const newData = { ...data }
    newData[sectionName] = []

    // Sort sections alphabetically
    const sortedData = Object.fromEntries(
      Object.entries(newData).sort(([a], [b]) => a.localeCompare(b))
    )

    setData(sortedData)
    setNewSections(prev => new Set(prev).add(sectionName))

    // Scroll to new section after a brief delay to ensure render
    setTimeout(() => {
      const sectionElement = document.getElementById(`section-${sectionName}`)
      if (sectionElement) {
        sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' })
      } else {
        console.error(`Section with id section-${sectionName} not found`)
      }
    }, 100)
  }

  // Calculate grand total and section rubros together for better accuracy
  const { grandTotal, sectionRubros } = React.useMemo(() => {
    const total = Object.values(data).reduce((total, items) => {
      if (!Array.isArray(items)) return total;
      return total + items.reduce((sectionTotal, item) =>
        sectionTotal + ((item.quantity || 0) * (item.unitPrice || 0)), 0
      );
    }, 0);

    const rubros = Object.entries(data).map(([tag, items]) => {
      if (!Array.isArray(items)) return 0;

      const sectionTotal = items.reduce((sum, item) => {
        const itemTotal = (item.quantity || 0) * (item.unitPrice || 0);
        // Avoid division by zero and ensure proper percentage calculation
        return sum + (itemTotal || 0);
      }, 0);

      // Calculate percentage only if there's a valid total
      return total > 0 ? (sectionTotal * 100 / total) : 0;
    });

    return { grandTotal: total, sectionRubros: rubros };
  }, [data]);

  // Calculate running total (IACUM) for each section
  const sectionIacums = React.useMemo(() => {
    let runningTotal = 0;
    return sectionRubros.map(rubro => {
      runningTotal += (rubro || 0); // Ensure we handle null/undefined values
      return Number(runningTotal.toFixed(2)); // Round to 2 decimal places
    });
  }, [sectionRubros]);

  // Update the scroll detection useEffect
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0);
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Check initial scroll position

    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  console.log('data', data)

  // -----------------------------
  //   Render
  // -----------------------------
  return (
    <div className='flex items-start justify-center gap-8 relative'>
      <div className='flex flex-col gap-2 mb-16'>
        <AnimatePresence mode="wait">
          <Tabs defaultValue="tab-1" className={cn("sticky top-0 z-10 p-3 pt-5 -mt-5", isScrolled ? "-ml-20" : "w-1/2")}>
            {!isScrolled ? (
              <TabsList>
                <motion.div
                  key="expanded"
                  className="bg-muted rounded-lg flex"
                >
                  <span className='w-full'>
                    <TabsTrigger value="tab-1" className="py-2 w-full justify-start" asChild onClick={() => setPreviewVersion('false')}>
                      <motion.button
                        className={cn(
                          "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                          "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                          "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                          "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                          // custom
                          "gap-1.5 group relative",
                        )}>
                        <motion.div layoutId="icon-1" className="flex-shrink-0">
                          <FilePenLine size={16} strokeWidth={2} aria-hidden="true" />
                        </motion.div>
                        <motion.div layoutId="text-1" className="flex-shrink-0">
                          <motion.span
                            initial={{ opacity: 1 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.15 }}
                            className="ml-1.5"
                          >
                            Modo Editable
                          </motion.span>
                        </motion.div>
                      </motion.button>
                    </TabsTrigger>
                  </span>
                  <span className='w-full'>
                    <TabsTrigger value="tab-2" className="py-2 w-full justify-start" asChild onClick={() => setPreviewVersion('true')}>
                      <motion.button
                        className={cn(
                          "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                          "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                          "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                          "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                          // custom
                          "gap-1.5 group relative",
                        )}>
                        <motion.div layoutId="icon-2" className="flex-shrink-0">
                          <BookIcon size={16} strokeWidth={2} aria-hidden="true" />
                        </motion.div>
                        <motion.div layoutId="text-2" className="flex-shrink-0">
                          <motion.span
                            initial={{ opacity: 1 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.15 }}
                            className="ml-1.5"
                          >
                            Vista Previa (Total)
                          </motion.span>
                        </motion.div>
                      </motion.button>
                    </TabsTrigger>
                  </span>
                  <span className='w-full'>
                    <TabsTrigger value="tab-3" className="py-2 w-full justify-start" asChild onClick={() => setPreviewVersion('parcial')}>
                      <motion.button
                        className={cn(
                          "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                          "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                          "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                          "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                          // custom
                          "gap-1.5 group relative",
                        )}>
                        <motion.div layoutId="icon-3" className="flex-shrink-0">
                          <BookLockIcon size={16} strokeWidth={2} aria-hidden="true" />
                        </motion.div>
                        <motion.div layoutId="text-3" className="flex-shrink-0">
                          <motion.span
                            initial={{ opacity: 1 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.15 }}
                            className="ml-1.5"
                          >
                            Vista Previa (Parcial)
                          </motion.span>
                        </motion.div>
                      </motion.button>
                    </TabsTrigger>
                  </span>
                  <span className='w-full'>
                    {/* <TabsTrigger value="tab-4" className="py-2 w-full justify-start" asChild onClick={() => setPreviewVersion('medicion')}>
                      <motion.button
                        className={cn(
                          "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                          "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                          "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                          "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                          // custom
                          "gap-1.5 group relative",
                        )}>
                        <motion.div layoutId="icon-4" className="flex-shrink-0">
                          <FilePenLine size={16} strokeWidth={2} aria-hidden="true" />
                        </motion.div>
                        <motion.div layoutId="text-4" className="flex-shrink-0">
                          <motion.span
                            initial={{ opacity: 1 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.15 }}
                            className="ml-1.5"
                          >
                            Medición
                          </motion.span>
                        </motion.div>
                      </motion.button>
                    </TabsTrigger> */}
                  </span>
                </motion.div>
              </TabsList>
            ) : (
              <TabsList className="flex-col">
                <motion.div
                  key="collapsed"
                  layoutId="tabs-list"
                  transition={{
                    duration: 0.3,
                    width: { duration: 0.2, ease: "easeInOut" },
                    height: { duration: 0.2, ease: "easeInOut", delay: 0.1 }
                  }}
                  className='bg-muted rounded-lg flex flex-col'
                >
                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="tab-1" className="py-3" asChild onClick={() => setPreviewVersion('false')}>
                            <motion.button
                              className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                                "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                                "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                                "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                                // custom
                                "gap-1.5 group relative",
                              )}>
                              <motion.div layoutId="icon-1" className="flex-shrink-0">
                                <FilePenLine size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                              <motion.div layoutId="text-1" className="flex-shrink-0 -mr-1.5">
                                <motion.span
                                  initial={{ opacity: 0, width: 0 }}
                                  animate={{ opacity: 0, width: 0 }}
                                  transition={{ duration: 0.15 }}
                                  className="hidden"
                                />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Modo Editable
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="tab-2" className="py-3" asChild onClick={() => setPreviewVersion('true')}>
                            <motion.button
                              className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                                "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                                "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                                "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                                // custom
                                "gap-1.5 group relative",
                              )}>
                              <motion.div layoutId="icon-2" className="flex-shrink-0">
                                <BookIcon size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                              <motion.div layoutId="text-2" className="flex-shrink-0 -mr-1.5">
                                <motion.span
                                  initial={{ opacity: 0, width: 0 }}
                                  animate={{ opacity: 0, width: 0 }}
                                  transition={{ duration: 0.15 }}
                                  className="hidden"
                                />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Vista Previa (Total)
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="tab-3" className="py-3" asChild onClick={() => setPreviewVersion('parcial')}>
                            <motion.button
                              className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                                "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                                "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                                "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                                // custom
                                "gap-1.5 group relative",
                              )}>
                              <motion.div layoutId="icon-3" className="flex-shrink-0">
                                <BookLockIcon size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                              <motion.div layoutId="text-3" className="flex-shrink-0 -mr-1.5">
                                <motion.span
                                  initial={{ opacity: 0, width: 0 }}
                                  transition={{ duration: 0.15 }}
                                  animate={{ opacity: 0, width: 0 }}
                                  className="hidden"
                                />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Vista Previa (Parcial)
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="tab-4" className="py-3" asChild onClick={() => setPreviewVersion('medicion')}>
                            <motion.button
                              className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                                "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                                "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                                "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                                // custom
                                "gap-1.5 group relative",
                              )}>
                              <motion.div layoutId="icon-4" className="flex-shrink-0">
                                <FilePenLine size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                              <motion.div layoutId="text-4" className="flex-shrink-0 -mr-1.5">
                                <motion.span
                                  initial={{ opacity: 0, width: 0 }}
                                  transition={{ duration: 0.15 }}
                                  animate={{ opacity: 0, width: 0 }}
                                  className="hidden"
                                />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Medición
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </motion.div>
              </TabsList>
            )}
          </Tabs>
        </AnimatePresence>

        {/* Global Search Dialog */}
        <SearchDialog
          isOpen={isGlobalSearchOpen}
          onOpenChange={setIsGlobalSearchOpen}
          onElementSelect={handleGlobalElementSelect}
          sections={Object.keys(data)}
          elements={allElements}
        />

        <form className="max-w-[1000px] min-w-[1000px] p-6 bg-white rounded-xl shadow-lg relative border">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-2xl font-bold text-gray-800 mb-4">
              Ministerio de Obras y Servicios Públicos
            </h1>
            <Card className="text-gray-600 flex flex-col justify-center items-start p-2 px-4">
              <p className="mb-2">{`Obra: `}
                <b>
                  COMISARIA LAGUNA BRAVA - Obra Nueva 1226
                </b>
              </p>
              <p>{`Ubicacion: `}
                <b>
                  CORRIENTES CAPITAL
                </b>
              </p>
            </Card>

            <h2 className="mt-4 text-lg font-bold uppercase underline">
              Planilla de Presupuesto e Incidencias
            </h2>
          </div>

          {loading && <p className="text-center text-gray-600">Cargando...</p>}
          {error && <p className="text-center text-red-600">{error}</p>}

          {/* The main table */}
          {!loading && !error && (
            <div className="rounded-lg border-none border-gray-200 space-y-8">
              {Object.entries(data).map(([tag, items], tagIndex) => (
                <PresupuestoSection
                  key={tag}
                  tag={tag}
                  tagIndex={tagIndex}
                  items={items}
                  previewVersion={previewVersion}
                  grandTotal={grandTotal}
                  sectionRubros={sectionRubros}
                  sectionIacums={sectionIacums}
                  addElementToSection={addElementToSection}
                  updateData={updateData}
                  handleDeleteRow={handleDeleteRow}
                  isNewSection={newSections.has(tag)}
                  allElements={allElements}
                  highlightChanges={previewVersion === 'false'}
                />
              ))}
            </div>
          )}

          {/* Footer */}
          <div className="text-sm text-center mt-2">
            <p>Página 1 de 1</p>
          </div>
        </form>
      </div>

      <div className='flex flex-col justify-between gap-8 mt-16 sticky top-5 z-10'>
        <div className='flex flex-col gap-2'>

          <Dialog>
            <DialogTrigger asChild>
              <Button
                type="button"
                variant="secondary"
                className="h-9 w-full justify-start px-3"
              >
                <FolderOpen className="w-4 h-4" />
                Seleccionar Obra
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Seleccionar Obra</DialogTitle>
              </DialogHeader>

              <DialogFooter>
                <Button type="button">
                  Confirmar
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
          <Button
            type="button"
            variant="secondary"
            className="h-9 w-full justify-start px-3"
            onClick={() => setIsGlobalSearchOpen(true)}
          >
            <Plus className="w-4 h-4" />
            Agregar Elemento
          </Button>
          <Dialog open={isAddSectionOpen} onOpenChange={setIsAddSectionOpen}>
            <DialogTrigger asChild>
              <Button
                type="button"
                variant="secondary"
                className="h-9 w-full justify-start px-3"
              >
                <FolderPlus className="w-4 h-4" />
                Agregar Sección
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Agregar Nueva Sección</DialogTitle>
              </DialogHeader>
              <form onSubmit={handleAddSection} className="space-y-4">
                <Input
                  placeholder="Nombre de la sección"
                  value={newSectionName}
                  onChange={(e) => setNewSectionName(e.target.value)}
                  autoFocus
                />
                <Button type="submit" className="w-full">
                  Agregar Sección
                </Button>
              </form>
            </DialogContent>
          </Dialog>
        </div>

        <Button
          type="submit"
          variant="default"
          className="h-9 w-full justify-start px-3"
          onClick={handleSubmit}
        >
          <Save className="w-4 h-4" />
          Guardar Presupuesto
        </Button>
      </div>
    </div>
  )
}

// Main component
export default function PresupuestoPage() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <PresupuestoContent />
    </Suspense>
  )
}

/**
 * A simple inline-edit <input> cell that highlights the field if the user edits it
 * and shows a tooltip with the original value.
 *
 * The new prop `highlightChange` tells the component whether to highlight modifications.
 */
function EditableInput({
  value: initialValue,
  onChange,
  suffix = "",
  prefix = "",
  highlightChange = true,
}: {
  value: string | number;
  onChange: (val: string) => void;
  suffix?: string;
  prefix?: string;
  highlightChange?: boolean;
}) {
  const [value, setValue] = useState(String(initialValue));

  // Determine if the field was edited (only check if highlighting is enabled)
  const isEdited = highlightChange && String(initialValue) !== value;

  useEffect(() => {
    setValue(String(initialValue));
  }, [initialValue]);

  const handleBlur = () => {
    onChange(value);
  };

  const inputElement = (
    <input
      className={`border-b border-transparent group-hover:border-gray-300 group-focus:border-gray-300 focus:outline-none bg-transparent w-[50px] text-right focus-within:border-gray-300 ${isEdited ? "bg-yellow-100" : ""
        }`}
      value={value}
      onKeyDown={(e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          (e.target as HTMLInputElement).blur();
        }
      }}
      onChange={(e) => setValue(e.target.value)}
      onBlur={handleBlur}
    />
  );

  if (highlightChange && isEdited) {
    return (
      <div className="flex items-center justify-center gap-1">
        {prefix && <span className="text-sm text-gray-700">{prefix}</span>}
        <TooltipProvider delayDuration={0}>
          <Tooltip>
            <TooltipTrigger asChild>{inputElement}</TooltipTrigger>
            <TooltipContent side="top" className="px-2 py-1 text-xs">
              Original: {initialValue}
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        {suffix && <span className="text-sm text-gray-700">{suffix}</span>}
      </div>
    );
  }

  return (
    <div className="flex items-center justify-center gap-1">
      {prefix && <span className="text-sm text-gray-700">{prefix}</span>}
      {inputElement}
      {suffix && <span className="text-sm text-gray-700">{suffix}</span>}
    </div>
  );
}

================
File: app/presupuesto/types.ts
================
// Base item interface with common properties
export interface BaseItem {
	id: string | number;
	name: string;
	category: string;
}

// Presupuesto-specific item interface
export interface PresupuestoItem extends BaseItem {
	unit: string;
	price: number;
	quantity: number;
	unitPrice: number;
	totalPrice: number;
	accumulated?: string | number;
	parcial?: number;
	rubro?: string | number;
	element_tags?: Array<{ tags: { name: string } }>;
	originalUnit?: string;
}

// Medicion-specific item interface
export interface MedicionItem extends BaseItem {
	anterior: number;
	presente: number;
	acumulado: number;
}

// Grouped data interfaces
export interface GroupedPresupuestoData {
	[tag: string]: PresupuestoItem[];
}

export interface GroupedMedicionData {
	[tag: string]: MedicionItem[];
}

// Medicion data interfaces
export interface MedicionData {
	fecha: string;
	items: {
		itemId: string | number;
		anterior: number;
		presente: number;
		acumulado: number;
	}[];
}

export interface Medicion {
	id: number;
	presupuestoId: number;
	data: MedicionData;
	createdAt: string;
	updatedAt: string;
}

================
File: app/reactScanWrapper.tsx
================
'use client'
import { scan } from 'react-scan'; // import this BEFORE react
import { ReactNode } from 'react';

if (typeof window !== 'undefined') {
  scan({
    enabled: true,
    // log: true, // logs render info to console (default: false)
    // playSound: true,
    showToolbar: true,
    animationSpeed: 'slow',
  });
}

interface ReactScanWrapperProps {
  children: ReactNode;
}

const ReactScanWrapper = ({ children }: ReactScanWrapperProps) => {
  return (
    <>
      {children}
    </>
  );
};

export default ReactScanWrapper;

================
File: app/schema/page.tsx
================
'use client';
import React, { useState, useEffect, useRef, useCallback } from 'react';

// A simple Prisma schema parser.
function parsePrismaSchema(schemaString) {
  // List of common scalar types in Prisma.
  const scalarTypes = [
    'String',
    'Int',
    'Float',
    'Boolean',
    'DateTime',
    'Json'
  ];

  const nodes = [];
  const relationships = [];

  // Regex to capture content of each model block.
  // Matches "model <Name> { ... }"
  const modelRegex = /model\s+(\w+)\s*\{([\s\S]*?)\}/g;
  let match;
  while ((match = modelRegex.exec(schemaString)) !== null) {
    const modelName = match[1];
    const body = match[2];

    // Split body by newline and trim.
    const lines = body
      .split('\n')
      .map((line) => line.trim())
      .filter(
        (line) =>
          line &&
          !line.startsWith('//') &&
          !line.startsWith('@@') &&
          !line.startsWith('generator') &&
          !line.startsWith('datasource')
      );

    const fields = [];
    lines.forEach((line) => {
      // Regex to split the field line into: name, type and attributes.
      const fieldRegex = /^(\w+)\s+([\w\[\]?]+)(.*)$/;
      const fieldMatch = fieldRegex.exec(line);
      if (fieldMatch) {
        const fieldName = fieldMatch[1];
        let fieldType = fieldMatch[2];
        const rest = fieldMatch[3].trim();

        // Check for optional (trailing ?)
        let isOptional = false;
        if (fieldType.endsWith('?')) {
          isOptional = true;
          fieldType = fieldType.slice(0, -1);
        }

        // Check if field is an array (list)
        let isArray = false;
        if (fieldType.endsWith('[]')) {
          isArray = true;
          fieldType = fieldType.slice(0, -2);
        }

        const field = {
          name: fieldName,
          type: fieldType,
          optional: isOptional,
          array: isArray,
          attributes: rest
        };

        fields.push(field);

        // Simple heuristic for relationship:
        if (!scalarTypes.includes(fieldType)) {
          relationships.push({
            from: modelName,
            via: fieldName,
            to: fieldType,
            type: isArray ? 'one-to-many' : 'one-to-one'
          });
        }
      }
    });

    nodes.push({ name: modelName, fields });
  }

  return { nodes, relationships };
}

// A Schema Node component with drag handle.
const SchemaNode = ({ title, fields, position, onDrag }) => {
  const nodeRef = useRef(null);
  const dragStartPos = useRef({ x: 0, y: 0 });
  const nodeStartPos = useRef({ x: 0, y: 0 });

  // Handler for mouse move while dragging.
  const handleMouseMove = useCallback(
    (e) => {
      const dx = e.clientX - dragStartPos.current.x;
      const dy = e.clientY - dragStartPos.current.y;
      const newPos = {
        x: nodeStartPos.current.x + dx,
        y: nodeStartPos.current.y + dy
      };
      onDrag(newPos);
    },
    [onDrag]
  );

  // Handler for mouse up to stop dragging.
  const handleMouseUp = useCallback(() => {
    // Remove event listeners when drag ends.
    window.removeEventListener('mousemove', handleMouseMove);
    window.removeEventListener('mouseup', handleMouseUp);
  }, [handleMouseMove]);

  const handleMouseDown = (e) => {
    // Record starting positions.
    dragStartPos.current = { x: e.clientX, y: e.clientY };
    nodeStartPos.current = { ...position };
    // Attach event listeners.
    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('mouseup', handleMouseUp);
    // Prevent text selection while dragging.
    e.preventDefault();
  };

  return (
    <div
      ref={nodeRef}
      className="absolute bg-white rounded-lg shadow-lg border-2 border-blue-200"
      style={{
        left: position.x,
        top: position.y,
        width: '220px',
        height: '300px',
        overflowY: 'auto'
      }}
    >
      {/* Drag Handle */}
      <div
        onMouseDown={handleMouseDown}
        className="bg-blue-500 text-white rounded-t-lg p-2 cursor-move flex justify-between items-center"
        style={{ userSelect: 'none' }} // Prevent text selection during drag
      >
        <h3 className="text-lg font-bold">{title}</h3>
        {/* Optional: Add an icon to indicate draggable area */}
        <svg
          xmlns="http://www.w3.org/2000/svg"
          className="h-5 w-5"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path d="M4 10a1 1 0 112 0 1 1 0 01-2 0zm5 0a1 1 0 112 0 1 1 0 01-2 0zm5 0a1 1 0 112 0 1 1 0 01-2 0z" />
        </svg>
      </div>
      {/* Node Content */}
      <div className="p-4 text-sm">
        {fields.map((field, index) => (
          <div
            key={index}
            className="py-1 border-b border-gray-100 last:border-b-0"
          >
            <div className="flex justify-between">
              <span className="font-medium">{field.name}</span>
              <span className="text-gray-600">{field.type}</span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

const SchemaVisualization = () => {
  const [schemaText, setSchemaText] = useState('Loading schema...');
  const [parsedData, setParsedData] = useState({
    nodes: [],
    relationships: []
  });
  const [nodePositions, setNodePositions] = useState({});
  const [containerOffset, setContainerOffset] = useState(null);
  const [hideIsolatedNodes, setHideIsolatedNodes] = useState(false);
  const containerRef = useRef(null);

  // Fetch schema on mount.
  useEffect(() => {
    fetch('/api/schema')
      .then((res) => res.json())
      .then((data) => {
        setSchemaText(data.schema);
      })
      .catch((error) => {
        console.error('Error fetching schema:', error);
        setSchemaText('Error loading schema');
      });
  }, []);

  // Parse schema and calculate grid positions.
  useEffect(() => {
    if (
      schemaText &&
      schemaText !== 'Loading schema...' &&
      schemaText !== 'Error loading schema'
    ) {
      const result = parsePrismaSchema(schemaText);
      const containerWidth =
        (containerRef.current && containerRef.current.clientWidth) ||
        window.innerWidth;
      const nodeWidth = 220; // same as in SchemaNode.
      const nodeHeight = 300;
      const spacingX = 50;
      const spacingY = 50;
      const maxPerRow = Math.floor(
        (containerWidth - spacingX) / (nodeWidth + spacingX)
      );
      const positions = {};
      result.nodes.forEach((node, index) => {
        const row = Math.floor(index / maxPerRow);
        const col = index % maxPerRow;
        positions[node.name] = {
          x: spacingX + col * (nodeWidth + spacingX),
          y: spacingY + row * (nodeHeight + spacingY)
        };
      });
      setParsedData(result);
      setNodePositions(positions);
    }
  }, [schemaText, containerOffset]);

  useEffect(() => {
    const updateContainerOffset = () => {
      if (containerRef.current) {
        const rect = containerRef.current.getBoundingClientRect();
        setContainerOffset({ x: rect.x, y: rect.y });
      }
    };

    updateContainerOffset();
    window.addEventListener('resize', updateContainerOffset);
    return () =>
      window.removeEventListener('resize', updateContainerOffset);
  }, []);

  const updatePosition = (nodeName, newPos) => {
    setNodePositions((prev) => ({
      ...prev,
      [nodeName]: newPos
    }));
  };

  // Helper to determine which nodes are isolated.
  const getFilteredNodes = () => {
    if (!hideIsolatedNodes) return parsedData.nodes;
    const connectedNodes = new Set();
    parsedData.relationships.forEach((rel) => {
      connectedNodes.add(rel.from);
      connectedNodes.add(rel.to);
    });
    return parsedData.nodes.filter((node) => connectedNodes.has(node.name));
  };

  const drawRelationshipLines = () => {
    if (!containerOffset) return null;
    // Only draw if all nodes have measured positions.
    if (
      Object.keys(nodePositions).length !== parsedData.nodes.length
    )
      return null;
    return parsedData.relationships.map((rel, index) => {
      // Only draw if both nodes are visible.
      if (!(rel.from in nodePositions) || !(rel.to in nodePositions))
        return null;
      const from = nodePositions[rel.from];
      const to = nodePositions[rel.to];
      const midX = (from.x + to.x) / 2;
      const midY = (from.y + to.y) / 2;
      const curve = `M ${from.x + 110} ${from.y} Q ${midX + 110} ${from.y} ${midX + 110} ${midY} T ${to.x + 110} ${to.y}`;
      return (
        <g key={index}>
          <path
            id={`path-${index}`}
            d={curve}
            fill="none"
            stroke="#94a3b8"
            strokeWidth="2"
            className="opacity-50"
          />
          <text>
            <textPath
              href={`#path-${index}`}
              startOffset="50%"
              className="text-sm fill-gray-600"
              textAnchor="middle"
            >
              {rel.via ? rel.via : rel.type}
            </textPath>
          </text>
          <path
            d={`M ${to.x + 110 - 5} ${to.y - 5} L ${to.x + 110
              } ${to.y} L ${to.x + 110 - 5} ${to.y + 5}`}
            fill="none"
            stroke="#94a3b8"
            strokeWidth="2"
          />
        </g>
      );
    });
  };

  // Get filtered nodes for rendering.
  const filteredNodes = getFilteredNodes();

  return (
    <div className="relative" style={{ height: '100vh' }}>
      <div className="p-4">
        <label className="inline-flex items-center">
          <input
            type="checkbox"
            className="form-checkbox"
            checked={hideIsolatedNodes}
            onChange={(e) => setHideIsolatedNodes(e.target.checked)}
          />
          <span className="ml-2">Hide nodes with no relationships</span>
        </label>
      </div>
      <div
        ref={containerRef}
        className="relative w-full h-full bg-gray-50 overflow-hidden"
      >
        <svg
          className="absolute top-0 left-0 w-full h-full pointer-events-none"
        >
          {drawRelationshipLines()}
        </svg>
        {filteredNodes.map((node) => (
          <SchemaNode
            key={node.name}
            title={node.name}
            fields={node.fields}
            position={nodePositions[node.name] || { x: 0, y: 0 }}
            onDrag={(newPos) => updatePosition(node.name, newPos)}
          />
        ))}
      </div>
    </div>
  );
};

export default SchemaVisualization;

================
File: app/uitest/button/page.tsx
================
import { Button } from "@/components/ui/button";
import { CogIcon, Plus, Shapes, Zap } from "lucide-react";
import React from "react";

export default function Playground() {
  return (
    <div>

      <div style={{ padding: "1rem" }} className="flex gap-2">
        <Button variant="default" className="w-8"><Plus /></Button>
        <Button variant="default">Default</Button>
        <Button variant="destructive">destructive</Button>
        <Button variant="outline">outline</Button>
        <Button variant="link">link</Button>
        <Button variant="outline">outline</Button>
        <Button variant="ghost">ghost</Button>
        {/* Add more button variations as needed */}
      </div>
      <div style={{ padding: "1rem" }} className="flex gap-2">
        <Button variant="secondary">Secondary</Button>
        <Button variant="ghost">tertiary</Button>
        <Button variant="destructive">destructiveSecondary</Button>
        <Button variant="outline">successSecondary</Button>
        <Button variant="secondary">alertSecondary</Button>
      </div>
      <div style={{ padding: "1rem" }} className="flex gap-2 mt-10">
        <Button variant="secondary">custom</Button>
        <Button variant="ghost"><Zap /> Zap</Button>
        <Button variant="secondary"><CogIcon /></Button>
        <Button variant="secondary">Log In</Button>
        <Button variant="default">
          <Shapes />
          Buy Icons
        </Button>
        {/* Add more button variations as needed */}
      </div>
    </div>
  );
}

================
File: app/uitest/card/page.tsx
================
'use client';

import React from 'react';
import { FaGlobe, FaPhoneAlt, FaTv, FaWifi, FaCogs, FaArrowRight, FaCheck, FaExclamationTriangle } from 'react-icons/fa';
import Tooltip from './Tooltip';

interface Step {
  status: string;
  tooltip: string;
}

interface ServiceStatus {
  status: string;
  tooltip?: string;
  value?: string;
}

interface ServiceData {
  name: string;
  wan: ServiceStatus;
  dsLiteIMS: ServiceStatus;
  tunnel: {
    steps: Step[];
    summary: string;
  };
  aftrIMS: ServiceStatus;
}

interface ServiceCardProps {
  service: ServiceData;
}

const ServiceCard: React.FC<ServiceCardProps> = ({ service }) => {
  const {
    name,
    wan,
    dsLiteIMS,
    tunnel,
    aftrIMS,
  } = service;

  const getServiceIcon = (serviceName: string) => {
    switch (serviceName.toLowerCase()) {
      case 'web':
        return <FaGlobe className="text-3xl" />;
      case 'voice':
        return <FaPhoneAlt className="text-3xl" />;
      case 'video':
        return <FaTv className="text-3xl" />;
      default:
        return <FaCogs className="text-3xl" />;
    }
  };

  const statusColor = (status: string) => {
    return status === "Connected" || status === "Configured"
      ? "text-green-500"
      : "text-red-500";
  };

  return (
    <div className="bg-white shadow rounded-lg p-4 transition-transform hover:scale-105">
      <div className="flex items-center space-x-4 mb-3">
        <div>{getServiceIcon(name)}</div>
        <h2 className="text-xl font-semibold">{name}</h2>
      </div>
      <div className="space-y-2">
        <div className="flex items-center space-x-2">
          <FaWifi />
          <span className="font-medium">WAN Setup:</span>
          <span className={statusColor(wan.status)}>
            {wan.status}
          </span>
          {wan.tooltip && (
            <Tooltip text={wan.tooltip}>
              <FaCogs className="text-gray-400" />
            </Tooltip>
          )}
        </div>
        <div className="flex items-center space-x-2">
          <FaCogs />
          <span className="font-medium">DS-Lite/IMS:</span>
          <span className={statusColor(dsLiteIMS.status)}>
            {dsLiteIMS.status}
          </span>
          {dsLiteIMS.tooltip && (
            <Tooltip text={dsLiteIMS.tooltip}>
              <FaCogs className="text-gray-400" />
            </Tooltip>
          )}
        </div>
        <div className="flex items-center space-x-2">
          <span className="font-medium">Tunnel:</span>
          <div className="flex items-center space-x-1">
            {tunnel.steps.map((step, idx) => (
              <Tooltip key={idx} text={step.tooltip}>
                <span>
                  {step.status === "Connected" ? (
                    <FaCheck className="text-green-500" />
                  ) : step.status === "Error" || step.status === "Failed" ? (
                    <FaExclamationTriangle className="text-red-500" />
                  ) : (
                    <FaArrowRight className="text-gray-500" />
                  )}
                </span>
              </Tooltip>
            ))}
          </div>
          <span className="ml-2 text-sm">{tunnel.summary}</span>
        </div>
        <div className="flex items-center space-x-2">
          <FaCogs />
          <span className="font-medium">AFTR/IMS:</span>
          <span className={statusColor(aftrIMS.status)}>
            {aftrIMS.status}
          </span>
          {aftrIMS.value && (
            <span className="text-sm text-gray-500">
              {aftrIMS.value}
            </span>
          )}
          {aftrIMS.tooltip && (
            <Tooltip text={aftrIMS.tooltip}>
              <FaCogs className="text-gray-400" />
            </Tooltip>
          )}
        </div>
      </div>
    </div>
  );
};

const sampleData: ServiceData[] = [
  {
    name: "Web",
    wan: {
      status: "Connected",
      tooltip: "IP: 192.168.1.2",
    },
    dsLiteIMS: {
      status: "Configured",
      tooltip: "IMS operational. IP: 10.0.0.2",
    },
    tunnel: {
      steps: [
        { status: "Connected", tooltip: "Step 1 passed" },
        { status: "Connected", tooltip: "Step 2 passed" },
        { status: "Connected", tooltip: "Step 3 passed" },
      ],
      summary: "Connected",
    },
    aftrIMS: {
      status: "Connected",
      value: "RegID: 5321",
      tooltip: "AFTR enabled and operational",
    },
  },
  {
    name: "Voice",
    wan: {
      status: "No IP Address",
      tooltip: "WAN not detected",
    },
    dsLiteIMS: {
      status: "No IP Address",
      tooltip: "No DS-Lite config",
    },
    tunnel: {
      steps: [
        { status: "Connected", tooltip: "Step 1 passed" },
        { status: "Failed", tooltip: "Failed at step 2" },
        { status: "Error", tooltip: "Error in step 3" },
      ],
      summary: "Errors detected",
    },
    aftrIMS: {
      status: "Failed",
      value: "",
      tooltip: "Registration failed",
    },
  },
  {
    name: "Video",
    wan: {
      status: "Connected",
      tooltip: "IP: 192.168.1.5",
    },
    dsLiteIMS: {
      status: "Configured",
      tooltip: "IMS operational. IP: 10.0.0.5",
    },
    tunnel: {
      steps: [
        { status: "Connected", tooltip: "Step 1 passed" },
        { status: "Connected", tooltip: "Step 2 passed" },
        { status: "Connected", tooltip: "Step 3 passed" },
      ],
      summary: "Connected",
    },
    aftrIMS: {
      status: "Connected",
      value: "RegID: 9876",
      tooltip: "AFTR functioning normally",
    },
  },
];

export default function Page() {
  const [services] = React.useState<ServiceData[]>(sampleData);
  const [filter, setFilter] = React.useState("");

  const filteredServices = services.filter((service) =>
    service.wan.status.toLowerCase().includes(filter.toLowerCase())
  );

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <header className="mb-6">
        <h1 className="text-3xl font-bold text-center">
          Service Monitoring Dashboard
        </h1>
      </header>
      <div className="mb-4 flex justify-end">
        <input
          type="text"
          placeholder="Filter WAN status..."
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring focus:border-blue-300"
        />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredServices.map((service, idx) => (
          <ServiceCard key={idx} service={service} />
        ))}
      </div>
    </div>
  );
}

================
File: app/uitest/card/Tooltip.tsx
================
import React, { ReactNode, useState } from 'react';

interface TooltipProps {
  text: string;
  children: ReactNode;
}

const Tooltip: React.FC<TooltipProps> = ({ text, children }) => {
  const [isVisible, setIsVisible] = useState(false);

  return (
    <div className="relative inline-block">
      <div
        onMouseEnter={() => setIsVisible(true)}
        onMouseLeave={() => setIsVisible(false)}
      >
        {children}
      </div>
      {isVisible && (
        <div className="absolute z-10 px-3 py-2 text-sm text-white bg-gray-800 rounded-lg shadow-lg -top-10 left-1/2 transform -translate-x-1/2">
          {text}
          <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1/2 rotate-45 w-2 h-2 bg-gray-800"></div>
        </div>
      )}
    </div>
  );
};

export default Tooltip;

================
File: app/uitest/page.tsx
================
import Component2 from "@/components/CustomTabs/comp-433";
import Component3 from "@/components/CustomTabs/comp-437";
import Component4 from "@/components/CustomTabs/comp-440";
import Component5 from "@/components/CustomTabs/comp-441";
import React from "react";

export default function Playground() {
  return (
    <div className="flex items-center justify-center">
      <div style={{ padding: "1rem" }} className="flex flex-col justify-center items-center w-[50vw] gap-5">
        {/* <Component /> */}
        433
        <Component2 />
        440<Component4 />
        441<Component5 />
        437<Component3 />

        {/* <Component6 /> */}
      </div>
    </div>
  );
}

================
File: app/upload-sql/page.tsx
================
"use client";

import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useToast } from "@/components/ui/use-toast";
import { Loader2 } from "lucide-react";

interface SQLResult {
  statement: string;
  success: boolean;
  error?: string;
}

interface FileUploadResult {
  fileName: string;
  results: SQLResult[];
}

export default function UploadSQLPage() {
  const [isDragging, setIsDragging] = useState(false);
  const [uploadingFiles, setUploadingFiles] = useState<Set<string>>(new Set());
  const [results, setResults] = useState<FileUploadResult[]>([]);
  const { toast } = useToast();

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = async (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragging(false);
    const files = Array.from(e.dataTransfer.files);
    await processFiles(files);
  };

  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    await processFiles(files);
  };

  const processFiles = async (files: File[]) => {
    if (files.length === 0) return;

    const validFiles = files.filter(file => {
      const ext = file.name.toLowerCase().split('.').pop();
      return ext === 'sql' || ext === 'csv';
    });

    if (validFiles.length === 0) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Por favor, sube solo archivos .sql o .csv",
      });
      return;
    }

    await uploadFiles(validFiles);
  };

  const uploadFiles = async (files: File[]) => {
    const MAX_FILE_SIZE = 20 * 1024 * 1024; // 10MB
    const invalidFiles = files.filter(file => file.size > MAX_FILE_SIZE);

    if (invalidFiles.length > 0) {
      toast({
        variant: "destructive",
        title: "Error",
        description: `Los siguientes archivos son demasiado grandes (máx. 10MB): ${invalidFiles.map(f => f.name).join(', ')}`,
      });
      return;
    }

    setUploadingFiles(prev => new Set([...prev, ...files.map(f => f.name)]));

    try {
      await Promise.all(files.map(async (file) => {
        try {
          const formData = new FormData();
          formData.append("file", file);

          const endpoint = file.name.toLowerCase().endsWith('.csv') ? '/api/upload-csv' : '/api/upload-sql';

          const response = await fetch(endpoint, {
            method: "POST",
            body: formData,
          });

          const data = await response.json();

          if (!response.ok) {
            throw new Error(data.error || "Error al procesar el archivo");
          }

          setResults(prev => [...prev, {
            fileName: file.name,
            results: data.results,
          }]);

          toast({
            title: "Éxito",
            description: `Archivo ${file.name} procesado correctamente`,
          });
        } catch (error) {
          toast({
            variant: "destructive",
            title: `Error en ${file.name}`,
            description: (error as Error).message,
          });
        } finally {
          setUploadingFiles(prev => {
            const next = new Set(prev);
            next.delete(file.name);
            return next;
          });
        }
      }));
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Error al procesar los archivos",
      });
    }
  };

  return (
    <div className="container mx-auto py-10">
      <h1 className="text-2xl font-bold mb-6">Subir Archivos SQL o CSV</h1>

      <div
        className={`border-2 border-dashed rounded-lg p-10 text-center mb-6 ${isDragging ? "border-primary bg-primary/10" : "border-gray-300"}`}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
      >
        <div className="mb-4">
          <p className="text-lg mb-2">
            Arrastra y suelta archivos SQL o CSV aquí o
          </p>
          <Button
            variant="outline"
            disabled={uploadingFiles.size > 0}
            onClick={() => document.getElementById('file-upload')?.click()}
          >
            Selecciona archivos
          </Button>
          <input
            id="file-upload"
            type="file"
            className="hidden"
            accept=".sql,.csv"
            multiple
            onChange={handleFileSelect}
            disabled={uploadingFiles.size > 0}
          />
        </div>
      </div>

      {uploadingFiles.size > 0 && (
        <div className="flex flex-col items-center justify-center gap-2 my-4">
          <div className="flex items-center gap-2">
            <Loader2 className="h-4 w-4 animate-spin" />
            <p>Procesando {uploadingFiles.size} archivo(s)...</p>
          </div>
          <div className="text-sm text-muted-foreground">
            {Array.from(uploadingFiles).join(', ')}
          </div>
        </div>
      )}

      {results.length > 0 && (
        <div className="space-y-4">
          <h2 className="text-xl font-semibold mb-4">Resultados</h2>
          {results.map((result, index) => (
            <Card key={index} className="p-4">
              <h3 className="font-medium mb-2">{result.fileName}</h3>
              <div className="space-y-2">
                {result.results.map((r: SQLResult, i: number) => (
                  <div
                    key={i}
                    className={`p-2 rounded ${r.success ? "bg-green-50" : "bg-red-50"}`}
                  >
                    <p className="font-mono text-sm break-all">
                      {r.statement}
                    </p>
                    {!r.success && (
                      <p className="text-red-600 text-sm mt-1">
                        Error: {r.error}
                      </p>
                    )}
                  </div>
                ))}
              </div>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: components/app-sidebar.tsx
================
"use client";

import * as React from "react";
import {
  AudioWaveform,
  Bot,
  BrainCogIcon,
  Coins,
  Command,
  DatabaseZapIcon,
  FilePlus,
  FlaskConicalIcon,
  FolderSearch2,
  Frame,
  GalleryVerticalEnd,
  HardHatIcon,
  House,
  LayoutTemplateIcon,
  Map,
  PieChart,
} from "lucide-react";

import { NavMain } from "@/components/nav-main";
import { NavProjects } from "@/components/nav-projects";
import { NavUser } from "@/components/nav-user";
import { TeamSwitcher } from "@/components/team-switcher";
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarRail,
} from "@/components/ui/sidebar";

// Modify the transform function to store icon keys
const transformDirectoryToNav = (
  structure: Record<string, any>,
  basePath: string = ""
): any[] => {
  const result: any[] = [];

  const findIconKey = (key: string) => {
    switch (key.toLowerCase()) {
      case "create":
        return "FilePlus";
      case "main":
        return "House";
      case "explore":
        return "FolderSearch2";
      case "api":
        return "BrainCogIcon";
      case "dashboard":
        return "LayoutTemplateIcon";
      case "db":
        return "DatabaseZapIcon";
      case "obras":
        return "HardHatIcon";
      case "presupuesto":
        return "Coins";
      case "uitest":
        return "FlaskConicalIcon";
      default:
        return "Bot"; // Default icon key
    }
  };

  for (const key in structure) {
    if (key === "files") continue;

    const folder = structure[key];
    const files = folder.files || [];
    const hasPageFile = files.includes("page.tsx");
    const subfolders = Object.keys(folder).filter(k => k !== "files");

    if (hasPageFile) {
      const iconKey = findIconKey(key);

      const items = transformDirectoryToNav(folder, `${basePath}/${key}`);
      result.push({
        title: capitalizeFirstLetter(key),
        url: `${basePath}/${key}`.replace(/\/+/g, "/"),
        iconKey: iconKey, // Store icon key
        items: [
          {
            title: "Main",
            url: `${basePath}/${key}`.replace(/\/+/g, "/"),
            iconKey: "House", // Use the Main icon key for the "Main" page
          },
          ...items
        ]
      });
    } else if (typeof folder === "object") {
      const iconKey = findIconKey(key);

      result.push({
        title: capitalizeFirstLetter(key),
        url: `${basePath}/${key}`.replace(/\/+/g, "/"),
        iconKey: iconKey, // Store icon key
        items: transformDirectoryToNav(folder, `${basePath}/${key}`)
      });
    }
  }

  return result;
}

// Map icon keys back to components
const iconMap = {
  FilePlus,
  House,
  FolderSearch2,
  BrainCogIcon,
  LayoutTemplateIcon,
  DatabaseZapIcon,
  HardHatIcon,
  Coins,
  FlaskConicalIcon,
  Bot
};
// Function to map icon keys back to components
const mapIconsToComponents = (navItems: { iconKey: keyof typeof iconMap; items: { iconKey: keyof typeof iconMap }[] }[]) => {
  return navItems.map(item => ({
    ...item,
    icon: iconMap[item.iconKey],
    items: item.items.map(subItem => ({
      ...subItem,
      icon: iconMap[subItem.iconKey]
    }))
  }));
};

const capitalizeFirstLetter = (string: string) => {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

export function AppSidebar({ mappedData }: { mappedData: { iconKey: keyof typeof iconMap; items: { iconKey: keyof typeof iconMap }[] }[] }) {

  const teams = [
    {
      name: "Acme Inc",
      logo: GalleryVerticalEnd,
      plan: "Enterprise",
    },
    {
      name: "Acme Corp.",
      logo: AudioWaveform,
      plan: "Startup",
    },
    {
      name: "Evil Corp.",
      logo: Command,
      plan: "Free",
    },
  ]

  const projects = [
    {
      name: "Design Engineering",
      url: "#",
      icon: Frame,
    },
    {
      name: "Sales & Marketing",
      url: "#",
      icon: PieChart,
    },
    {
      name: "Travel",
      url: "#",
      icon: Map,
    },
  ]

  const itemsWithIcons = mapIconsToComponents(mappedData)

  if (!mappedData) {
    return <Sidebar collapsible="icon" />;
  }

  return (
    <Sidebar collapsible="icon">
      <SidebarHeader>
        <TeamSwitcher teams={teams} />
      </SidebarHeader>
      <SidebarContent>
        <NavMain items={itemsWithIcons} />
        <NavProjects projects={projects} /> {/* Add projects if applicable */}
      </SidebarContent>
      <SidebarFooter>
        <NavUser user={{ name: "User", email: "user@example.com", avatar: "" }} />
      </SidebarFooter>
      <SidebarRail />
    </Sidebar>
  );
}

================
File: components/BudgetForm.tsx
================
"use client";

import React, { useState } from "react";
import { Input } from "./ui/input";
import { Button } from "./ui/button";
import { Label } from "./ui/label";

// Example type of what's being captured. Adjust as needed.
interface BudgetFormData {
  projectName: string;
  client: string;
  // Example data structures for associated items.
  // Each item can represent material, construction item, or specialized labor.
  associatedItems: Array<{
    id: number;
    description: string;
    quantity: number;
    cost: number;
  }>;
}

// Props for BudgetForm
interface BudgetFormProps {
  onSave: (data: BudgetFormData) => void; // Called when "Save" is clicked
}

export default function BudgetForm({ onSave }: BudgetFormProps) {
  const [projectName, setProjectName] = useState("");
  const [client, setClient] = useState("");
  const [associatedItems, setAssociatedItems] = useState<
    BudgetFormData["associatedItems"]
  >([
    {
      id: Date.now(),
      description: "",
      quantity: 0,
      cost: 0,
    },
  ]);

  // Handle addition of a new optional row
  const handleAddItem = () => {
    setAssociatedItems((prev) => [
      ...prev,
      {
        id: Date.now(),
        description: "",
        quantity: 0,
        cost: 0,
      },
    ]);
  };

  // Update an associated item by index
  const handleUpdateItem = (
    index: number,
    field: "description" | "quantity" | "cost",
    value: string | number
  ) => {
    const updatedItems = [...associatedItems];
    // Ensure numeric fields are converted
    (updatedItems[index][field] as string | number) =
      field === "quantity" || field === "cost" ? Number(value) : value;
    setAssociatedItems(updatedItems);
  };

  // Validate and submit form
  const handleSave = () => {
    if (!projectName.trim() || !client.trim()) {
      // Basic required field check
      alert("Please fill in the required fields.");
      return;
    }

    const data: BudgetFormData = {
      projectName,
      client,
      associatedItems,
    };
    onSave(data);
  };

  return (
    <div className="max-w-xl mx-auto p-4 space-y-4">
      <h2 className="text-xl font-bold">Budget Form</h2>

      {/* Project Name */}
      <div className="space-y-2">
        <Label htmlFor="projectName">Project Name*</Label>
        <Input
          id="projectName"
          placeholder="Enter project name"
          value={projectName}
          onChange={(e) => setProjectName(e.target.value)}
        />
      </div>

      {/* Client */}
      <div className="space-y-2">
        <Label htmlFor="client">Client*</Label>
        <Input
          id="client"
          placeholder="Enter client name"
          value={client}
          onChange={(e) => setClient(e.target.value)}
        />
      </div>

      {/* Associated Items */}
      <div className="space-y-2">
        <Label>Associated Items (materials, labor, etc.)</Label>
        {associatedItems.map((item, index) => (
          <div
            key={item.id}
            className="grid grid-cols-4 gap-2 items-center mb-2"
          >
            <Input
              placeholder="Description"
              value={item.description}
              onChange={(e) =>
                handleUpdateItem(index, "description", e.target.value)
              }
            />
            <Input
              placeholder="Quantity"
              type="number"
              value={item.quantity}
              onChange={(e) =>
                handleUpdateItem(index, "quantity", e.target.value)
              }
            />
            <Input
              placeholder="Cost"
              type="number"
              value={item.cost}
              onChange={(e) => handleUpdateItem(index, "cost", e.target.value)}
            />
          </div>
        ))}

        <Button variant="secondary" onClick={handleAddItem}>
          Add Another Row
        </Button>
      </div>

      {/* Save Button */}
      <div>
        <Button onClick={handleSave}>Save</Button>
      </div>
    </div>
  );
}

================
File: components/BudgetTable.tsx
================
"use client";

import React from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"; // Adjust import to your ShadCN setup
import { Button } from "./ui/button";

// Example data structure for a budget record
interface BudgetRecord {
  id: number;
  projectName: string;
  client: string;
  status: "draft" | "submitted" | "approved" | "rejected";
}

interface BudgetTableProps {
  budgets: BudgetRecord[];
  onEdit: (id: number) => void;
  onDelete: (id: number) => void;
}

export default function BudgetTable({
  budgets,
  onEdit,
  onDelete,
}: BudgetTableProps) {
  return (
    <div className="w-full p-4">
      <h2 className="text-xl font-bold mb-4">Existing Budgets</h2>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Project Name</TableHead>
            <TableHead>Client</TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {budgets.map((budget) => (
            <TableRow key={budget.id}>
              <TableCell>{budget.projectName}</TableCell>
              <TableCell>{budget.client}</TableCell>
              <TableCell>{budget.status}</TableCell>
              <TableCell className="flex gap-2">
                <Button variant="outline" onClick={() => onEdit(budget.id)}>
                  Edit
                </Button>
                <Button variant="destructive" onClick={() => onDelete(budget.id)}>
                  Delete
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}

================
File: components/CertificateForm.tsx
================
"use client";

import React, { useState } from "react";
import { Label } from "./ui/label";
import { Input } from "./ui/input";
import { Button } from "./ui/button";

interface CategoryProgress {
  id: number;
  category: string;
  percentage: number; // 0-100
  amount: number; // Calculated based on percentage
}

interface CertificateFormData {
  progressItems: CategoryProgress[];
}

// Example props
interface CertificateFormProps {
  onSave: (data: CertificateFormData) => void; // Called to generate monthly certificate
  // If you need to know cost per category, you can supply that as props:
  baseAmounts?: { [category: string]: number };
}

export default function CertificateForm({
  onSave,
  baseAmounts = {
    Excavation: 10000,
    Foundation: 20000,
    Framing: 30000,
  },
}: CertificateFormProps) {
  // Convert baseAmounts object into an array for easier mapping
  const initialItems = Object.entries(baseAmounts).map(([cat, base]) => ({
    id: Date.now() + Math.random(), // unique ID
    category: cat,
    percentage: 0,
    amount: 0,
  }));

  const [progressItems, setProgressItems] = useState<CategoryProgress[]>(
    initialItems
  );

  // Update progress percentage and recalc amount
  const handleChangePercentage = (
    index: number,
    newValue: string
  ) => {
    let valueNum = parseFloat(newValue);
    if (isNaN(valueNum)) valueNum = 0;
    if (valueNum > 100) valueNum = 100;

    setProgressItems((prev) => {
      const updated = [...prev];
      updated[index].percentage = valueNum;
      const baseCost = baseAmounts[updated[index].category] ?? 0;
      updated[index].amount = (baseCost * valueNum) / 100;
      return updated;
    });
  };

  // Sum all amounts
  const totalAmount = progressItems.reduce((acc, item) => acc + item.amount, 0);

  const handleSave = () => {
    onSave({ progressItems });
  };

  return (
    <div className="max-w-xl mx-auto p-4 space-y-4">
      <h2 className="text-xl font-bold">Certificate Form</h2>

      {progressItems.map((item, index) => (
        <div key={item.id} className="flex items-center gap-4 mb-2">
          <Label className="w-1/4">{item.category}</Label>
          <Input
            type="number"
            className="w-1/4"
            min={0}
            max={100}
            value={item.percentage}
            onChange={(e) => handleChangePercentage(index, e.target.value)}
          />
          <div className="w-1/4">
            {item.amount.toFixed(2)}
          </div>
        </div>
      ))}

      <div className="flex justify-between font-semibold">
        <span>Total Amount:</span>
        <span>${totalAmount.toFixed(2)}</span>
      </div>

      <Button onClick={handleSave}>Generate Certificate</Button>
    </div>
  );
}

================
File: components/CertificateTable.tsx
================
"use client";

import React, { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"; // Adjust import to your ShadCN setup
import { Label } from "./ui/label";
import { Input } from "./ui/input";
import { Button } from "./ui/button";

// Example type for certificate
interface CertificateRecord {
  id: number;
  project: string;
  period: string; // e.g. "Jan 2024"
  status: "pending" | "generated" | "approved";
  totalAmount: number;
}

interface CertificateTableProps {
  certificates: CertificateRecord[];
  onView: (id: number) => void;
  onGenerate: (id: number) => void;
}

export default function CertificateTable({
  certificates,
  onView,
  onGenerate,
}: CertificateTableProps) {
  const [projectFilter, setProjectFilter] = useState("");
  const [statusFilter, setStatusFilter] = useState("");

  // Filter logic
  const filteredCertificates = certificates.filter((cert) => {
    const matchesProject =
      !projectFilter || cert.project.toLowerCase().includes(projectFilter.toLowerCase());
    const matchesStatus = !statusFilter || cert.status === statusFilter;
    return matchesProject && matchesStatus;
  });

  return (
    <div className="w-full p-4">
      <h2 className="text-xl font-bold mb-4">Certificates</h2>

      {/* Filtering */}
      <div className="flex gap-4 mb-4">
        <div className="flex flex-col">
          <Label htmlFor="projectFilter">Filter by Project</Label>
          <Input
            id="projectFilter"
            placeholder="Project name..."
            value={projectFilter}
            onChange={(e) => setProjectFilter(e.target.value)}
          />
        </div>
        <div className="flex flex-col">
          <Label htmlFor="statusFilter">Filter by Status</Label>
          <select
            id="statusFilter"
            className="border border-gray-300 rounded px-2 py-1"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">All</option>
            <option value="pending">Pending</option>
            <option value="generated">Generated</option>
            <option value="approved">Approved</option>
          </select>
        </div>
      </div>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Project</TableHead>
            <TableHead>Period</TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Total Amount</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {filteredCertificates.map((cert) => (
            <TableRow key={cert.id}>
              <TableCell>{cert.project}</TableCell>
              <TableCell>{cert.period}</TableCell>
              <TableCell>{cert.status}</TableCell>
              <TableCell>${cert.totalAmount.toFixed(2)}</TableCell>
              <TableCell className="flex gap-2">
                <Button variant="outline" onClick={() => onView(cert.id)}>
                  View
                </Button>
                <Button onClick={() => onGenerate(cert.id)}>Generate</Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}

================
File: components/CustomTabs/alltabs.tsx
================
import React from "react";
import { Badge } from "@/components/ui/badge";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Box, House, PanelsTopLeft } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "../ui/tooltip";

interface AllTabsProps {
  type: "text" | "icon" | "both"; // Type of content (text, icon, or both)
  direction: "vertical" | "horizontal"; // Layout direction of the tabs
  variant: "default" | "card"; // Determines how the tab content is displayed
  children: React.ReactNode;
}

export default function AllTabs({ type, direction, variant, children }: AllTabsProps) {
  const renderTabsTrigger = (triggerProps: any) => {
    const { value, children, number, new: isNew } = triggerProps;

    const renderIconAndText = () => {
      return (
        <>
          {triggerProps.icon && <span className="mr-2">{triggerProps.icon}</span>}
          {type !== "icon" && children}
          {number && (
            <Badge
              className="min-w-5 justify-center bg-primary/15 px-1 transition-opacity group-data-[state=inactive]:opacity-50"
              variant="secondary"
            >
              {number}
            </Badge>
          )}
          {isNew && <Badge variant="destructive">New</Badge>}
        </>
      );
    };

    return (
      <TabsTrigger value={value} className="py-3">
        {type === "icon" ? (
          <TooltipProvider delayDuration={0}>
            <Tooltip>
              <TooltipTrigger asChild>{renderIconAndText()}</TooltipTrigger>
              <TooltipContent className="px-2 py-1 text-xs">{children}</TooltipContent>
            </Tooltip>
          </TooltipProvider>
        ) : (
          renderIconAndText()
        )}
      </TabsTrigger>
    );
  };

  return (
    <>
      <Tabs defaultValue="tab-1">
        <ScrollArea>
          <TabsList className={direction === "horizontal" ? "flex" : "flex-col"}>
            {React.Children.map(children, (child: any) => {
              if (child.type === TabsTrigger) {
                return renderTabsTrigger(child.props);
              }
              return null;
            })}
          </TabsList>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
        {React.Children.map(children, (child: any) => {
          if (child.type === TabsContent) {
            return child;
          }
          return null;
        })}
      </Tabs>
    </>
  );
}

================
File: components/CustomTabs/comp-426.tsx
================
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function Component() {
  return (
    <Tabs defaultValue="tab-1">
      <TabsList>
        <TabsTrigger value="tab-1">Tab 1</TabsTrigger>
        <TabsTrigger value="tab-2">Tab 2</TabsTrigger>
        <TabsTrigger value="tab-3">Tab 3</TabsTrigger>
      </TabsList>
      <TabsContent value="tab-1">
        <p className="p-4 text-center text-xs text-muted-foreground">Content for Tab 1</p>
      </TabsContent>
      <TabsContent value="tab-2">
        <p className="p-4 text-center text-xs text-muted-foreground">Content for Tab 2</p>
      </TabsContent>
      <TabsContent value="tab-3">
        <p className="p-4 text-center text-xs text-muted-foreground">Content for Tab 3</p>
      </TabsContent>
    </Tabs>
  );
}

================
File: components/CustomTabs/comp-433.tsx
================
import { Badge } from "@/components/ui/badge";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Box, House, PanelsTopLeft } from "lucide-react";

export default function Component() {
  return (
    <Tabs defaultValue="tab-1">
      <ScrollArea>
        <TabsList className="mb-3">
          <TabsTrigger value="tab-1">
            <House
              className="-ms-0.5 me-1.5 opacity-60 "
              size={16}
              strokeWidth={2}
              aria-hidden="true"
            />
            Overview
          </TabsTrigger>
          <TabsTrigger value="tab-2" className="group">
            <PanelsTopLeft
              className="-ms-0.5 me-1.5 opacity-60 "
              size={16}
              strokeWidth={2}
              aria-hidden="true"
            />
            Projects
            <Badge
              className="ms-1.5 min-w-5 justify-center bg-primary/15 px-1 transition-opacity group-data-[state=inactive]:opacity-50"
              variant="secondary"
            >
              3
            </Badge>
          </TabsTrigger>
          <TabsTrigger value="tab-3" className="group">
            <Box
              className="-ms-0.5 me-1.5 opacity-60 "
              size={16}
              strokeWidth={2}
              aria-hidden="true"
            />
            Packages
            <Badge className="ms-1.5 transition-opacity group-data-[state=inactive]:opacity-50">
              New
            </Badge>
          </TabsTrigger>
        </TabsList>
        <ScrollBar orientation="horizontal" />
      </ScrollArea>
      <TabsContent value="tab-1">
        <p className="p-4 pt-1 text-center text-xs text-muted-foreground">Content for Tab 1</p>
      </TabsContent>
      <TabsContent value="tab-2">
        <p className="p-4 pt-1 text-center text-xs text-muted-foreground">Content for Tab 2</p>
      </TabsContent>
      <TabsContent value="tab-3">
        <p className="p-4 pt-1 text-center text-xs text-muted-foreground">Content for Tab 3</p>
      </TabsContent>
    </Tabs>
  );
}

================
File: components/CustomTabs/comp-437.tsx
================
import { Badge } from "@/components/ui/badge";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Box, ChartLine, House, PanelsTopLeft, Settings, UsersRound } from "lucide-react";

export default function Component() {
  return (
    <Tabs defaultValue="tab-1">
      <ScrollArea>
        <TabsList className="mb-3 h-auto gap-2 rounded-none border-b border-border bg-transparent px-0 py-1 text-foreground">
          <TabsTrigger
            value="tab-1"
            className="relative after:absolute after:inset-x-0 after:bottom-0 after:-mb-1 after:h-0.5 hover:bg-accent hover:text-foreground data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:after:bg-primary data-[state=active]:hover:bg-accent"
          >
            <House
              className="-ms-0.5 me-1.5 opacity-60"
              size={16}
              strokeWidth={2}
              aria-hidden="true"
            />
            Overview
          </TabsTrigger>
          <TabsTrigger
            value="tab-2"
            className="relative after:absolute after:inset-x-0 after:bottom-0 after:-mb-1 after:h-0.5 hover:bg-accent hover:text-foreground data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:after:bg-primary data-[state=active]:hover:bg-accent"
          >
            <PanelsTopLeft
              className="-ms-0.5 me-1.5 opacity-60"
              size={16}
              strokeWidth={2}
              aria-hidden="true"
            />
            Projects
            <Badge className="ms-1.5 min-w-5 bg-primary/15 px-1" variant="secondary">
              3
            </Badge>
          </TabsTrigger>
          <TabsTrigger
            value="tab-3"
            className="relative after:absolute after:inset-x-0 after:bottom-0 after:-mb-1 after:h-0.5 hover:bg-accent hover:text-foreground data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:after:bg-primary data-[state=active]:hover:bg-accent"
          >
            <Box
              className="-ms-0.5 me-1.5 opacity-60"
              size={16}
              strokeWidth={2}
              aria-hidden="true"
            />
            Packages
            <Badge className="ms-1.5">New</Badge>
          </TabsTrigger>
          <TabsTrigger
            value="tab-4"
            className="relative after:absolute after:inset-x-0 after:bottom-0 after:-mb-1 after:h-0.5 hover:bg-accent hover:text-foreground data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:after:bg-primary data-[state=active]:hover:bg-accent"
          >
            <UsersRound
              className="-ms-0.5 me-1.5 opacity-60"
              size={16}
              strokeWidth={2}
              aria-hidden="true"
            />
            Team
          </TabsTrigger>
          <TabsTrigger
            value="tab-5"
            className="relative after:absolute after:inset-x-0 after:bottom-0 after:-mb-1 after:h-0.5 hover:bg-accent hover:text-foreground data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:after:bg-primary data-[state=active]:hover:bg-accent"
          >
            <ChartLine
              className="-ms-0.5 me-1.5 opacity-60"
              size={16}
              strokeWidth={2}
              aria-hidden="true"
            />
            Insights
          </TabsTrigger>
          <TabsTrigger
            value="tab-6"
            className="relative after:absolute after:inset-x-0 after:bottom-0 after:-mb-1 after:h-0.5 hover:bg-accent hover:text-foreground data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:after:bg-primary data-[state=active]:hover:bg-accent"
          >
            <Settings
              className="-ms-0.5 me-1.5 opacity-60"
              size={16}
              strokeWidth={2}
              aria-hidden="true"
            />
            Settings
          </TabsTrigger>
        </TabsList>
        <ScrollBar orientation="horizontal" />
      </ScrollArea>
      <TabsContent value="tab-1">
        <p className="pt-1 text-center text-xs text-muted-foreground">Content for Tab 1</p>
      </TabsContent>
      <TabsContent value="tab-2">
        <p className="pt-1 text-center text-xs text-muted-foreground">Content for Tab 2</p>
      </TabsContent>
      <TabsContent value="tab-3">
        <p className="pt-1 text-center text-xs text-muted-foreground">Content for Tab 3</p>
      </TabsContent>
      <TabsContent value="tab-4">
        <p className="pt-1 text-center text-xs text-muted-foreground">Content for Tab 4</p>
      </TabsContent>
      <TabsContent value="tab-5">
        <p className="pt-1 text-center text-xs text-muted-foreground">Content for Tab 5</p>
      </TabsContent>
      <TabsContent value="tab-6">
        <p className="pt-1 text-center text-xs text-muted-foreground">Content for Tab 6</p>
      </TabsContent>
    </Tabs>
  );
}

================
File: components/CustomTabs/comp-440.tsx
================
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Box, House, PanelsTopLeft } from "lucide-react";

export default function Component() {
  return (
    <Tabs defaultValue="tab-1">
      <TabsList >
        <TooltipProvider delayDuration={0}>
          <Tooltip>
            <TooltipTrigger asChild>
              <span>
                <TabsTrigger value="tab-1" className="py-3">
                  <House size={16} strokeWidth={2} aria-hidden="true" />
                </TabsTrigger>
              </span>
            </TooltipTrigger>
            <TooltipContent className="px-2 py-1 text-xs">Overview</TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <TooltipProvider delayDuration={0}>
          <Tooltip>
            <TooltipTrigger asChild>
              <span>
                <TabsTrigger value="tab-2" className="group py-3">
                  <span className="relative">
                    <PanelsTopLeft size={16} strokeWidth={2} aria-hidden="true" />
                    <Badge className="absolute -top-2.5 left-full min-w-5 justify-center -translate-x-1.5 border-background px-0.5 text-[10px]/[.875rem] transition-opacity group-data-[state=inactive]:opacity-50">
                      3
                    </Badge>
                  </span>
                </TabsTrigger>
              </span>
            </TooltipTrigger>
            <TooltipContent className="px-2 py-1 text-xs">Projects</TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <TooltipProvider delayDuration={0}>
          <Tooltip>
            <TooltipTrigger asChild>
              <span>
                <TabsTrigger value="tab-3" className="py-3">
                  <Box size={16} strokeWidth={2} aria-hidden="true" />
                </TabsTrigger>
              </span>
            </TooltipTrigger>
            <TooltipContent className="px-2 py-1 text-xs">Packages</TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </TabsList>
      <TabsContent value="tab-1">
        <p className="p-4 text-center text-xs text-muted-foreground">Content for Tab 1440</p>
      </TabsContent>
      <TabsContent value="tab-2">
        <p className="p-4 text-center text-xs text-muted-foreground">Content for Tab 2</p>
      </TabsContent>
      <TabsContent value="tab-3">
        <p className="p-4 text-center text-xs text-muted-foreground">Content for Tab 3</p>
      </TabsContent>
    </Tabs>
  );
}

================
File: components/CustomTabs/comp-441.tsx
================
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Box, House, PanelsTopLeft } from "lucide-react";

export default function Component() {
  return (
    <Tabs defaultValue="tab-1" orientation="vertical" className="flex w-full gap-2">
      <TabsList className="flex-col">
        <TooltipProvider delayDuration={0}>
          <Tooltip>
            <TooltipTrigger asChild>
              <span>
                <TabsTrigger value="tab-1" className="py-3">
                  <House size={16} strokeWidth={2} aria-hidden="true" />
                </TabsTrigger>
              </span>
            </TooltipTrigger>
            <TooltipContent side="right" className="px-2 py-1 text-xs">
              Overview
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <TooltipProvider delayDuration={0}>
          <Tooltip>
            <TooltipTrigger asChild>
              <span>
                <TabsTrigger value="tab-2" className="group py-3">
                  <span className="relative flex justify-center items-center gap-2">
                    <PanelsTopLeft size={16} strokeWidth={2} aria-hidden="true" />
                    <Badge className="absolute -top-2.5 left-full min-w-5 justify-center -translate-x-1.5 border-background px-0.5 text-[10px]/[.875rem] transition-opacity group-data-[state=inactive]:opacity-50">
                      3
                    </Badge>
                    {/* Projects */}
                  </span>
                </TabsTrigger>
              </span>
            </TooltipTrigger>
            <TooltipContent side="right" className="px-2 py-1 text-xs">
              Projects
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        <TooltipProvider delayDuration={0}>
          <Tooltip>
            <TooltipTrigger asChild>
              <span>
                <TabsTrigger value="tab-3" className="py-3">
                  <Box size={16} strokeWidth={2} aria-hidden="true" />
                </TabsTrigger>
              </span>
            </TooltipTrigger>
            <TooltipContent side="right" className="px-2 py-1 text-xs">
              Packages
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </TabsList>
      <div className="grow rounded-lg border border-border text-start">
        <TabsContent value="tab-1">
          <p className="px-4 py-1.5 text-xs text-muted-foreground">Content for Tab 1</p>
        </TabsContent>
        <TabsContent value="tab-2">
          <p className="px-4 py-1.5 text-xs text-muted-foreground">Content for Tab 2</p>
        </TabsContent>
        <TabsContent value="tab-3">
          <p className="px-4 py-1.5 text-xs text-muted-foreground">Content for Tab 3</p>
        </TabsContent>
      </div>
    </Tabs>
  );
}

================
File: components/CustomTabs/comp-442.tsx
================
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export default function Component() {
  return (
    <Tabs defaultValue="tab-1" orientation="vertical" className="flex w-full gap-2">
      <TabsList className="flex-col">
        <TabsTrigger value="tab-1" className="w-full">
          Overview
        </TabsTrigger>
        <TabsTrigger value="tab-2" className="w-full">
          Projects
        </TabsTrigger>
        <TabsTrigger value="tab-3" className="w-full">
          Packages
        </TabsTrigger>
      </TabsList>
      <div className="grow rounded-lg border border-border text-start">
        <TabsContent value="tab-1">
          <p className="px-4 py-1.5 text-xs text-muted-foreground">Content for Tab 1</p>
        </TabsContent>
        <TabsContent value="tab-2">
          <p className="px-4 py-1.5 text-xs text-muted-foreground">Content for Tab 2</p>
        </TabsContent>
        <TabsContent value="tab-3">
          <p className="px-4 py-1.5 text-xs text-muted-foreground">Content for Tab 3</p>
        </TabsContent>
      </div>
    </Tabs>
  );
}

================
File: components/DraggableRow.tsx
================
import React, { CSSProperties } from 'react'
import { Row } from '@tanstack/react-table' // if using TanStack's Row type
import { useSortable } from '@dnd-kit/sortable'
import { CSS } from '@dnd-kit/utilities'

/**
 * DraggableRow wraps each top-level "Item" row in a Sortable component.
 * We pass the row's ID as the `id`.
 */
export function DraggableRow<TData extends { id: string }>({
  row,
  children,
}: {
  row: Row<TData>
  children: React.ReactNode
}) {
  const { attributes, listeners, setNodeRef, transform, transition, isDragging } =
    useSortable({ id: row.original.id })

  const style: CSSProperties = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.8 : 1,
    zIndex: isDragging ? 1 : undefined,
    position: isDragging ? 'relative' : undefined,
  }

  return (
    <tr
      ref={setNodeRef}
      style={style}
      className='bolas'
    // We place the drag handle props on a dedicated cell or button,
    // but if you want to drag the entire row, you can do:
    // {...attributes} {...listeners}
    >
      {children}
    </tr>
  )
}

/**
 * A small button or handle for the user to click and drag.
 * Typically goes in the first cell of each row.
 */
export function RowDragHandle({ rowId }: { rowId: string }) {
  const { attributes, listeners } = useSortable({ id: rowId })
  return (
    <button
      {...attributes}
      {...listeners}
      style={{ cursor: 'grab' }}
      aria-label="Drag handle"
    >
      🟰
    </button>
  )
}

================
File: components/editable-cell.tsx
================
import React, { useEffect, useRef, useState } from 'react'
import { Input } from '@/components/ui/input'
import { cn } from '@/lib/utils'

export interface EditableCellProps {
  value: string
  onChange: (newVal: string) => void
  className?: string
  onClick?: () => void
  /**
   * Optional: Use this if you want to display something else in read mode
   * (e.g., highlighted text) instead of the raw value.
   */
  displayValue?: React.ReactNode
}


export const EditableCell: React.FC<EditableCellProps> = ({
  value,
  onChange,
  displayValue,  // new optional prop
  className,
  onClick,
}) => {
  const [isEditing, setIsEditing] = useState(false)
  const [editValue, setEditValue] = useState(value)
  const inputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus()
    }
  }, [isEditing])

  const handleDoubleClick = () => {
    setIsEditing(true)
  }

  const handleBlur = () => {
    setIsEditing(false)
    onChange(editValue)
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      setIsEditing(false)
      onChange(editValue)
    } else if (e.key === 'Escape') {
      setIsEditing(false)
      setEditValue(value) // revert changes
    }
  }

  if (isEditing) {
    return (
      <Input
        ref={inputRef}
        value={editValue}
        className={cn("border border-gray-300 rounded px-2 py-1 w-full h-full", className)}
        onChange={(e) => setEditValue(e.target.value)}
        onBlur={handleBlur}
        onKeyDown={handleKeyDown}
      />
    )
  }

  /**
   * If a "displayValue" is provided, we render that in read-mode.
   * Otherwise, render the original "value".
   */
  return (
    <div
      className={cn("h-9 flex justify-start items-center", className)}
      onClick={onClick}
      onDoubleClick={handleDoubleClick} >
      {displayValue !== undefined ? displayValue : value}
    </div>
  )
}

================
File: components/expandable-table.tsx
================
'use client'

import React, { useState, useMemo, useEffect } from 'react'
import {
  ChevronDown,
  ChevronRight,
  ChevronUp,
  ArrowUpDown,
} from 'lucide-react'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { EditableCell } from './editable-cell'
import { SortDirection } from '../lib/types/table-types'
import { highlightText, sortData } from '../lib/utils/table-utils'
import { Card } from './ui/card'

// ─────────────────────────────────────────────────────
// 1) TanStack React Table Imports
// ─────────────────────────────────────────────────────
import {
  useReactTable,
  getCoreRowModel,
  getExpandedRowModel,
  ColumnDef,
  ExpandedState,
  flexRender,
} from '@tanstack/react-table'

/** 
 * We'll not use "initialData" for production fetch, but let's keep a fallback.
 */
interface Item {
  id: string
  insumos: string
  unidad: string
  precio: string
  subItems?: Item[]
}

const initialData: Item[] = []

/**
 * Convert your fetched "tags" data structure into an Item[] shape.
 */
function adaptTagsToItems(tags: any[]): Item[] {
  // Each tag => one top-level Item
  // Each element => one subItem
  return tags.map((tag) => {
    const subItems = tag.element_tags?.map((et: any) => {
      const el = et.elements
      // If you want the last or the first price, adapt accordingly:
      let priceString = '0.00'
      if (el.prices?.length > 0) {
        const lastPrice = el.prices[el.prices.length - 1].price
        priceString = String(lastPrice)
      }
      return {
        id: String(el.id),
        insumos: el.name,
        unidad: el.unit,
        precio: priceString,
      } as Item
    }) ?? []

    return {
      id: String(tag.id),
      insumos: tag.name,
      unidad: '',
      precio: '',
      subItems,
    } as Item
  })
}

/**
 * A helper to gather all IDs (item + all subItems) recursively.
 */
function collectAllIdsRecursive(item: Item): string[] {
  const result = [item.id]
  if (item.subItems) {
    for (const sub of item.subItems) {
      result.push(...collectAllIdsRecursive(sub))
    }
  }
  return result
}

/**
 * Remove all items (and sub-items) whose IDs exist in `idsToRemove`.
 */
function removeIdsFromData(data: Item[], idsToRemove: Set<string>): Item[] {
  return data
    .filter((it) => !idsToRemove.has(it.id))
    .map((it) => {
      if (it.subItems) {
        return { ...it, subItems: removeIdsFromData(it.subItems, idsToRemove) }
      }
      return it
    })
}

/**
 * Duplicate items that are selected (along with sub-items). 
 * Returns a new array with duplicates appended at the top level.
 */
function duplicateSelected(data: Item[], selectedIds: Set<string>): Item[] {
  const newData = [...data]

  const cloneItem = (item: Item): Item => {
    const newId = `${item.id}-copy-${Math.floor(Math.random() * 1000)}`
    return {
      ...item,
      id: newId,
      subItems: item.subItems?.map(cloneItem) ?? [],
    }
  }

  const traverse = (items: Item[]) => {
    items.forEach((it) => {
      if (selectedIds.has(it.id)) {
        newData.push(cloneItem(it))
      }
      if (it.subItems) {
        traverse(it.subItems)
      }
    })
  }

  traverse(data)
  return newData
}

export default function ExpandableTable() {
  const [data, setData] = useState<Item[]>(initialData)

  // Use a TanStack 'expanded' state instead of manual expandedRows
  const [expanded, setExpanded] = useState<ExpandedState>({})

  const [searchTerm, setSearchTerm] = useState('')
  const [sortColumn, setSortColumn] = useState<keyof Item>('id')
  const [sortDirection, setSortDirection] = useState<SortDirection>('asc')
  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set())

  /**
   * Fetch data from /api/tagsWithElements
   */
  useEffect(() => {
    fetch('/api/tagsWithElements')
      .then((res) => res.json())
      .then((tags: any[]) => {
        const adapted = adaptTagsToItems(tags)
        setData(adapted)
      })
      .catch((err) => console.error('Error fetching elements:', err))
  }, [])

  /**
   * Sort data
   */
  const handleSort = (column: keyof Item) => {
    setSortColumn(column)
    setSortDirection((prev) => (prev === 'asc' ? 'desc' : 'asc'))
  }

  /**
   * Update an item or subItem with a new value for the specified field.
   */
  const handleEdit = (id: string, field: keyof Item, value: string) => {
    function updateItem(items: Item[]): Item[] {
      return items.map((item) => {
        if (item.id === id) {
          return { ...item, [field]: value }
        }
        if (item.subItems) {
          return { ...item, subItems: updateItem(item.subItems) }
        }
        return item
      })
    }
    setData((old) => updateItem(old))
  }

  /**
   * Toggle selection for this item + its children.
   */
  const handleToggleSelect = (item: Item) => {
    const allIds = collectAllIdsRecursive(item)
    const newSelectedIds = new Set(selectedIds)
    const newExpanded = { ...expanded as any }

    // If any child is not selected, select them all. Otherwise, unselect them all.
    const shouldSelect = allIds.some((id) => !newSelectedIds.has(id))

    if (shouldSelect) {
      allIds.forEach((id) => {
        newSelectedIds.add(id)
        newExpanded[id] = true // auto-expand
      })
    } else {
      allIds.forEach((id) => {
        newSelectedIds.delete(id)
        delete newExpanded[id]
      })
    }

    setSelectedIds(newSelectedIds)
    setExpanded(newExpanded)
  }

  /**
   * Filter + sort data for display
   */
  const filteredAndSortedData = useMemo(() => {
    let result = data
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase()
      // Filter parent items if they match or have subItems that match
      result = result
        .map((item) => {
          const filteredSubItems = item.subItems?.filter((subItem) =>
            Object.values(subItem).some((value) =>
              value.toLowerCase().includes(searchLower)
            )
          )
          return { ...item, subItems: filteredSubItems }
        })
        .filter(
          (item) =>
            (item.subItems && item.subItems.length > 0) ||
            Object.values(item).some(
              (value) =>
                typeof value === 'string' &&
                value.toLowerCase().includes(searchLower)
            )
        )
    }
    // Sort
    return sortData(result, sortColumn, sortDirection)
  }, [data, searchTerm, sortColumn, sortDirection])

  /**
   * Auto-expand rows that contain search text
   */
  useEffect(() => {
    if (!searchTerm) {
      setExpanded({})
      return
    }
    const newExpanded: ExpandedState = { ...expanded as any }
    const searchLower = searchTerm.toLowerCase()

    data.forEach((item) => {
      const itemMatches = Object.values(item).some(
        (val) => typeof val === 'string' && val.toLowerCase().includes(searchLower)
      )
      const subItemMatches = item.subItems?.some((subItem) =>
        Object.values(subItem).some(
          (val) => typeof val === 'string' && val.toLowerCase().includes(searchLower)
        )
      )
      if (itemMatches || subItemMatches) {
        (newExpanded as Record<string, boolean>)[item.id] = true;
      }
    })

    setExpanded(newExpanded)
  }, [searchTerm, data])

  // ─────────────────────────────────────────────────────
  // Define columns for TanStack React Table
  // ─────────────────────────────────────────────────────
  const columns = useMemo<ColumnDef<Item>[]>(
    () => [
      {
        // Checkbox column for selection
        id: 'selection',
        header: () => null, // empty
        cell: ({ row }) => {
          const item = row.original
          return (
            <input
              type="checkbox"
              checked={selectedIds.has(item.id)}
              onChange={() => handleToggleSelect(item)}
              className="cursor-pointer"
            />
          )
        },
      },
      {
        // ID
        accessorKey: 'id',
        header: () => (
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleSort('id')}
            className="flex items-center space-x-1"
          >
            <span>ID</span>
            {sortColumn === 'id' ? (
              sortDirection === 'asc' ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )
            ) : (
              <ArrowUpDown className="h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row, getValue }) => {
          return (
            <div className="flex items-center justify-center">
              <EditableCell
                value={getValue<string>()}
                onChange={(val) => handleEdit(row.original.id, 'id', val)}
              />
            </div>
          )
        },
      },
      {
        // Insumos
        accessorKey: 'insumos',
        header: () => (
          <Button
            variant="ghost"
            onClick={() => handleSort('insumos')}
            className="flex items-center space-x-1"
          >
            <span>Insumos</span>
            {sortColumn === 'insumos' ? (
              sortDirection === 'asc' ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )
            ) : (
              <ArrowUpDown className="h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row, getValue }) => {
          const item = row.original
          const depth = row.depth
          const hasSubRows = row.getCanExpand()
          const isExpanded = row.getIsExpanded()

          return (
            <div
              // Indent sub-rows based on depth, plus fade/height transitions
              className="flex items-center transition-all duration-300"
              style={{
                paddingLeft: `${depth * 20}px`,
              }}
            >
              {/* Expand button if there are subItems */}
              {hasSubRows && (
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={row.getToggleExpandedHandler()}
                  className="mr-2"
                >
                  {isExpanded ? (
                    <ChevronDown className="h-4 w-4" />
                  ) : (
                    <ChevronRight className="h-4 w-4" />
                  )}
                </Button>
              )}
              <EditableCell
                className={depth === 0 ? 'font-bold' : ''}
                value={item.insumos}
                onChange={(val) => handleEdit(item.id, 'insumos', val)}
                displayValue={highlightText(getValue<string>(), searchTerm)}
              />
            </div>
          )
        },
      },
      {
        // Unidad
        accessorKey: 'unidad',
        header: () => (
          <Button
            variant="ghost"
            onClick={() => handleSort('unidad')}
            className="flex items-center space-x-1"
          >
            <span>Unidad</span>
            {sortColumn === 'unidad' ? (
              sortDirection === 'asc' ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )
            ) : (
              <ArrowUpDown className="h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row, getValue }) => {
          return (
            <EditableCell
              value={getValue<string>()}
              onChange={(val) => handleEdit(row.original.id, 'unidad', val)}
            />
          )
        },
      },
      {
        // Precio
        accessorKey: 'precio',
        header: () => (
          <Button
            variant="ghost"
            onClick={() => handleSort('precio')}
            className="flex items-center space-x-1"
          >
            <span>Precio</span>
            {sortColumn === 'precio' ? (
              sortDirection === 'asc' ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )
            ) : (
              <ArrowUpDown className="h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row, getValue }) => {
          return (
            <EditableCell
              value={getValue<string>()}
              onChange={(val) => handleEdit(row.original.id, 'precio', val)}
            />
          )
        },
      },
    ],
    [selectedIds, sortColumn, sortDirection, searchTerm]
  )

  // ─────────────────────────────────────────────────────
  // Create the TanStack table
  // ─────────────────────────────────────────────────────
  const table = useReactTable({
    data: filteredAndSortedData,
    columns,
    state: {
      expanded,
    },
    getSubRows: (row) => row.subItems,
    onExpandedChange: setExpanded,
    getCoreRowModel: getCoreRowModel(),
    getExpandedRowModel: getExpandedRowModel(),
  })

  // Bulk Actions
  const handleDeleteSelected = () => {
    setData((old) => removeIdsFromData(old, selectedIds))
    setSelectedIds(new Set())
  }

  const handleDuplicateSelected = () => {
    setData((old) => duplicateSelected(old, selectedIds))
    setSelectedIds(new Set())
  }

  const handleExecuteSelected = () => {
    console.log('execute')
    // Additional logic if needed
    setSelectedIds(new Set())
  }

  console.log(data)

  return (
    <div className="container p-4">
      {/* Search */}
      <Input
        placeholder="Buscar..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="mb-4"
      />

      {/* Bulk actions if anything is selected */}
      {selectedIds.size > 0 && (
        <div className="mb-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline">Actions ({selectedIds.size})</Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuLabel>Bulk Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={handleDeleteSelected}>
                Delete
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleDuplicateSelected}>
                Duplicate
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleExecuteSelected}>
                Execute
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      )}

      {/* Table */}
      <Card className="max-h-[80vh] overflow-y-scroll">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id} colSpan={header.colSpan}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                        header.column.columnDef.header,
                        header.getContext()
                      )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>

          <TableBody>
            {table.getRowModel().rows.map((row) => {
              const rowClasses = [
                'overflow-hidden',          // hide content that would otherwise overflow
                'transition-all',           // animate changes
                'duration-300',            // 300ms
                row.depth === 0 && 'bg-muted/30', // highlight top-level row
              ]
                .filter(Boolean)
                .join(' ')

              return (
                <TableRow
                  key={row.id}
                  className={rowClasses}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              )
            })}
          </TableBody>
        </Table>
      </Card>
    </div>
  )
}

================
File: components/medicion/MedicionHistory.tsx
================
import { useEffect, useState } from "react";
import { MedicionData } from "@/lib/types/presupuesto";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { formatCurrency } from "@/lib/utils/format";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { useMedicion } from "@/lib/hooks/useMedicion";

interface MedicionHistoryProps {
  presupuestoId: string | number;
}

export function MedicionHistory({ presupuestoId }: MedicionHistoryProps) {
  const { getMediciones, isLoading, error } = useMedicion({ presupuestoId });
  const [mediciones, setMediciones] = useState<MedicionData[]>([]);

  useEffect(() => {
    const loadMediciones = async () => {
      try {
        const data = await getMediciones();
        setMediciones(data);
      } catch (err) {
        console.error("Error loading mediciones:", err);
      }
    };
    loadMediciones();
  }, [getMediciones]);

  if (isLoading) {
    return <div>Cargando...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  // Sort mediciones by date
  const sortedMediciones = [...mediciones].sort((a, b) =>
    new Date(b.fecha).getTime() - new Date(a.fecha).getTime()
  );

  // Calculate month-over-month progress
  const getProgressChange = (current: number, previous: number | undefined) => {
    if (previous === undefined) return 0;
    return current - previous;
  };

  if (sortedMediciones.length === 0) {
    return null;
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>Estado Actual</CardTitle>
          <CardDescription>Resumen del avance de la obra</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-muted-foreground">Monto Completado</p>
                <p className="text-2xl font-bold">
                  {formatCurrency(sortedMediciones[0].totalCompleted)}
                </p>
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Avance Total</p>
                <p className="text-2xl font-bold">
                  {sortedMediciones[0].completedPercentage.toFixed(2)}%
                </p>
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-muted-foreground">Progreso General</span>
                <span className="font-medium">{sortedMediciones[0].completedPercentage.toFixed(1)}%</span>
              </div>
              <div className="h-2 rounded-full bg-secondary">
                <div
                  className="h-full rounded-full bg-primary transition-all duration-300"
                  style={{ width: `${sortedMediciones[0].completedPercentage}%` }}
                />
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Historial de Mediciones</CardTitle>
          <CardDescription>Detalle cronológico de todas las mediciones</CardDescription>
        </CardHeader>
        <CardContent>
          <ScrollArea className="h-[500px] w-full pr-4">
            <div className="space-y-8">
              {sortedMediciones.map((medicion, index) => {
                const progressChange = getProgressChange(
                  medicion.completedPercentage,
                  sortedMediciones[index + 1]?.completedPercentage
                );

                return (
                  <div
                    key={medicion.id}
                    className="relative flex items-start border-l-2 border-primary pl-4"
                  >
                    <div className="absolute -left-[5px] top-1.5 h-2 w-2 rounded-full bg-primary" />
                    <div className="flex-1 space-y-3">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-semibold">
                            Medición #{sortedMediciones.length - index}
                          </p>
                          <time className="text-sm text-muted-foreground">
                            {new Date(medicion.fecha).toLocaleDateString('es-AR', {
                              year: 'numeric',
                              month: 'long',
                              day: 'numeric'
                            })}
                          </time>
                        </div>
                        {progressChange > 0 && (
                          <Badge variant="secondary" className="bg-primary/10">
                            +{progressChange.toFixed(2)}%
                          </Badge>
                        )}
                      </div>

                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <p className="text-sm text-muted-foreground">Monto Completado</p>
                          <p className="font-medium">
                            {formatCurrency(medicion.totalCompleted)}
                          </p>
                        </div>
                        <div>
                          <p className="text-sm text-muted-foreground">Porcentaje Total</p>
                          <p className="font-medium">
                            {medicion.completedPercentage.toFixed(2)}%
                          </p>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <div className="h-2 rounded-full bg-secondary">
                          <div
                            className="h-full rounded-full bg-primary transition-all duration-300"
                            style={{ width: `${medicion.completedPercentage}%` }}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: components/nav-main.tsx
================
"use client";

import { ChevronRight, type LucideIcon } from "lucide-react";
import { usePathname } from "next/navigation";

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
} from "@/components/ui/sidebar";
import React from "react";

type SubItem = {
  title: string;
  url: string;
};

type NavItem = {
  title: string;
  url: string;
  icon?: LucideIcon;
  isActive?: boolean;
  items?: SubItem[];
};

export function NavMain({
  items,
}: {
  items: any;
}) {
  // Next.js client-side path
  const pathname = usePathname();

  // Check if a subitem is active
  const isSubItemActive = (subItems?: SubItem[]) =>
    subItems?.some((subItem) => subItem.url === pathname);

  return (
    <SidebarGroup>
      <SidebarGroupLabel>Platform</SidebarGroupLabel>
      <SidebarMenu>
        {items.map((item: any) => {
          const hasActiveSubItem = isSubItemActive(item.items);

          return (
            <Collapsible
              key={item.title}
              asChild
              defaultOpen={item.isActive || hasActiveSubItem}
              className="group/collapsible"
            >
              <SidebarMenuItem>
                <CollapsibleTrigger asChild>
                  <SidebarMenuButton
                    tooltip={item.title}
                    className={
                      item.isActive || hasActiveSubItem
                        ? "bg-primary text-white"
                        : ""
                    }
                  >
                    {item.icon && Object.keys(item.icon).length !== 0 && (
                      <item.icon />
                    )}
                    <span>{item.title}</span>
                    <ChevronRight className="ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90" />
                  </SidebarMenuButton>
                </CollapsibleTrigger>
                <CollapsibleContent>
                  <SidebarMenuSub>
                    {item.items?.map((subItem: any) => (
                      <SidebarMenuSubItem key={subItem.title}>
                        <SidebarMenuSubButton
                          asChild
                          className={
                            subItem.url === pathname
                              ? "bg-muted text-primary"
                              : ""
                          }
                        >
                          <a href={subItem.url}>
                            <span>{subItem.title}</span>
                          </a>
                        </SidebarMenuSubButton>
                      </SidebarMenuSubItem>
                    ))}
                  </SidebarMenuSub>
                </CollapsibleContent>
              </SidebarMenuItem>
            </Collapsible>
          );
        })}
      </SidebarMenu>
    </SidebarGroup>
  );
}

================
File: components/nav-projects.tsx
================
"use client"

import {
  Folder,
  Forward,
  MoreHorizontal,
  Trash2,
  type LucideIcon,
} from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"

export function NavProjects({
  projects,
}: {
  projects: {
    name: string
    url: string
    icon: LucideIcon
  }[]
}) {
  const { isMobile } = useSidebar()

  return (
    <SidebarGroup className="group-data-[collapsible=icon]:hidden">
      <SidebarGroupLabel>Projects</SidebarGroupLabel>
      <SidebarMenu>
        {projects.map((item) => (
          <SidebarMenuItem key={item.name}>
            <SidebarMenuButton asChild>
              <a href={item.url}>
                <item.icon />
                <span>{item.name}</span>
              </a>
            </SidebarMenuButton>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <SidebarMenuAction showOnHover>
                  <MoreHorizontal />
                  <span className="sr-only">More</span>
                </SidebarMenuAction>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                className="w-48 rounded-lg"
                side={isMobile ? "bottom" : "right"}
                align={isMobile ? "end" : "start"}
              >
                <DropdownMenuItem>
                  <Folder className="text-muted-foreground" />
                  <span>View Project</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Forward className="text-muted-foreground" />
                  <span>Share Project</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Trash2 className="text-muted-foreground" />
                  <span>Delete Project</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </SidebarMenuItem>
        ))}
        <SidebarMenuItem>
          <SidebarMenuButton className="text-sidebar-foreground/70">
            <MoreHorizontal className="text-sidebar-foreground/70" />
            <span>More</span>
          </SidebarMenuButton>
        </SidebarMenuItem>
      </SidebarMenu>
    </SidebarGroup>
  )
}

================
File: components/nav-user.tsx
================
"use client"

import {
  BadgeCheck,
  Bell,
  ChevronsUpDown,
  CreditCard,
  LogOut,
  Sparkles,
} from "lucide-react"

import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from "@/components/ui/avatar"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"

export function NavUser({
  user,
}: {
  user: {
    name: string
    email: string
    avatar: string
  }
}) {
  const { isMobile } = useSidebar()

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <Avatar className="h-8 w-8 rounded-lg">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback className="rounded-lg">CN</AvatarFallback>
              </Avatar>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">{user.name}</span>
                <span className="truncate text-xs">{user.email}</span>
              </div>
              <ChevronsUpDown className="ml-auto size-4" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            side={isMobile ? "bottom" : "right"}
            align="end"
            sideOffset={4}
          >
            <DropdownMenuLabel className="p-0 font-normal">
              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">CN</AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-semibold">{user.name}</span>
                  <span className="truncate text-xs">{user.email}</span>
                </div>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <Sparkles />
                Upgrade to Pro
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <BadgeCheck />
                Account
              </DropdownMenuItem>
              <DropdownMenuItem>
                <CreditCard />
                Billing
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Bell />
                Notifications
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuItem>
              <LogOut />
              Log out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}

================
File: components/presupuesto/GlobalSearch.tsx
================
'use client'

import React from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"

interface TableItem {
  id: string | number
  name: string
  unit: string
  quantity: number
  unitPrice: number
  totalPrice: number
  price: number
  category: string
  accumulated?: string | number
  parcial?: string | number
  rubro?: string | number
  element_tags?: { tags: { name: string } }[]
  originalUnit?: string
  originalQuantity?: number
  originalUnitPrice?: number
  targetSection?: string
  nombre?: string
}

interface GlobalSearchProps {
  isOpen: boolean
  onOpenChange: (open: boolean) => void
  searchValue: string
  onSearch: (value: string) => void
  filteredElements: TableItem[]
  onElementSelect: (element: TableItem) => void
  onSectionSelect: (elementId: string | number, section: string) => void
  sections: string[]
}

export function GlobalSearch({
  isOpen,
  onOpenChange,
  searchValue,
  onSearch,
  filteredElements,
  onElementSelect,
  onSectionSelect,
  sections
}: GlobalSearchProps) {
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle>Agregar Elemento</DialogTitle>
        </DialogHeader>
        <div className="rounded-lg border shadow-md p-4">
          <Input
            placeholder="Buscar elementos (mínimo 4 caracteres)..."
            value={searchValue}
            onChange={(e) => onSearch(e.target.value)}
            className="mb-4"
          />
          <ScrollArea className="h-[300px]">
            {(!searchValue || searchValue.length < 4) ? (
              <div className="flex flex-col items-center justify-center py-6">
                <span className="text-sm text-muted-foreground">
                  Ingrese al menos 4 caracteres para buscar
                </span>
              </div>
            ) : filteredElements.length === 0 ? (
              <div className="flex flex-col items-center justify-center py-6">
                <span className="text-sm text-muted-foreground">
                  No se encontraron elementos
                </span>
              </div>
            ) : (
              <div className="space-y-2">
                {filteredElements.map((element) => (
                  <div
                    key={element.id}
                    className="flex items-center justify-between p-2 hover:bg-accent rounded-md cursor-pointer"
                    onClick={() => onElementSelect(element)}
                  >
                    <span>{element.name}</span>
                    <Select
                      value={element.targetSection}
                      onValueChange={(value) => onSectionSelect(element.id, value)}
                    >
                      <SelectTrigger className="w-[180px]">
                        <SelectValue placeholder="Seleccionar sección" />
                      </SelectTrigger>
                      <SelectContent>
                        {sections.map((section) => (
                          <SelectItem key={section} value={section}>
                            {section}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                ))}
              </div>
            )}
          </ScrollArea>
        </div>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/presupuesto/MedicionSection.tsx
================
import { GroupedMedicionData, MedicionItem } from "@/lib/types/medicion";
import { PresupuestoItem } from "@/lib/types/presupuesto";
import { EditableInput } from "@/components/common/EditableInput";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

interface Props {
  data: GroupedMedicionData;
  presupuestoItems: PresupuestoItem[];
  grandTotal: number;
  updateData: (tag: string, itemId: string | number, key: keyof MedicionItem, value: string) => void;
}

export function MedicionSection({ data, presupuestoItems, grandTotal, updateData }: Props) {
  const calculateWeightedPercentage = (value: number, itemId: string | number) => {
    const presupuestoItem = presupuestoItems.find(p => String(p.id) === String(itemId));
    if (!presupuestoItem) return 0;

    const itemTotal = (presupuestoItem.quantity || 0) * (presupuestoItem.unitPrice || 0);
    const parcialPercentage = (itemTotal / (grandTotal || 1)) * 100;
    const weightedValue = (value / 100) * parcialPercentage;

    console.log('Weighted percentage calculation:', {
      itemId,
      value,
      itemTotal,
      grandTotal,
      parcialPercentage,
      weightedValue
    });

    return weightedValue;
  };

  return (
    <div className="overflow-x-auto">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="border-r">Item</TableHead>
            <TableHead className="text-center border-r">Anterior</TableHead>
            <TableHead className="text-center border-r">Presente</TableHead>
            <TableHead className="text-center border-r">Acumulado</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {Object.entries(data).map(([tag, items]) => (
            <>
              <TableRow key={`${tag}-header`} className="bg-muted/50">
                <TableCell colSpan={4} className="font-medium">
                  {tag}
                </TableCell>
              </TableRow>
              {items.map((item) => (
                <TableRow key={item.id}>
                  <TableCell className="border-r">{item.name}</TableCell>
                  <TableCell className="text-center border-r">
                    <div>{item.anterior?.toFixed(2)}%</div>
                    <div className="text-xs text-gray-500 mt-1">
                      ({calculateWeightedPercentage(item.anterior || 0, item.id).toFixed(2)}% del total)
                    </div>
                  </TableCell>
                  <TableCell className="text-center border-r group cursor-text hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]">
                    <EditableInput
                      value={String(item.presente ?? 0)}
                      originalValue={item.presente}
                      onChange={(val) => {
                        console.log('Updating presente:', {
                          oldValue: item.presente,
                          newValue: val,
                          itemId: item.id
                        });
                        updateData(tag, item.id, 'presente', val);
                      }}
                      suffix="%"
                      highlightChanges={false}
                    />
                    <div className="text-xs text-gray-500 mt-1">
                      ({calculateWeightedPercentage(item.presente || 0, item.id).toFixed(2)}% del total)
                    </div>
                  </TableCell>
                  <TableCell className="text-center border-r">
                    <div>{((item.anterior || 0) + (item.presente || 0)).toFixed(2)}%</div>
                    <div className="text-xs text-gray-500 mt-1">
                      ({calculateWeightedPercentage((item.anterior || 0) + (item.presente || 0), item.id).toFixed(2)}% del total)
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}

================
File: components/presupuesto/PresupuestoSection.tsx
================
import React from 'react'
import { motion, useInView } from 'framer-motion'
import { Package, Plus, Check, Trash2 } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import type {
  Command as CommandPrimitive,
  CommandInput as CommandInputPrimitive,
  CommandList as CommandListPrimitive,
  CommandEmpty as CommandEmptyPrimitive,
  CommandGroup as CommandGroupPrimitive,
  CommandItem as CommandItemPrimitive,
} from "cmdk"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { debounce } from 'lodash'
import { PresupuestoItem } from '@/lib/types/presupuesto'
import { MedicionItem } from '@/lib/types/medicion'
import { usePresupuesto } from '@/lib/context/PresupuestoContext'

type TableItem = PresupuestoItem | MedicionItem

// Type guard to check if item is a PresupuestoItem
function isPresupuestoItem(item: TableItem): item is PresupuestoItem {
  return 'quantity' in item && 'unitPrice' in item
}

// Type guard to check if item is a MedicionItem
function isMedicionItem(item: TableItem): item is MedicionItem {
  return 'anterior' in item && 'presente' in item && 'acumulado' in item
}

interface EditableInputProps {
  value: string | number;
  onChange: (val: string) => void;
  suffix?: string;
  prefix?: string;
  disabled?: boolean;
  highlightChanges?: boolean;
  originalValue?: string | number;
}

function EditableInput({
  value,
  onChange,
  suffix = "",
  prefix = "",
  disabled = false,
  highlightChanges = false,
  originalValue,
}: EditableInputProps) {
  const [localValue, setLocalValue] = React.useState(value.toString());

  React.useEffect(() => {
    setLocalValue(value.toString());
  }, [value]);

  const handleBlur = () => {
    onChange(localValue);
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      e.currentTarget.blur();
    }
  };

  return (
    <div className="flex items-center space-x-1">
      {prefix && <span className="text-sm text-muted-foreground">{prefix}</span>}
      <input
        type="text"
        value={localValue}
        onChange={(e) => setLocalValue(e.target.value)}
        onBlur={handleBlur}
        onKeyDown={handleKeyDown}
        className={cn(
          "h-7 w-full rounded-md border border-input bg-transparent px-2 text-sm",
          "focus:outline-none focus:ring-1 focus:ring-ring",
          disabled && "cursor-not-allowed opacity-50"
        )}
        disabled={disabled}
      />
      {suffix && <span className="text-sm text-muted-foreground">{suffix}</span>}
    </div>
  );
}

interface MedicionItemType extends PresupuestoItem {
  anterior: number;
  presente: number;
  acumulado: number;
  completedAmount: number;
}

interface PresupuestoSectionProps {
  tag: string;
  items: (PresupuestoItem | MedicionItemType)[];
  mode: 'presupuesto' | 'medicion';
  isNewSection?: boolean;
  allElements?: PresupuestoItem[];
  highlightChanges?: boolean;
}

export function PresupuestoSection({
  tag,
  items,
  mode = 'presupuesto',
  isNewSection = false,
  allElements,
  highlightChanges = false,
}: PresupuestoSectionProps) {
  const {
    updatePresupuestoItem,
    updateMedicionItem,
    addItemToSection,
    removeItemFromSection,
  } = usePresupuesto();

  const handleUpdateItem = (itemId: string, key: keyof PresupuestoItem, value: string) => {
    if (mode === 'presupuesto') {
      updatePresupuestoItem(tag, itemId, key, value);
    }
  };

  const handleUpdateMedicion = (itemId: string, value: string) => {
    if (mode === 'medicion') {
      const numValue = parseFloat(value);
      if (!isNaN(numValue)) {
        updateMedicionItem(tag, itemId, numValue);
      }
    }
  };

  const isMedicionItem = (item: PresupuestoItem | MedicionItemType): item is MedicionItemType => {
    return 'anterior' in item && 'presente' in item && 'acumulado' in item;
  };

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold">{tag}</h3>
        {mode === 'presupuesto' && allElements && (
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm">
                <Plus className="mr-2 h-4 w-4" />
                Agregar Item
              </Button>
            </PopoverTrigger>
            <PopoverContent className="p-0" align="end">
              <Command className="rounded-lg border shadow-md">
                <CommandInput placeholder="Buscar item..." className="h-9" />
                <CommandList>
                  <CommandEmpty>No se encontraron items.</CommandEmpty>
                  <CommandGroup heading="Items disponibles">
                    {allElements.map((element) => (
                      <CommandItem
                        key={element.id}
                        onSelect={() => addItemToSection(tag, element)}
                        className="flex items-center gap-2 px-2 py-1 cursor-pointer hover:bg-accent"
                      >
                        <Package className="h-4 w-4 opacity-50" />
                        <span>{element.name}</span>
                      </CommandItem>
                    ))}
                  </CommandGroup>
                </CommandList>
              </Command>
            </PopoverContent>
          </Popover>
        )}
      </div>

      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Código</TableHead>
              <TableHead>Descripción</TableHead>
              <TableHead>Unidad</TableHead>
              <TableHead>Cantidad</TableHead>
              <TableHead>Precio Unit.</TableHead>
              <TableHead>Total</TableHead>
              {mode === 'medicion' && (
                <>
                  <TableHead>Anterior</TableHead>
                  <TableHead>Presente</TableHead>
                  <TableHead>Acumulado</TableHead>
                </>
              )}
              {mode === 'presupuesto' && <TableHead />}
            </TableRow>
          </TableHeader>
          <TableBody>
            {items.map((item) => (
              <TableRow key={item.id}>
                <TableCell>{item.code}</TableCell>
                <TableCell>{item.name}</TableCell>
                <TableCell>{item.unit}</TableCell>
                <TableCell>
                  <EditableInput
                    value={item.quantity}
                    onChange={(val) => handleUpdateItem(item.id, 'quantity', val)}
                    disabled={mode === 'medicion'}
                    highlightChanges={highlightChanges}
                    originalValue={item.quantity}
                  />
                </TableCell>
                <TableCell>
                  <EditableInput
                    value={item.unitPrice}
                    onChange={(val) => handleUpdateItem(item.id, 'unitPrice', val)}
                    prefix="$"
                    disabled={mode === 'medicion'}
                    highlightChanges={highlightChanges}
                    originalValue={item.unitPrice}
                  />
                </TableCell>
                <TableCell>
                  <span className="text-sm">
                    ${(item.total || 0).toLocaleString('es-AR', { minimumFractionDigits: 2 })}
                  </span>
                </TableCell>
                {mode === 'medicion' && isMedicionItem(item) && (
                  <>
                    <TableCell>
                      <span className="text-sm">{item.anterior}%</span>
                    </TableCell>
                    <TableCell>
                      <EditableInput
                        value={item.presente}
                        onChange={(val) => handleUpdateMedicion(item.id, val)}
                        suffix="%"
                      />
                    </TableCell>
                    <TableCell>
                      <span className="text-sm">{item.acumulado}%</span>
                    </TableCell>
                  </>
                )}
                {mode === 'presupuesto' && (
                  <TableCell>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => removeItemFromSection(tag, item.id)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </TableCell>
                )}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}

================
File: components/presupuesto/SearchDialog.tsx
================
'use client'

import React, { useState, useCallback } from 'react'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Button } from "@/components/ui/button"
import { Checkbox } from "@/components/ui/checkbox"
import { debounce } from 'lodash'

interface TableItem {
  id: string | number
  name: string
  unit: string
  quantity: number
  unitPrice: number
  totalPrice: number
  price: number
  category: string
  accumulated?: string | number
  parcial?: string | number
  rubro?: string | number
  element_tags?: { tags: { name: string } }[]
  originalUnit?: string
  originalQuantity?: number
  originalUnitPrice?: number
  targetSection?: string
  nombre?: string
}

interface SearchDialogProps {
  isOpen: boolean
  onOpenChange: (open: boolean) => void
  onElementSelect: (elements: TableItem[]) => void
  sections: string[]
  elements: TableItem[]
}

export function SearchDialog({
  isOpen,
  onOpenChange,
  onElementSelect,
  sections,
  elements
}: SearchDialogProps) {
  const [searchValue, setSearchValue] = useState('')
  const [filteredElements, setFilteredElements] = useState<TableItem[]>([])
  const [selectedElements, setSelectedElements] = useState<Set<string | number>>(new Set())
  const [elementSections, setElementSections] = useState<Record<string | number, string>>({})

  // Get default section from element tags
  const getDefaultSection = (element: TableItem) => {
    if (element.category && element.category.length > 0) {
      const tagName = element.category;
      if (sections.includes(tagName)) {
        return tagName;
      }
    }
    return '';
  }

  // Handle search
  const handleSearch = useCallback(
    (searchTerm: string) => {
      setSearchValue(searchTerm)
      if (searchTerm.length >= 2) {
        const filtered = elements.filter((element: TableItem) => {
          const searchLower = searchTerm.toLowerCase()
          const nameLower = (element.nombre || element.name || '').toLowerCase()
          return nameLower.includes(searchLower)
        })
        setFilteredElements(filtered)
      } else {
        setFilteredElements([])
      }
    },
    [elements]
  )

  // Handle section selection
  const handleSectionSelect = (elementId: string | number, sectionName: string) => {
    setElementSections(prev => ({
      ...prev,
      [elementId]: sectionName
    }))
  }

  // Handle element selection
  const handleElementToggle = (elementId: string | number, element: TableItem) => {
    const newSelected = new Set(selectedElements)
    if (newSelected.has(elementId)) {
      newSelected.delete(elementId)
      const { [elementId]: _, ...rest } = elementSections
      setElementSections(rest)
    } else {
      newSelected.add(elementId)
      // Set default section when selecting element
      const defaultSection = getDefaultSection(element)
      setElementSections(prev => ({
        ...prev,
        [elementId]: defaultSection // Set the default section even if empty
      }))
    }
    setSelectedElements(newSelected)
  }

  // Handle add selected elements
  const handleAddSelected = () => {
    const elementsToAdd = filteredElements
      .filter(element => selectedElements.has(element.id))
      .map(element => ({
        ...element,
        targetSection: elementSections[element.id]
      }))
      .filter(element => element.targetSection) // Only add elements with a section selected

    if (elementsToAdd.length > 0) {
      onElementSelect(elementsToAdd)
      setSearchValue('')
      setFilteredElements([])
      setSelectedElements(new Set())
      setElementSections({})
    }
  }

  // Check if all filtered elements are selected
  const allSelected = filteredElements.length > 0 &&
    filteredElements.every(element => selectedElements.has(element.id))

  // Handle select all
  const handleSelectAll = () => {
    if (allSelected) {
      setSelectedElements(new Set())
      setElementSections({})
    } else {
      const newSelected = new Set(filteredElements.map(e => e.id))
      setSelectedElements(newSelected)
    }
  }
  console.log(selectedElements)
  console.log(elementSections)

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle>Agregar Elementos</DialogTitle>
        </DialogHeader>
        <div className="space-y-4">
          <div className="rounded-lg border shadow-md p-4">
            <Input
              placeholder="Buscar elementos (mínimo 2 caracteres)..."
              value={searchValue}
              onChange={(e) => handleSearch(e.target.value)}
            />
            <ScrollArea className="h-[200px]">
              {(!searchValue || searchValue.length < 2) ? (
                <div className="flex flex-col items-center justify-center py-6">
                  <span className="text-sm text-muted-foreground">
                    Ingrese al menos 2 caracteres para buscar
                  </span>
                </div>
              ) : filteredElements.length === 0 ? (
                <div className="flex flex-col items-center justify-center py-6">
                  <span className="text-sm text-muted-foreground">
                    No se encontraron elementos
                  </span>
                </div>
              ) : (
                <div className="space-y-2">
                  <div className="flex items-center gap-2 p-2 border-b">
                    <Checkbox
                      checked={allSelected}
                      onCheckedChange={handleSelectAll}
                      id="select-all"
                    />
                    <label htmlFor="select-all" className="text-sm font-medium">
                      Seleccionar todos
                    </label>
                  </div>
                  {filteredElements.map((element) => (
                    <div
                      key={element.id}
                      className="flex items-center gap-2 p-2 hover:bg-accent rounded-md"
                    >
                      <Checkbox
                        checked={selectedElements.has(element.id)}
                        onCheckedChange={() => handleElementToggle(element.id, element)}
                        id={`element-${element.id}`}
                      />
                      <label
                        htmlFor={`element-${element.id}`}
                        className="flex-grow cursor-pointer"
                      >
                        {element.name}
                      </label>
                    </div>
                  ))}
                </div>
              )}
            </ScrollArea>
          </div>

          {selectedElements.size > 0 && (
            <div className="rounded-lg border shadow-md p-4">
              <h3 className="text-sm font-medium mb-2">Elementos Seleccionados</h3>
              <ScrollArea className="h-[200px]">
                <div className="space-y-2">
                  {filteredElements
                    .filter(element => selectedElements.has(element.id))
                    .map((element) => (
                      <div
                        key={element.id}
                        className="flex items-center gap-2 p-2 hover:bg-accent rounded-md"
                      >
                        <span className="flex-grow">{element.name}</span>
                        <Select
                          value={elementSections[element.id]}
                          onValueChange={(value) => handleSectionSelect(element.id, value)}
                        >
                          <SelectTrigger
                            className={`w-[180px] ${elementSections[element.id]
                              ? 'border-green-500 bg-green-50 hover:bg-green-100'
                              : 'border-red-500 bg-red-50 hover:bg-red-100'
                              }`}
                          >
                            <SelectValue placeholder="Seleccionar sección" />
                          </SelectTrigger>
                          <SelectContent>
                            {sections.map((section) => (
                              <SelectItem
                                key={section}
                                value={section}
                                className="hover:bg-accent cursor-pointer"
                              >
                                {section}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    ))}
                </div>
              </ScrollArea>
            </div>
          )}
        </div>
        <DialogFooter>
          <div className="flex justify-between items-center w-full">
            <span className="text-sm text-muted-foreground">
              {selectedElements.size} elementos seleccionados
            </span>
            <Button
              onClick={handleAddSelected}
              disabled={selectedElements.size === 0 ||
                !Array.from(selectedElements).every(id => elementSections[id])}
            >
              Agregar Seleccionados
            </Button>
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

================
File: components/Table/custom-table.tsx
================
"use client"

import React, { useState, useEffect, useMemo, useCallback, useRef } from "react"
import {
  ChevronUp,
  ChevronDown,
  ArrowUpDown,
  DollarSign,
  Tag,
  Ruler,
  HammerIcon,
  FilterIcon,
} from "lucide-react"
import { useRouter, useSearchParams } from "next/navigation"
import {
  useReactTable,
  getCoreRowModel,
  ColumnDef,
  SortingState,
  getSortedRowModel,
  getFilteredRowModel,
  Column,
} from "@tanstack/react-table"
import { motion } from "framer-motion"

import { Table, TableHeader, TableHead, TableRow, TableBody, TableCell } from "@/components/ui/table"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Checkbox } from "@/components/ui/checkbox"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

import { DataTablePagination } from "./DataTablePagination"
import { DataTableFloatingToolbar } from "./DataTableFloatingToolbar"
import { EditableCell } from "../editable-cell"
import { Tooltip, TooltipContent, TooltipTrigger } from "../ui/tooltip"

// ─────────────────────────────────────────────────────
// Types
// ─────────────────────────────────────────────────────
export interface ElementRow {
  id: string
  insumos: string
  unidad: string
  precio: string
  tags: string[] | string
}

// ─────────────────────────────────────────────────────
// Helper: highlight text
// ─────────────────────────────────────────────────────
function highlightText(text: string, searchTerm: string): React.ReactNode {
  if (!searchTerm) return text
  const regex = new RegExp(`(${searchTerm})`, "gi")
  const parts = text.split(regex)
  return parts.map((part, index) =>
    regex.test(part) ? (
      <span key={index} className="bg-yellow-200 font-bold">
        {part}
      </span>
    ) : (
      part
    )
  )
}

// Simple helper to turn a ReactNode highlight into a pure string if needed
function highlightPlainString(text: string, searchTerm: string) {
  return String(highlightText(text, searchTerm))
}

// ─────────────────────────────────────────────────────
// Global filter function
// ─────────────────────────────────────────────────────
function globalFilterFn(row: any, columnId: string, filterValue: string) {
  const cellValue = row.getValue(columnId)
  if (cellValue == null) return false

  const lower = filterValue.toLowerCase()

  if (typeof cellValue === "string") {
    return cellValue.toLowerCase().includes(lower)
  }
  if (typeof cellValue === "number") {
    return cellValue.toString().includes(lower)
  }
  if (Array.isArray(cellValue)) {
    return cellValue.some((tag: string) => tag.toLowerCase().includes(lower))
  }
  return false
}

// ─────────────────────────────────────────────────────
// Server-side fetcher for a single page
// Adjust to match your API route
// ─────────────────────────────────────────────────────
async function fetchPageData({
  pageIndex,
  pageSize,
  searchTerm,
  sorting,
}: {
  pageIndex: number
  pageSize: number
  searchTerm: string
  sorting: SortingState
}): Promise<{
  rows: ElementRow[]
  total: number
}> {
  const sortParam = sorting
    .map((sort) => `${sort.id}:${sort.desc ? "desc" : "asc"}`)
    .join(",")

  // Example query: /api/tagsWithElements?page=0&limit=10&search=wood&sort=id:asc
  const url = `/api/tagsWithElements?page=${pageIndex}&limit=${pageSize}&search=${searchTerm}&sort=${sortParam}`
  const res = await fetch(url)
  if (!res.ok) {
    throw new Error(`Failed to fetch data: ${res.statusText}`)
  }

  const data = await res.json()

  // Adapt the data shape if needed
  const adaptTableData = (arr: any[], _type: string): ElementRow[] =>
    arr.map((el: any) => ({
      id: String(el.id),
      insumos: el.nombre || "",
      unidad: el.unidad || "",
      precio: (el.precio || "0.00").toString(),
      fecha_precio: el.fecha_precio || "",
      tags: el.category || "",
    }))

  const materials = adaptTableData(data.materiales || [], "materiales")
  const indices = adaptTableData(data.indices || [], "indices")
  const items = adaptTableData(data.items || [], "items")
  const jornales = adaptTableData(data.jornales || [], "jornales")

  return {
    rows: [...materials, ...indices, ...items, ...jornales],
    total: data.total,
  }
}

// ─────────────────────────────────────────────────────
// A small custom hook to store/fetch cached pages
// for a given combination of parameters
// ─────────────────────────────────────────────────────
interface PageResult {
  rows: ElementRow[]
  total: number
}

/**
 * usePagesCache
 * 
 * - Keeps a local map of pageIndex => { rows, total }.
 * - Reset the cache whenever the `cacheKey` (a string
 *   representing search/filter/sort/pageSize) changes.
 */
function usePagesCache(cacheKey: string) {
  const [cache, setCache] = useState<Record<number, PageResult>>({})
  const [highestCachedPage, setHighestCachedPage] = useState<number>(-1)

  console.log('cached pages ammount', Object.keys(cache).length)

  //console log the number of pages cached, not the ammount but the pages number

  console.log('cached pages', Object.keys(cache))

  // Whenever the key changes (e.g. user changes searchTerm),
  // reset the entire cache
  useEffect(() => {
    setCache({})
    setHighestCachedPage(-1)
  }, [cacheKey])

  const getPage = useCallback(
    (pageIndex: number) => {
      return cache[pageIndex] || null
    },
    [cache]
  )

  const setPage = useCallback(
    (pageIndex: number, data: PageResult) => {
      console.log(`📥 Caching page ${pageIndex}`, {
        existing: Object.keys(cache).length,
        new: pageIndex,
        highest: highestCachedPage
      })
      setCache((prev) => ({ ...prev, [pageIndex]: data }))
      setHighestCachedPage((prev) => Math.max(prev, pageIndex))
    },
    [cache, highestCachedPage]
  )

  return { getPage, setPage }
}

// ─────────────────────────────────────────────────────
// Reusable sorted-column header with icon + up/down
// ─────────────────────────────────────────────────────
interface HeaderWithSortProps {
  label: string
  column: Column<any, any>
  icon?: React.ComponentType<any>
}
const HeaderWithSort: React.FC<HeaderWithSortProps> = ({ label, column, icon: Icon }) => {
  const canSort = column.getCanSort()
  const sorted = column.getIsSorted() // false | 'asc' | 'desc'

  return (
    <Button
      variant="ghost"
      onClick={column.getToggleSortingHandler()}
      className="flex items-center space-x-1 -ml-3 px-3"
      disabled={!canSort}
    >
      <div className="flex items-center space-x-2">
        {Icon && <Icon className="h-4 w-4 text-gray-500" />}
        <span>{label}</span>
        {canSort && (
          sorted === "asc" ? (
            <ChevronUp className="h-4 w-4" />
          ) : sorted === "desc" ? (
            <ChevronDown className="h-4 w-4" />
          ) : (
            <ArrowUpDown className="h-4 w-4" />
          )
        )}
      </div>
    </Button>
  )
}

// ─────────────────────────────────────────────────────
// Animated wrapper for TableCells
// ─────────────────────────────────────────────────────
interface AnimatedTableCellProps {
  children: React.ReactNode
  className?: string
}
const AnimatedTableCell: React.FC<AnimatedTableCellProps> = ({ children, className }) => {
  return (
    <motion.div
      layout
      initial={{ width: 0 }}
      animate={{ width: "auto" }}
      exit={{ width: 0 }}
      transition={{ duration: 0.2 }}
      className={className}
    >
      {children}
    </motion.div>
  )
}

// ─────────────────────────────────────────────────────
// The Main Table Component
// ─────────────────────────────────────────────────────
export default function CustomTable() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const loadingRef = useRef(new Set<string>())

  // ─────────────────────────────────────────────────────
  // 1) Table Data & States
  // ─────────────────────────────────────────────────────
  const [tableData, setTableData] = useState<ElementRow[]>([])
  const [totalRows, setTotalRows] = useState(0)
  const [isLoading, setIsLoading] = useState(false)

  // 2) Sorting & Filtering & Pagination
  //    Initialize from URL (optional)
  const [sorting, setSorting] = useState<SortingState>([])
  const [globalFilter, setGlobalFilter] = useState("")
  const [pagination, setPagination] = useState({
    pageIndex: parseInt(searchParams.get("page") ?? "0") || 0,
    pageSize: parseInt(searchParams.get("size") ?? "10") || 10,
  })

  // 3) Build a "cache key" for the current combination
  //    of pageSize, globalFilter, sorting, etc.
  //    This ensures if you change filters, the old pages are discarded.
  const cacheKey = useMemo(() => {
    const sortKey = sorting.map((s) => s.id + ":" + (s.desc ? "desc" : "asc")).join(",")
    return `${globalFilter}__${sortKey}__size:${pagination.pageSize}`
  }, [globalFilter, sorting, pagination.pageSize])

  // 4) Row Selection
  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set())

  console.log('selectedIds', selectedIds)

  // 5) Table instance
  const columns = useMemo<ColumnDef<ElementRow>[]>(
    () => [
      {
        id: "selection",
        header: ({ table }) => {
          const handleCheckedChange = (checked: boolean | "indeterminate") => {
            const toggleHandler = table?.getToggleAllRowsSelectedHandler?.()
            if (toggleHandler) {
              const syntheticEvent = {
                target: { checked: checked === true },
              } as unknown as MouseEvent
              toggleHandler(syntheticEvent)
            }
          }
          return (
            <Checkbox
              checked={table?.getIsAllRowsSelected?.() ?? false}
              onCheckedChange={handleCheckedChange}
              className="mx-auto"
              aria-label="Select all"
            />
          )
        },
        cell: ({ row }) => {
          return (
            <Checkbox
              checked={row.getIsSelected()}
              onCheckedChange={(checked) => row.toggleSelected(!!checked)}
              aria-label="Select row"
            />
          )
        },
      },
      {
        accessorKey: "id",
        header: ({ column }) => <HeaderWithSort label="ID" column={column} />,
        cell: ({ row }) => (
          <EditableCell
            value={highlightPlainString(row.original.id, globalFilter)}
            onChange={(val) => handleEdit(row.original.id, "id", val)}
            className="justify-center"
          />
        ),
      },
      {
        accessorKey: "insumos",
        header: ({ column }) => <HeaderWithSort label="Insumos" column={column} icon={HammerIcon} />,
        cell: ({ row }) => (
          <EditableCell
            className="font-medium"
            value={row.original.insumos}
            onChange={(val) => handleEdit(row.original.id, "insumos", val)}
            displayValue={highlightText(row.original.insumos, globalFilter)}
            onClick={() => handleToggleSelect(row.original.id)}
          />
        ),
      },
      {
        accessorKey: "unidad",
        header: ({ column }) => <HeaderWithSort label="Unidad" column={column} icon={Ruler} />,
        cell: ({ row }) => (
          <EditableCell
            value={highlightPlainString(row.original.unidad, globalFilter)}
            onChange={(val) => handleEdit(row.original.id, "unidad", val)}
          />
        ),
      },
      {
        accessorKey: "precio",
        header: ({ column }) => <HeaderWithSort label="Precio" column={column} icon={DollarSign} />,
        cell: ({ row }) => {
          const formatDate = (dateString: string) => {
            if (!dateString) return '';
            const date = new Date(dateString);
            return date.toLocaleDateString('es-ES', { year: 'numeric', month: '2-digit' });
          };

          return (
            <div className="flex items-center gap-2">
              <EditableCell
                value={Array.isArray(row.original.precio)
                  ? highlightPlainString(row.original.precio[0], globalFilter)
                  : highlightPlainString(row.original.precio, globalFilter)}
                onChange={(val) => handleEdit(row.original.id, "precio", val)}
              />
              <Badge variant="outline" className="text-xs">
                {Array.isArray(row.original.precio)
                  ? formatDate(row.original.precio[1])
                  : formatDate(row.original.precio[1])}
              </Badge>
            </div>
          );
        },
      },
      {
        accessorKey: "tags",
        header: ({ column }) => <HeaderWithSort label="Tags" column={column} icon={Tag} />,
        cell: ({ row }) => {
          const tags = row.original.tags
          return (
            <div className="flex flex-wrap gap-1">
              {Array.isArray(tags) ? (
                tags.map((tag, i) => {
                  const truncated = isTextTruncated(tag, 10); // Adjust maxLength as needed
                  return (
                    truncated ? (
                      <Tooltip>
                        <TooltipTrigger>
                          <Badge
                            key={`${row.original.id}-${tag}-${i}`}
                            variant="accent"
                            className="max-w-[150px] truncate text-ellipsis"
                          >
                            {tag}
                          </Badge>
                        </TooltipTrigger>
                        <TooltipContent>
                          {tag}
                        </TooltipContent>
                      </Tooltip>
                    ) : (
                      <Badge
                        key={`${row.original.id}-${tag}-${i}`}
                        variant="accent"
                        className="max-w-[150px] truncate text-ellipsis"
                      >
                        {tag}
                      </Badge>
                    )
                  );
                })
              ) : (
                (() => {
                  const truncated = isTextTruncated(tags, 19); // Adjust maxLength as needed
                  return (
                    truncated ? (
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Badge
                            key={`${row.original.id}-${tags}`}
                            variant="accent"
                            className="max-w-[150px] truncate block"
                          >
                            {tags}
                          </Badge>
                        </TooltipTrigger>
                        <TooltipContent>
                          {tags}
                        </TooltipContent>
                      </Tooltip>
                    ) : (
                      <Badge
                        key={`${row.original.id}-${tags}`}
                        variant="accent"
                        className="max-w-[150px] truncate block"
                      >
                        {tags}
                      </Badge>
                    )
                  );
                })()
              )}
            </div>
          )
        },
      },
    ],
    []
  )

  const table = useReactTable({
    data: tableData,
    columns,
    pageCount: Math.ceil(totalRows / pagination.pageSize),
    state: {
      sorting,
      globalFilter,
      pagination,
      rowSelection: Object.fromEntries([...selectedIds].map((id) => [id, true])),
    },
    onSortingChange: setSorting,
    onGlobalFilterChange: setGlobalFilter,
    onPaginationChange: (updater) => {
      const newPagination = typeof updater === 'function' ? updater(pagination) : updater;
      const targetPage = newPagination.pageIndex;

      // Only allow navigation if the page is cached or it's going backwards
      if (getPage(targetPage) || targetPage < pagination.pageIndex) {
        setPagination(newPagination);
      } else {
        // If page is not cached, trigger its fetch first
        const loadingKey = `${targetPage}-${cacheKey}`;
        if (!loadingRef.current.has(loadingKey)) {
          fetchPageData({
            pageIndex: targetPage,
            pageSize: pagination.pageSize,
            searchTerm: globalFilter,
            sorting,
          }).then(({ rows, total }) => {
            setPage(targetPage, { rows, total });
            setPagination(newPagination);
          }).catch(err => {
            console.error("Failed to fetch page:", err);
          });
        }
      }
    },
    globalFilterFn,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getSortedRowModel: getSortedRowModel(),
    manualPagination: true,
    enableRowSelection: true,
    getRowId: (row) => row.id,
    onRowSelectionChange: (updater) => {
      const newSelection =
        typeof updater === "function"
          ? updater(Object.fromEntries([...selectedIds].map((id) => [id, true])))
          : updater
      setSelectedIds(new Set(Object.keys(newSelection)))
    },
  })

  // ─────────────────────────────────────────────────────
  // 6) The pagesCache hook
  // ─────────────────────────────────────────────────────
  const { getPage, setPage } = usePagesCache(cacheKey)

  // Add a new effect just for URL updates
  useEffect(() => {
    if (searchParams) {
      const currentPage = searchParams.get("page")
      const currentSize = searchParams.get("size")

      // Only update URL if values actually changed
      if (currentPage !== pagination.pageIndex.toString() ||
        currentSize !== pagination.pageSize.toString()) {
        const params = new URLSearchParams(searchParams.toString())
        params.set("page", pagination.pageIndex.toString())
        params.set("size", pagination.pageSize.toString())
        router.replace(`?${params.toString()}`, { scroll: false })
      }
    }
  }, [pagination.pageIndex, pagination.pageSize])

  // Data loading effect
  useEffect(() => {
    const loadData = async () => {
      const loadingKey = `${pagination.pageIndex}-${cacheKey}`
      if (loadingRef.current.has(loadingKey)) return;

      // 1) Check cache first
      const cached = getPage(pagination.pageIndex)
      if (cached) {
        // If cached, just use it
        setTableData(cached.rows)
        setTotalRows(cached.total)
        return;
      }

      // Otherwise, fetch from server
      try {
        loadingRef.current.add(loadingKey)
        setIsLoading(true)
        const { rows, total } = await fetchPageData({
          pageIndex: pagination.pageIndex,
          pageSize: pagination.pageSize,
          searchTerm: globalFilter,
          sorting,
        })

        if (!getPage(pagination.pageIndex)) { // Double check cache before updating
          setTableData(rows)
          setTotalRows(total)
          // Store in cache
          setPage(pagination.pageIndex, { rows, total })
          // Trigger prefetch immediately after initial data load
          prefetchPages(total);
        }
      } catch (err) {
        console.error("Error fetching data:", err)
      } finally {
        setIsLoading(false)
        loadingRef.current.delete(loadingKey)
      }
    }

    // Helper function to fetch and cache a single page
    const fetchAndCachePage = async (pageIndex: number, maxPage: number) => {
      if (pageIndex < 0 || pageIndex >= maxPage || getPage(pageIndex)) return;

      const prefetchKey = `${pageIndex}-${cacheKey}`
      if (loadingRef.current.has(prefetchKey)) return;

      try {
        loadingRef.current.add(prefetchKey)
        const { rows, total } = await fetchPageData({
          pageIndex,
          pageSize: pagination.pageSize,
          searchTerm: globalFilter,
          sorting,
        })
        if (!getPage(pageIndex)) { // Double check cache before updating
          setPage(pageIndex, { rows, total })
        }
      } catch (err) {
        console.warn(`Prefetch of page ${pageIndex} failed.`, err)
      } finally {
        loadingRef.current.delete(prefetchKey)
      }
    }

    // Prefetch function that can be called both after initial load and on navigation
    const prefetchPages = async (total: number) => {
      const maxPage = Math.ceil(total / pagination.pageSize)
      const prefetchCount = 5

      // Prefetch next and previous pages in parallel
      const prefetchPromises = [];
      for (let i = 1; i <= prefetchCount; i++) {
        prefetchPromises.push(fetchAndCachePage(pagination.pageIndex + i, maxPage));
        prefetchPromises.push(fetchAndCachePage(pagination.pageIndex - i, maxPage));
      }

      await Promise.all(prefetchPromises);
    }

    // Always load the main data
    loadData();

    // Also set up prefetch on navigation changes
    if (totalRows > 0) {
      const timeoutId = setTimeout(() => prefetchPages(totalRows), 100);
      return () => clearTimeout(timeoutId);
    }

  }, [pagination.pageIndex, cacheKey])

  // ─────────────────────────────────────────────────────
  // 8) Handlers
  // ─────────────────────────────────────────────────────
  function handleToggleSelect(id: string) {
    setSelectedIds((prev) => {
      const newSet = new Set(prev)
      if (newSet.has(id)) newSet.delete(id)
      else newSet.add(id)
      return newSet
    })
  }

  function handleEdit(itemId: string, field: keyof ElementRow, value: string) {
    // Example local update
    setTableData((prev) =>
      prev.map((row) => (row.id === itemId ? { ...row, [field]: value } : row))
    )
    // You could also update the cache if you want these changes persistent
  }

  function handleDeleteSelected() {
    setTableData((prev) => prev.filter((row) => !selectedIds.has(row.id)))
    setSelectedIds(new Set())
  }

  function handleDuplicateSelected() {
    const newRows: ElementRow[] = []
    for (const row of tableData) {
      if (selectedIds.has(row.id)) {
        const newId = `${row.id}-copy-${Math.floor(Math.random() * 1000)}`
        newRows.push({ ...row, id: newId })
      }
    }
    setTableData((prev) => [...prev, ...newRows])
  }

  function handleExecuteSelected() {
    console.log("Execute action for selected:", [...selectedIds])

    // redirect to presupuesto
    router.push(`/presupuesto?selectedIds=${[...selectedIds].join(',')}`);
  }

  // ─────────────────────────────────────────────────────
  // 9) Render
  // ─────────────────────────────────────────────────────
  // console.log(tableData)
  return (
    <div className="container p-4 flex flex-col gap-4 relative">
      {/* Top actions / toolbar */}
      <div className="flex justify-between items-center">
        <div className="flex gap-3">
          <Input
            placeholder="Buscar..."
            value={globalFilter ?? ""}
            onChange={(e) => setGlobalFilter(e.target.value)}
          />
          {selectedIds.size > 0 && (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="secondary" className="h-10">
                  Actions ({selectedIds.size})
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuLabel>Bulk Actions</DropdownMenuLabel>
                <DropdownMenuItem onClick={handleDeleteSelected}>Delete</DropdownMenuItem>
                <DropdownMenuItem onClick={handleDuplicateSelected}>Duplicate</DropdownMenuItem>
                <DropdownMenuItem onClick={handleExecuteSelected}>Execute</DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          )}
        </div>

        <div className="flex gap-2">
          <Button variant="secondary">
            <FilterIcon />
          </Button>
          <Button variant="secondary">Actions ({selectedIds.size})</Button>
          <Button variant="default">Actions</Button>
        </div>
      </div>

      {/* Table Container */}
      <Card className="max-h-[80vh] overflow-auto rounded-lg border shadow-3sm">
        <Table className="w-full">
          <TableHeader className="shadow-2sm">
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead
                    key={header.id}
                    colSpan={header.colSpan}
                    className={`py-0 px-4 ${header.column.id === "id" ? "w-2 p-0" : ""
                      } ${header.column.id === "selection"
                        ? "flex items-center justify-center pl-2"
                        : ""
                      }`}
                  >
                    {header.isPlaceholder
                      ? null
                      : typeof header.column.columnDef.header === 'function'
                        ? header.column.columnDef.header(header.getContext())
                        : header.column.columnDef.header}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody className="text-foreground-dim">
            {table.getRowModel().rows.map((row) => (
              <TableRow key={row.id} className="h-10">
                {row.getVisibleCells().map((cell) => (
                  <TableCell
                    key={cell.id}
                    className={`py-0 px-4 ${cell.column.id === "id" || cell.column.id === "selection"
                      ? "text-center align-middle"
                      : ""
                      }`}
                  >
                    <AnimatedTableCell>
                      {typeof cell.column.columnDef.cell === 'function'
                        ? cell.column.columnDef.cell(cell.getContext())
                        : cell.column.columnDef.cell}
                    </AnimatedTableCell>
                  </TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </Card>

      {/* Extra toolbar (optional) */}
      <DataTableFloatingToolbar
        table={table}
        data={tableData}
        columnsConfig={table.getAllColumns()}
      />

      {/* Pagination UI */}
      <DataTablePagination
        table={table}
        isLoading={isLoading}
        totalPages={Math.ceil(totalRows / pagination.pageSize)}
      />
    </div>
  )
}

function isTextTruncated(text: string, maxLength: number): boolean {
  return text.length > maxLength;
}

================
File: components/Table/DataTableFacetedFilter.tsx
================
// tableComponent/Components/DataTableFacetedFilter.tsx
import * as React from "react"
import { Column } from "@tanstack/react-table"
import { Label } from "../ui/label.tsx"
import { CheckIcon, PlusCircleIcon } from "lucide-react"
import { Button } from "../ui/button.tsx"
import { Badge } from "../ui/badge.tsx"
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "../ui/command.tsx"
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover.tsx"
import { RadioGroup, RadioGroupItem } from "../ui/radio-group.tsx"
import { Separator } from "../ui/separator.tsx"
import { cn } from "@/lib/utils.ts"

interface DataTableFacetedFilterProps<TData, TValue> {
  column?: Column<TData, TValue>
  title?: string
  options: {
    label: string
    value: string
    icon?: React.ComponentType<{ className?: string }>
  }[]
  onResetFilters: () => void // Add this new prop

}

export default function DataTableFacetedFilter<TData, TValue>({
  column,
  title,
  options,
  onResetFilters, // Add this new prop

}: DataTableFacetedFilterProps<TData, TValue>) {
  const facets = column?.getFacetedUniqueValues()
  // const selectedValues = new Set(column?.getFilterValue() as string[])
  const [selectedValues, setSelectedValues] = React.useState(new Set());

  React.useEffect(() => {
    // Initialize selectedValues based on column's filter value
    const initialFilterValue = column?.getFilterValue() as string[] | undefined;
    if (initialFilterValue && Array.isArray(initialFilterValue)) {
      setSelectedValues(new Set(initialFilterValue));
    }
  }, [column]);

  const handleSelect = (value: string) => {
    const newSelectedValues = new Set(selectedValues);
    if (newSelectedValues.has(value)) {
      newSelectedValues.delete(value);
    } else {
      if (options.length === 2) {
        // If there are only two options, clear the previous selection
        newSelectedValues.clear();
      }
      newSelectedValues.add(value);
    }
    setSelectedValues(newSelectedValues);
    const filterValues = Array.from(newSelectedValues);
    column?.setFilterValue(filterValues.length ? filterValues : undefined);
  };

  // Add this effect to listen for filter resets
  React.useEffect(() => {
    const handleReset = () => {
      setSelectedValues(new Set());
    };

    // Call handleReset directly when onResetFilters is called
    onResetFilters();

    return () => {
      // No cleanup needed since we're not registering a callback
    };
  }, [onResetFilters]);

  const renderCheckbox = () => (
    // @ts-ignore
    <CommandList>
      {/* @ts-ignore */}
      <CommandEmpty>No results found.</CommandEmpty>
      {/* @ts-ignore */}
      <CommandGroup>
        {/* @ts-ignore */}
        <CommandInput placeholder={title} />

        {options.map((option) => {
          const isSelected = selectedValues.has(option.value);
          return (
            // @ts-ignore
            <CommandItem
              key={option.value}
              onSelect={() => handleSelect(option.value)}
            >
              <div
                className={cn(
                  "tw-mr-2 tw-flex tw-h-4 tw-w-4 tw-items-center tw-justify-center tw-rounded-sm tw-border tw-border-primary",
                  isSelected
                    ? "tw-bg-primary tw-text-primary-foreground"
                    : "tw-opacity-50 [&_svg]:tw-invisible"
                )}
              >
                <CheckIcon className={cn("tw-h-4 tw-w-4")} />
              </div>
              {option.icon && (
                <option.icon className="tw-mr-2 tw-h-4 tw-w-4 tw-text-muted-foreground" />
              )}
              <span>{option.label}</span>
              {facets?.get(option.value) && (
                <span className="tw-ml-auto tw-flex tw-h-4 tw-w-4 tw-items-center tw-justify-center tw-font-mono tw-text-xs">
                  {facets.get(option.value)}
                </span>
              )}
            </CommandItem>
          );
        })}
      </CommandGroup>
    </CommandList>
  );

  const renderRadioGroup = ({ options, selectedValues, handleSelect }: { options: any, selectedValues: any, handleSelect: any }) => {
    return (
      <RadioGroup className="tw-flex tw-flex-col tw-py-2" value={[...selectedValues].length > 0 ? [...selectedValues][0] : ''}>
        {options.map((option: any) => (
          <div key={option.value} className="tw-flex tw-items-center tw-space-x-2 tw-px-3 tw-py-2">
            <RadioGroupItem onClick={() => handleSelect(option.value)} value={option.value} id={`radio-${option.value}`} />
            {option.icon && (
              <option.icon className="tw-mr-2 tw-h-4 tw-w-4 tw-text-muted-foreground" />
            )}
            <Label className="tw-flex tw-flex-1" htmlFor={`radio-${option.value}`}>{option.label}</Label>
          </div>
        ))}
      </RadioGroup>
    )
  }

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm" className="tw-h-8 tw-border-dashed">
          <PlusCircleIcon className="lg:tw-mr-2 lg:tw-h-4 lg:tw-w-4 tw-h-5 tw-w-5" />
          <span className="tw-hidden lg:tw-flex">
            {title}
          </span>
          {selectedValues?.size > 0 && (
            <>
              <Separator orientation="vertical" className="tw-mx-2 tw-h-4" />
              <Badge
                variant="secondary"
                className="tw-rounded-sm tw-px-1 tw-font-normal lg:tw-hidden"
              >
                {selectedValues.size}
              </Badge>
              <div className="tw-hidden tw-space-x-1 lg:tw-flex">
                {selectedValues.size > 2 ? (
                  <Badge
                    variant="secondary"
                    className="tw-rounded-sm tw-px-1 tw-font-normal"
                  >
                    {selectedValues.size} selected
                  </Badge>
                ) : (
                  options
                    .filter((option) => selectedValues.has(option.value))
                    .map((option) => (
                      <Badge
                        variant="secondary"
                        key={option.value}
                        className="tw-rounded-sm tw-px-1 tw-font-normal"
                      >
                        {option.label}
                      </Badge>
                    ))
                )}
              </div>
            </>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="tw-w-[200px] tw-p-0 tw-bg-background" align="start">
        {/* @ts-ignore */}
        <Command>
          {options.length === 2 ? renderRadioGroup({ options, selectedValues, handleSelect }) : renderCheckbox()}

        </Command>
      </PopoverContent>
    </Popover>
  )
}

================
File: components/Table/DataTableFloatingToolbar.tsx
================
"use client";

import * as React from "react"
import { Table } from "@tanstack/react-table";
import { CheckCircle, CrossIcon, Download, PlusCircle, Trash2Icon, XIcon } from "lucide-react";
import { Input } from "../ui/input";
import { Button } from "../ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "../ui/dropdown-menu";
import { useToast } from "../../lib/hooks/use-toast";
import DataTableFacetedFilter from "./DataTableFacetedFilter";
import { motion, AnimatePresence } from "framer-motion";
import { Separator } from "@radix-ui/react-dropdown-menu";

interface DataTableToolbarProps<TData> {
  table: Table<TData>;
  data: any;
  columnsConfig: any;
}

export function DataTableFloatingToolbar<TData>({
  table,
  data,
  columnsConfig,
}: DataTableToolbarProps<TData>) {
  const selectedRows = table.getSelectedRowModel().rows.map(row => row.original);

  return (
    <AnimatePresence>
      {selectedRows.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 10 }}
          exit={{ opacity: 0, y: 30 }}
          className="flex flex-col justify-center items-center gap-2 absolute h-10 w-[450px] rounded-lg shadow-simple bg-black -bottom-10 left-[35%]"
        >
          <div className="flex items-center justify-between p-2">
            <div className="flex items-center gap-2">
              <span className="text-sm text-white">
                {table.getFilteredSelectedRowModel().rows.length} selected
              </span>
              <Separator className="bg-[#ffffff40] h-8 w-[1px]" />
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => { }}
                className="text-white hover:text-white/60"
              >
                <PlusCircle className="h-4 w-4 mr-2" />
                Duplicate
              </Button>

              <Separator className="bg-[#ffffff40] h-8 w-[1px]" />

              <Button
                variant="ghost"
                size="sm"
                onClick={() => { }}
                className="text-[hsl(var(--red-400))] hover:text-[hsl(var(--red-600))]"
              >
                <Trash2Icon className="h-4 w-4 mr-2" />
                Delete
              </Button>

              <Separator className="bg-[#ffffff40] h-8 w-[1px]" />

              <Button
                variant="ghost"
                size="sm"
                onClick={() => { }}
                className="text-white hover:text-white/60"
              >
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

================
File: components/Table/DataTablePagination.tsx
================
// tableComponent/Components/DataTablePagination.tsx

"use client";
import * as React from "react"

import { Table } from "@tanstack/react-table";
import { ChevronLeft, ChevronLeftIcon, ChevronRight, ChevronRightIcon, ChevronsLeft, ChevronsRight } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { Button } from "../ui/button";

interface DataTablePaginationProps<TData> {
  table: Table<TData>;
  isLoading?: boolean;
  totalPages: number;
}

export function DataTablePagination<TData>({
  table,
  isLoading = false,
  totalPages,
}: DataTablePaginationProps<TData>) {
  return (
    <div className="flex items-center justify-between px-2">
      <div className="hidden lg:flex flex-1 text-sm text-muted-foreground">
        {table.getFilteredSelectedRowModel().rows.length} de{" "}
        {table.getFilteredRowModel().rows.length} fila(s) seleccionadas.
      </div>
      <div className="flex items-center md:space-x-6 lg:space-x-8">
        <div className="hidden lg:flex items-center space-x-2 flex flex-1">
          {/* Texto para traducir */}
          {/* <p className="text-sm font-medium whitespace-nowrap">Filas por página</p> */}
          <Select
            value={`${table.getState().pagination.pageSize}`}
            onValueChange={(value) => {
              table.setPageSize(Number(value));
            }}
          >
            <SelectTrigger className="h-8 w-[70px]">
              <SelectValue placeholder={table.getState().pagination.pageSize} />
            </SelectTrigger>
            <SelectContent side="top">
              {[10, 20, 30, 40, 50].map((pageSize) => (
                <SelectItem key={pageSize} value={`${pageSize}`}>
                  {pageSize}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="flex max-w-[150px] items-center justify-center text-sm font-medium pr-3 lg:pr-none">
          Página {table.getState().pagination.pageIndex + 1} de {totalPages}
        </div>
        <div className="flex items-center lg:space-x-2">
          <Button
            variant="ghost"
            size="icon"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage() || isLoading}
          >
            <span className="sr-only">Go to first page</span>
            <ChevronsLeft className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 p-0"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage() || isLoading}
          >
            <span className="sr-only">Go to previous page</span>
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 p-0"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage() || isLoading}
          >
            <span className="sr-only">Go to next page</span>
            <ChevronRight className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(totalPages - 1)}
            disabled={!table.getCanNextPage() || isLoading}
          >
            <span className="sr-only">Go to last page</span>
            <ChevronsRight className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}

================
File: components/Table/DataTableToolbar.tsx
================
// tableComponent/Components/DataTableToolbar.tsx

"use client";

import * as React from "react"
import { Table } from "@tanstack/react-table";
import { CheckCircle, CrossIcon, Download, PlusCircle } from "lucide-react";
import { Input } from "../ui/input.tsx";
import { Button } from "../ui/button.tsx";
import { DropdownMenu, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "../ui/dropdown-menu.tsx";
import { useToast } from "../../lib/hooks/use-toast.ts";
import DataTableFacetedFilter from "./DataTableFacetedFilter";

interface DataTableToolbarProps<TData> {
  table: Table<TData>;
  data: any;
  columnsConfig: any;
  globalFilter: string | null;
  setGlobalFilter: (filterValue: string) => void;
}
export function DataTableToolbar<TData>({
  table,
  data,
  columnsConfig,
  globalFilter,
  setGlobalFilter,
}: DataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0;
  const selectedRows = table.getSelectedRowModel().rows.map(row => row.original);
  const filterColumn = columnsConfig?.config?.textInputFilter || "id"; // Use the first column as the default filter column
  const { toast } = useToast()

  // Add this state to manage filter reset callbacks
  const [resetCallbacks, setResetCallbacks] = React.useState<(() => void)[]>([]);

  // Add this function to register reset callbacks
  const registerResetCallback = React.useCallback((callback: () => void) => {
    setResetCallbacks(prev => [...prev, callback]);
  }, []);

  const handleResetFilters = () => {
    table.resetColumnFilters();
    setGlobalFilter("");
    // Call all registered reset callbacks
    resetCallbacks.forEach(callback => callback());
  };

  const isValidDate = (value: any) => {
    return (
      (value instanceof Date && !isNaN(value as any)) ||
      (typeof value === 'string' &&
        /\d{2,4}-\d{1,2}-\d{1,2}|\d{1,2}\/\d{1,2}\/\d{2,4}/.test(value) &&
        !isNaN(new Date(value).getTime()))
    );
  };

  const handleAction = (action: any) => {
    if (action.value === 'export') {
      // handleExport();
    } else if (action.value === 'delete') {
      // Placeholder for delete action
      console.log("Delete action triggered");
    }
  };

  const actions = [
    { value: 'export', label: 'Export CSV' },
    // { value: 'delete', label: 'Delete' }
  ];

  const handleFilterChange = (event: any) => {
    if (filterColumn === "global") return setGlobalFilter(event.target.value);
    else return table.getColumn(filterColumn)?.setFilterValue(event.target.value);
  };


  return (
    <div className="tw-flex tw-flex-col tw-justify-center tw-items-start tw-gap-2">
      <div className="tw-flex tw-flex-col lg:tw-flex-row lg:tw-items-center tw-items-start tw-justify-between tw-w-full tw-gap-3 lg:tw-gap-none">
        <div className="tw-flex tw-flex-1 tw-items-center  tw-space-x-2 tw-text-sm">
          {/* Texto para traducir */}
          <Input
            placeholder={filterColumn !== "global" ? `Filtrar ${table.getColumn(filterColumn)?.columnDef.header} ...` : 'Buscar ...'}
            value={globalFilter ? globalFilter : (table.getColumn(filterColumn)?.getFilterValue() as string)}
            onChange={handleFilterChange}
            className="tw-h-8 tw-w-[150px] lg:tw-w-[250px]"
          />
          {columnsConfig.columns?.map((col: any) => (
            col.filterType && table.getColumn(col.accessorKey) && col.filterOptions && (
              <DataTableFacetedFilter
                key={col.accessorKey}
                column={table.getColumn(col.accessorKey)}
                title={col.header}
                options={col.filterOptions}
                onResetFilters={() => registerResetCallback(() => { })}
              />
            )
          ))}
          {isFiltered && (
            <Button
              variant="ghost"
              onClick={handleResetFilters} // Use the new handleResetFilters function
              className="tw-h-8 tw-px-2 lg:tw-px-3"
            >
              {/* Texto para traducir */}
              <span className="tw-hidden lg:tw-flex">
                Resetear
              </span>
              <CrossIcon className="lg:tw-ml-2 lg:tw-h-4 lg:tw-w-4 tw-h-5 tw-w-5" />
            </Button>
          )}
        </div>
        <div className="tw-flex tw-items-center lg:tw-space-x-2">
          {/* <DataTableViewOptions table={table} /> */}
        </div>
      </div>
      <div
        className={`tw-transition-all tw-transform ${selectedRows.length > 0 ? 'tw-max-h-screen' : 'tw-max-h-0'} tw-overflow-hidden tw-duration-500 tw-ease-in-out`}
      >
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            {/* Texto para traducir */}
            <Button variant="outline">Acciones</Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="tw-w-56">
            {/* Texto para traducir */}
            <DropdownMenuLabel>Acciones Disponibles</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              {/* <DropdownMenuItem className="tw-cursor-pointer" onClick={(e) => {
                handleAction(e);
                toast({
                  title: <div className="tw-flex tw-gap-3"><CheckCircle />"Row Deleted"</div>,
                  description: "All the selected rows data has been deleted.",
                })
              }}>
                <LogOut className="tw-mr-2 tw-h-4 tw-w-4" />
                <span>Delete</span>
              </DropdownMenuItem> */}
            </DropdownMenuGroup>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

    </div>
  );
}

================
File: components/team-switcher.tsx
================
"use client"

import * as React from "react"
import { ChevronsUpDown, Plus } from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"
import Link from "next/link"

export function TeamSwitcher({
  teams,
}: {
  teams: {
    name: string
    logo: React.ElementType
    plan: string
  }[]
}) {
  const { isMobile } = useSidebar()
  const [activeTeam, setActiveTeam] = React.useState(teams[0])

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          {/* <DropdownMenuTrigger asChild> */}
          <Link href="/">
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <div className="flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary border border-sidebar-primary-foreground text-sidebar-primary-foreground">
                <activeTeam.logo className="size-4" />
              </div>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">
                  {activeTeam.name}
                </span>
                <span className="truncate text-xs">{activeTeam.plan}</span>
              </div>
              <ChevronsUpDown className="ml-auto" />
            </SidebarMenuButton>
          </Link>
          {/* </DropdownMenuTrigger> */}
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            align="start"
            side={isMobile ? "bottom" : "right"}
            sideOffset={4}
          >
            <DropdownMenuLabel className="text-xs text-muted-foreground">
              Teams
            </DropdownMenuLabel>
            {teams.map((team, index) => (
              <DropdownMenuItem
                key={team.name}
                onClick={() => setActiveTeam(team)}
                className="gap-2 p-2"
              >
                <div className="flex size-6 items-center justify-center rounded-sm border">
                  <team.logo className="size-4 shrink-0" />
                </div>
                {team.name}
                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>
              </DropdownMenuItem>
            ))}
            <DropdownMenuSeparator />
            <DropdownMenuItem className="gap-2 p-2">
              <div className="flex size-6 items-center justify-center rounded-md border bg-background">
                <Plus className="size-4" />
              </div>
              <div className="font-medium text-muted-foreground">Add team</div>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}

================
File: components/testDocument/page.tsx
================
'use client'

import React, { useEffect, useState, useCallback } from 'react'
import { useParams, useSearchParams } from 'next/navigation'
import { Check, ChevronsUpDown, Plus, Trash2 } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { debounce } from 'lodash'
import { Card } from '@/components/ui/card'

import { Tabs } from "@/components/ui/tabs";

interface TableItem {
  id: string | number
  name: string
  unit: string
  price: number
  category: string
  accumulated?: string | number
  parcial?: string | number
  rubro?: string | number
}

interface GroupedData {
  [tag: string]: TableItem[]
}

const testData = {
  "MATERIALES ELECTRICOS": [
    {
      "id": 1,
      "name": "VIGUETAS Y LADRILLOS ",
      "unit": "NULL",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Viguetas pretensadas serie 1 (SERIE ASTER 2 ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Viguetas pretensadas serie 2 (SERIE ASTER 3 ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 5,
      "name": "Viguetas pretensadas serie 5 (SERIE \"C\" 5 ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "Viguetas pretensadas serie 7 (SERIE \"D\" 6ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "Ladrillos cer?micos de 9,5 x 25 x 40 cm",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "Ladrillos cer?micos de 12,5 x 25 x 40 cm",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "Ladrillos de poliest. expandido de 12 x 100 x 40 cm",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "Disyuntores diferenciales": [
    {
      "id": 16,
      "name": "Arrancador para corriente alterna de 20 w",
      "unit": "c/u",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 17,
      "name": "Arrancador para corriente alterna de 40 w",
      "unit": "c/u",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "MATERIALES CA├æERIA CLOACAL Y AGUA": [
    {
      "id": 1,
      "name": "DEMOLICION Y RETIROS",
      "unit": "NULL",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Demolici?n techo F?C? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Demolici?n techo H?G? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 5,
      "name": "Demolici?n de pavimentos",
      "unit": "m3",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "Demolici?n tabique esp. 0,10",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "Demolici?n de piso de mosaicos",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "Demolici?n contrapiso de Hormig?n de cemento",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "Retiro de aberturas hasta 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "INSTALACION DE AIRE ACONDICIONADO": [
    {
      "id": 16,
      "name": "Retiro de aberturas > 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 17,
      "name": "Picado de mamposteria ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "ampliacion aula",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "escuela nueva",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "NULL",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "refaccion max",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "CA├æO DE P.V.C. P/CLOACA Y VENTILACION": [
    {
      "id": 1,
      "name": "DEMOLICION Y RETIROS",
      "unit": "NULL",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Demolici?n techo F?C? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "510",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Demolici?n techo H?G? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 5,
      "name": "Demolici?n de pavimentos",
      "unit": "m3",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "Demolici?n tabique esp. 0,10",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "310",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "Demolici?n de piso de mosaicos",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "Demolici?n contrapiso de Hormig?n de cemento",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "Retiro de aberturas hasta 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 16,
      "name": "Retiro de aberturas > 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 17,
      "name": "Picado de mamposteria ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "REVOQUES": [
    {
      "id": 5,
      "name": "caps",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "120",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Medio Oficial",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Oficial",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 1,
      "name": "Oficial Especializado",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ]
}

export default function ExampleDocument({ defaultData }: { defaultData?: GroupedData }) {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  console.log('defaultData', defaultData)
  console.log('rerender')

  // Extract the id from the URL
  const params = useParams();
  const id = params.id;

  // Initialize state for data
  const [data, setData] = useState<GroupedData>(defaultData ? defaultData : testData);

  useEffect(() => {
    if (defaultData) {
      setData(defaultData);
    }
  }, [defaultData]);

  // For searching & adding new items
  const [searchOpen, setSearchOpen] = useState<{ [key: string]: boolean }>({})
  const [generalSearchOpen, setGeneralSearchOpen] = useState(false)
  const [allElements, setAllElements] = useState<any[]>([])
  const [filteredElements, setFilteredElements] = useState<any[]>([])
  const [searchValue, setSearchValue] = useState("")

  const serializeDataToJson = () => {
    return JSON.stringify(data);
  };

  // -----------------------------
  //   Debounced Search Setup
  // -----------------------------
  const debouncedSearch = useCallback(
    debounce((searchTerm: string) => {
      if (searchTerm.length >= 4) {
        const filtered = allElements.filter(element =>
          element.name?.toLowerCase().includes(searchTerm.toLowerCase())
        )
        setFilteredElements(filtered)
      } else {
        setFilteredElements([])
      }
    }, 300),
    [allElements]
  )

  const handleSearch = (value: string) => {
    setSearchValue(value)
    debouncedSearch(value)
  }

  // -----------------------------
  //   Update Data in state
  // -----------------------------
  const updateData = (
    tag: string,
    itemId: string | number,
    key: keyof TableItem,
    newValue: string
  ) => {
    setData(prev => {
      const newData = { ...prev }
      const arr = newData[tag] || []
      const itemIndex = arr.findIndex(it => String(it.id) === String(itemId))
      if (itemIndex > -1) {
        const oldItem = arr[itemIndex]
        newData[tag] = [
          ...arr.slice(0, itemIndex),
          { ...oldItem, [key]: newValue },
          ...arr.slice(itemIndex + 1),
        ]
      }
      return newData
    })
  }

  // -----------------------------
  //   Add item to a section
  // -----------------------------
  const addElementToSection = (tag: string, element: any) => {
    setData(prev => {
      const newData = { ...prev }
      if (!newData[tag]) {
        newData[tag] = []
      }
      newData[tag] = [
        ...newData[tag],
        {
          id: element.id,
          name: element.name || 'Sin descripción',
          unit: element.unit || '',
          price: element.prices?.[0]?.price || 0,
          category: element.categories?.name || 'Sin categoría',
          parcial: element.prices?.[0]?.price || 0,
          rubro: '',
          accumulated: '',
        },
      ]
      return newData
    })
  }

  // For the "Agregar nuevo elemento" combobox
  const addGeneralElement = (element: any) => {
    const tag = element.element_tags?.[0]?.tags?.name || 'Sin Etiqueta'
    addElementToSection(tag, element)
    setGeneralSearchOpen(false)
    setSearchValue("")
    setFilteredElements([])
  }

  // -----------------------------
  //   Delete row from a tag
  // -----------------------------
  const handleDeleteRow = (tag: string, itemId: string | number) => {
    setData(prev => {
      const newData = { ...prev }
      newData[tag] = newData[tag]?.filter(item => String(item.id) !== String(itemId)) || []
      return newData
    })
  }

  // -----------------------------
  //   Handle Form Submit
  // -----------------------------
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Final data:', data);
    const jsonData = serializeDataToJson();
    console.log('Serialized JSON:', jsonData);
    // Additional logic ...
  };

  const [previewVersion, setPreviewVersion] = useState<string | boolean>(false)

  console.log(previewVersion)

  // -----------------------------
  //   Render
  // -----------------------------
  return (
    <div className='flex items-start justify-center gap-4'>
      <Tabs defaultValue="tab-1" orientation="vertical" className="flex gap-2 mt-4">

      </Tabs>
      <form onSubmit={handleSubmit} className="max-w-[1000px] min-w-[860px] p-6 bg-white rounded-xl shadow-lg relative">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-2xl font-bold text-gray-800 mb-4">
            Ministerio de Obras y Servicios Públicos
          </h1>
          <Card className="text-gray-600 flex flex-col justify-center items-start p-2 px-4">
            <p className="mb-2">{`Obra: `}
              <b>
                COMISARIA LAGUNA BRAVA - Obra Nueva 1226
              </b>
            </p>
            <p>{`Ubicacion: `}
              <b>
                CORRIENTES CAPITAL
              </b>
            </p>
          </Card>
          <h2 className="mt-4 text-lg font-bold uppercase underline">
            Planilla de Presupuesto e Incidencias
          </h2>
        </div>

        {loading && <p className="text-center text-gray-600">Cargando...</p>}
        {error && <p className="text-center text-red-600">{error}</p>}

        {/* The main table */}
        {!loading && !error && (
          <div className="rounded-lg border border-gray-200">
            <Table>
              {/* <TableCaption className='hidden'>Elementos agrupados por sección (tag).</TableCaption> */}

              <TableHeader >
                <TableRow>
                  <TableHead className="w-[50px]">N°</TableHead>
                  <TableHead className="text-left">Nombre</TableHead>
                  <TableHead className="text-left">Unidad </TableHead>
                  <TableHead className="text-center">Parcial</TableHead>
                  {(previewVersion == 'parcial' || previewVersion == 'false') && (
                    <>
                      <TableHead className="text-center">Rubro</TableHead>
                      <TableHead className="text-center">IACUMUL</TableHead>
                    </>
                  )}

                  {previewVersion === 'false' && (
                    <TableHead className="text-center">Acciones</TableHead>
                  )}
                </TableRow>
              </TableHeader>

              <TableBody>
                {/* If no data */}
                {Object.keys(data).length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={7} className="text-center">
                      No hay datos disponibles.
                    </TableCell>
                  </TableRow>
                ) : (
                  /* For each tag, create a section header + items */
                  Object.entries(data).map(([tag, items], tagIndex) => (
                    <React.Fragment key={tag}>
                      {/* Section Header */}
                      <TableRow className="bg-stone-100 border-r border-l">
                        {/* 
                        We can style it however you like. 
                        colSpan = total number of columns in the table
                      */}
                        <TableCell colSpan={7} className="font-bold ">
                          {tagIndex + 1}. {tag.toUpperCase()}
                        </TableCell>
                      </TableRow>

                      {/* Rows for this tag */}
                      {items.map((item, rowIndex) => {
                        const rowNumber = `${tagIndex + 1}.${rowIndex + 1}`
                        return (
                          <TableRow key={item.id}>
                            {/* N° */}
                            <TableCell className="text-gray-600 border-r border-l">
                              {rowNumber}
                            </TableCell>
                            {/* Nombre */}
                            <TableCell className='border-r'>
                              {item.name}
                            </TableCell>
                            {/* Unidad */}
                            <TableCell className='border-r'>
                              {item.unit}
                            </TableCell>
                            {/* Parcial */}
                            <TableCell className="text-center border-r  group  cursor-text hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]  focus:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] focus-within:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]">
                              <EditableInput
                                value={String(item.parcial ?? '')}
                                onChange={(val) => updateData(tag, item.id, 'parcial', val)}
                                suffix="%"
                              />
                            </TableCell>
                            {(previewVersion === 'parcial' || previewVersion === 'false') && (
                              <>
                                <TableCell className="text-center border-r  group  cursor-text hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]  focus:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] focus-within:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]">
                                  <EditableInput
                                    value={String(item.rubro ?? '')}
                                    onChange={(val) => updateData(tag, item.id, 'rubro', val)}
                                    suffix="%"
                                  />
                                </TableCell>
                                {/* IACUMUL */}
                                <TableCell className="text-center border-r group cursor-text box-border hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]  focus:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] focus-within:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]">
                                  <EditableInput
                                    value={String(item.accumulated ?? '')}
                                    onChange={(val) => updateData(tag, item.id, 'accumulated', val)}
                                    suffix="%"
                                  />
                                </TableCell>
                              </>
                            )}
                            {/* Rubro */}
                            {/* Delete Action */}
                            {previewVersion === 'false' && (

                              <TableCell className="text-center border-r">
                                <Button
                                  variant="destructive"
                                  className="flex items-center gap-1 h-6 w-7 p-0 mx-auto"
                                  onClick={() => handleDeleteRow(tag, item.id)}
                                >
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </TableCell>
                            )}
                          </TableRow>
                        )
                      })}

                      {/* Add new element to this tag */}
                      {previewVersion === 'false' && (
                        <TableRow className='group'>
                          <TableCell colSpan={7} className='group-hover:bg-white'>
                            <div className="relative">
                              <button
                                onClick={() =>
                                  setSearchOpen(prev => ({ ...prev, [tag]: !prev[tag] }))
                                }
                                className="w-full px-4 py-2 text-left text-gray-600 border-2 border-dashed 
                                       border-gray-300 rounded-lg hover:bg-slate-50 transition-colors 
                                       duration-200 flex items-center gap-2"
                              >
                                <Plus className="w-4 h-4 text-blue-500" />
                                <span>Agregar elemento a {tag}</span>
                              </button>

                              {searchOpen[tag] && (
                                <Popover
                                  open={searchOpen[tag]}
                                  onOpenChange={(open) => {
                                    setSearchOpen(prev => ({ ...prev, [tag]: open }))
                                  }}
                                >
                                  <PopoverTrigger asChild>
                                    <></>
                                  </PopoverTrigger>
                                  <PopoverContent className="w-full p-0 mt-1">
                                    {/*  @ts-ignore */}
                                    <Command>
                                      {/*  @ts-ignore */}
                                      <CommandInput
                                        // @ts-ignore
                                        placeholder="Buscar elementos (mínimo 4 caracteres)..."
                                        value={searchValue}
                                        onValueChange={handleSearch}
                                      />
                                      {/*  @ts-ignore */}
                                      <CommandEmpty>
                                        {searchValue.length < 4
                                          ? "Ingrese al menos 4 caracteres para buscar"
                                          : "No se encontraron elementos"}
                                      </CommandEmpty>
                                      {/*  @ts-ignore */}
                                      <CommandGroup>
                                        {/*  @ts-ignore */}
                                        <CommandList>
                                          {filteredElements
                                            .filter(
                                              element =>
                                                Array.isArray(element.element_tags) &&
                                                element.element_tags.some(
                                                  (tagObj: any) => tagObj.tags?.name === tag
                                                ) &&
                                                !items.some(
                                                  existing => existing.id === element.id
                                                )
                                            )
                                            .map((element, idx) => (
                                              // @ts-ignore
                                              <CommandItem
                                                key={`${element.id}-${idx}`}
                                                value={element.name}
                                                onSelect={() => {
                                                  addElementToSection(tag, element)
                                                  setSearchOpen(prev => ({ ...prev, [tag]: false }))
                                                  setSearchValue("")
                                                  setFilteredElements([])
                                                }}
                                              >
                                                <Check className={cn("mr-2 h-4 w-4", "opacity-0")} />
                                                {element.name}
                                              </CommandItem>
                                            ))}
                                        </CommandList>
                                      </CommandGroup>
                                    </Command>
                                  </PopoverContent>
                                </Popover>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      )}
                    </React.Fragment>
                  ))
                )}
              </TableBody>

              {/* <TableFooter>
              <TableRow>
                <TableCell colSpan={7} className="text-right">
                  If you want a summary or total, put it here
                </TableCell>
              </TableRow>
            </TableFooter> */}
            </Table>
          </div>
        )}

        {/* General Add Element Button */}
        {!loading && !error && previewVersion === false && (
          <div className="mt-6">
            <Popover open={generalSearchOpen} onOpenChange={setGeneralSearchOpen}>
              <PopoverTrigger asChild>
                <Button
                  variant="secondary"
                  role="combobox"
                  aria-expanded={generalSearchOpen}
                  className="w-full justify-between"
                >
                  <span>Agregar nuevo elemento</span>
                  <Plus className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-full p-0">
                {/*  @ts-ignore */}
                <Command>
                  {/*  @ts-ignore */}
                  <CommandInput
                    // @ts-ignore
                    placeholder="Buscar elementos (mínimo 4 caracteres)..."
                    value={searchValue}
                    onValueChange={handleSearch}
                  />
                  {/*  @ts-ignore */}
                  <CommandEmpty>
                    {searchValue.length < 4
                      ? "Ingrese al menos 4 caracteres para buscar"
                      : "No se encontraron elementos"}
                  </CommandEmpty>
                  {/*  @ts-ignore */}
                  <CommandGroup>
                    {/*  @ts-ignore */}
                    <CommandList>
                      {filteredElements.map((element, index) => (
                        // @ts-ignore
                        <CommandItem
                          key={`${element.id}-${index}`}
                          value={element.name}
                          onSelect={() => addGeneralElement(element)}
                        >
                          <Check className={cn("mr-2 h-4 w-4", "opacity-0")} />
                          {element.name}
                        </CommandItem>
                      ))}
                    </CommandList>
                  </CommandGroup>
                </Command>
              </PopoverContent>
            </Popover>
          </div>
        )}

        {/* Submit Button */}
        {!loading && !error && (
          <div className="mt-6">
            <Button
              type="submit"
              className="w-full bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-lg
                       transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98]"
            >
              Guardar Cambios
            </Button>
          </div>
        )}

        {/* Footer */}
        <div className="text-sm text-center mt-2">
          <p>Página 1 de 1</p>
        </div>
      </form>
    </div>

  )
}

/**
 * A simple inline-edit <input> cell
 */
function EditableInput({
  value: initialValue,
  onChange,
  suffix = "",
}: {
  value: string | number
  onChange: (val: string) => void
  suffix?: string
}) {
  const [value, setValue] = useState(String(initialValue))

  // Keep local state in sync if value changes externally
  useEffect(() => {
    setValue(String(initialValue))
  }, [initialValue])

  const handleBlur = () => {
    // Call parent onChange
    onChange(value)
  }

  return (
    <div className="flex items-center justify-center gap-1">
      <input
        className="border-b border-transparent group-hover:border-gray-300 group-focus:border-gray-300 focus:outline-none bg-transparent w-[50px] text-right focus-within:border-gray-300"
        value={value}
        onChange={(e) => setValue(e.target.value)}
        onBlur={handleBlur}
      />
      {suffix && <span className="text-sm text-gray-700 peer">{suffix}</span>}
    </div>
  )
}

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 transition-opacity group-data-[state=inactive]:opacity-50",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        accent:
          "border-transparent bg-accent-foreground text-white hover:bg-accent-foreground/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
  VariantProps<typeof badgeVariants> { }

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 leading-3 whitespace-nowrap rounded-lg text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        facha: cn(
          "inline-flex items-center justify-center bg-[#F8F7FC] text-blue-500 shadow-[inset_0_1px_0_#fff,inset_0_-2px_0_#3b82f621,0_0_0_1px_#3b82f64a,0_2px_7px_0px_#3b85f64a,0_0_0_3px_#3b82f614] font-medium",
          "relative transition-all duration-100 cursor-pointer will-change-transform ",
          "active:scale-[0.97] hover:bg-[#ece9f7] active:shadow-[inset_0_-1px_0_#fff,inset_0_2px_0_#3b82f621,0_0_0_1px_#3b82f64a,0_2px_7px_0px_#3b85f64a,0_0_0_3px_#3b82f614]"
        ),
        default: cn(
          "inline-flex items-center justify-center bg-black text-white shadow-simple font-medium",
          "relative transition-all duration-100 cursor-pointer will-change-transform ",
          "active:scale-[0.97] hover:shadow-simple-hover"
        ),
        secondary: cn(
          "inline-flex items-center justify-center bg-white text-black shadow border font-medium",
          "relative transition-all duration-100 cursor-pointer will-change-transform ",
          "active:translate-y-[1px] active:shadow-none hover:shadow-hover"
        ),
        tertiary: cn(
          "inline-flex items-center justify-center bg-white text-foreground-dim shadow border font-medium",
          "relative transition-all duration-100 cursor-pointer will-change-transform ",
          "hover:bg-input-foreground/10 active:translate-y-[1px] active:shadow-none"
        ),
        destructive:
          cn(
            "inline-flex items-center justify-center bg-destructive text-white shadow-simple-destructive font-medium",
            "relative transition-all duration-100 cursor-pointer will-change-transform ",
            "active:translate-y-[1px] hover:shadow-simple-destructive-hover"
          ),
        destructiveSecondary:
          cn(
            "bg-destructive/30 border border-destructive/30 shadow text-destructive-border",
            "hover:bg-destructive/90",
            "focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
            "active:bg-destructive/70 active:translate-y-[1px] active:shadow-none"
          ),
        success:
          cn(
            "inline-flex items-center justify-center bg-success text-white shadow-simple-success font-medium",
            "relative transition-all duration-100 cursor-pointer will-change-transform ",
            "active:translate-y-[1px] hover:shadow-simple-success-hover"
          ),
        successSecondary:
          cn(
            "bg-success/30 border border-success/30 shadow text-success-border",
            "hover:bg-success/90",
            "focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
            "active:bg-success/70 active:translate-y-[1px] active:shadow-none"
          ),
        alert:
          cn(
            "inline-flex items-center justify-center bg-alert text-white shadow-simple-alert font-medium",
            "relative transition-all duration-100 cursor-pointer will-change-transform ",
            "active:translate-y-[1px] hover:shadow-simple-alert-hover"
          ),
        alertSecondary:
          cn(
            "bg-alert/30 border border-alert/30 shadow text-alert-border",
            "hover:bg-alert/90",
            "focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
            "active:bg-alert/70 active:translate-y-[1px] active:shadow-none"
          ),
        outline:
          "border-2 border-input bg-background hover:bg-input-foreground/10 hover:text-accent-foreground",
        ghost: "hover:bg-input-foreground/10 hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-8 px-4 pb-1 pt-[0.2rem]",
        sm: "h-6 rounded-md px-3",
        lg: "h-10 rounded-md px-8",
        icon: "h-6 w-6",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
  VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size = 'default', asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-input ring-offset-background focus-visible:outline-none focus-visible:ring-2",
      "focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:border-primary",
      "data-[state=checked]:bg-primary data-[state=checked]:text-white data-[state=checked]:shadow-[0px_4px_7px_-2px_rgba(00,00,00,0.4)] mx-auto my-auto translate-y-0.5 data-[state=checked]:translate-y-[3px]",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/command.tsx
================
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
// @ts-ignore
>(({ className, ...props }, ref) => (
  // @ts-ignore
  <CommandPrimitive
    // @ts-ignore
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        {/* @ts-ignore */}
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.Input>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
// @ts-ignore
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    {/* @ts-ignore */}
    <CommandPrimitive.Input
      // @ts-ignore
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.List>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
// @ts-ignore
>(({ className, ...props }, ref) => (
  // @ts-ignore
  <CommandPrimitive.List
    // @ts-ignore
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.Empty>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  // @ts-ignore
  <CommandPrimitive.Empty
    // @ts-ignore
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.Group>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
// @ts-ignore
>(({ className, ...props }, ref) => (
  // @ts-ignore
  <CommandPrimitive.Group
    // @ts-ignore
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.Separator>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
// @ts-ignore
>(({ className, ...props }, ref) => (
  // @ts-ignore
  <CommandPrimitive.Separator
    // @ts-ignore
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.Item>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
// @ts-ignore
>(({ className, ...props }, ref) => (
  // @ts-ignore
  <CommandPrimitive.Item
    // @ts-ignore
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"
import { Search, SearchIcon } from "lucide-react"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, hidden, children, ...props }, ref) => {
    return (
      <div className="relative flex items-center">
        <SearchIcon className="absolute left-4 text-foreground-secondary size-4" />
        <input
          type={type}
          className={cn(
            "flex h-10 w-full rounded-xl shadow border bg-background pl-10 pr-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
            hidden && "max-h-8 max-w-12 w-8 border-none px-0 text-right justify-end items-center focus:border-input focus:border focus:bg-sky-50 focus:text-left ",
            className
          )}
          ref={ref}
          {...props}
        />
      </div>
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: components/ui/scroll-area.tsx
================
"use client";

import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";
import * as React from "react";

import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-px",
      orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-px",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: components/ui/sidebar.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/lib/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip || (!isMobile && state !== "collapsed")) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
        "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/switch.tsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"

interface SwitchProps
  extends React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> {
  size?: "large" | "medium" | "small"
}

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  SwitchProps
>(({ className, size = "large", ...props }, ref) => {
  const sizes = {
    large: {
      root: "h-6 w-11",
      thumb: "h-5 w-5 data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0",
    },
    medium: {
      root: "h-5 w-9",
      thumb: "h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
    },
    small: {
      root: "h-4 w-7",
      thumb: "h-3 w-3 data-[state=checked]:translate-x-3 data-[state=unchecked]:translate-x-0",
    },
  }

  return (
    <SwitchPrimitives.Root
      ref={ref}
      className={cn(
        `peer inline-flex shrink-0 cursor-pointer items-center 
         rounded-full border-2 border-transparent transition-colors 
         focus-visible:outline-none focus-visible:ring-2 
         focus-visible:ring-ring focus-visible:ring-offset-2 
         focus-visible:ring-offset-background disabled:cursor-not-allowed 
         disabled:opacity-50 data-[state=checked]:bg-input
         data-[state=unchecked]:bg-input-secondary ${sizes[size].root}`,
        className
      )}
      {...props}
    >
      <SwitchPrimitives.Thumb
        className={cn(
          `pointer-events-none block rounded-full bg-background 
           shadow-lg ring-0 transition-transform ${sizes[size].thumb}`
        )}
      />
    </SwitchPrimitives.Root>
  )
})

Switch.displayName = SwitchPrimitives.Root.displayName
export { Switch }

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full ">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left bg-muted align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-2 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
"use client";

import * as TabsPrimitive from "@radix-ui/react-tabs";
import * as React from "react";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center rounded-lg bg-muted p-0.5 text-muted-foreground/70",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
      "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
      "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
      "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
      // custom
      "gap-1.5 group relative",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 outline-offset-2 focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsContent, TabsList, TabsTrigger };

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> { }

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
  VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: components/ui/toaster.tsx
================
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: components/ui/use-toast.ts
================
// Inspired by react-hot-toast library
import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
	id: string;
	title?: React.ReactNode;
	description?: React.ReactNode;
	action?: ToastActionElement;
};

const actionTypes = {
	ADD_TOAST: "ADD_TOAST",
	UPDATE_TOAST: "UPDATE_TOAST",
	DISMISS_TOAST: "DISMISS_TOAST",
	REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
	count = (count + 1) % Number.MAX_VALUE;
	return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
	| {
			type: ActionType["ADD_TOAST"];
			toast: ToasterToast;
	  }
	| {
			type: ActionType["UPDATE_TOAST"];
			toast: Partial<ToasterToast>;
	  }
	| {
			type: ActionType["DISMISS_TOAST"];
			toastId?: ToasterToast["id"];
	  }
	| {
			type: ActionType["REMOVE_TOAST"];
			toastId?: ToasterToast["id"];
	  };

interface State {
	toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
	if (toastTimeouts.has(toastId)) {
		return;
	}

	const timeout = setTimeout(() => {
		toastTimeouts.delete(toastId);
		dispatch({
			type: "REMOVE_TOAST",
			toastId: toastId,
		});
	}, TOAST_REMOVE_DELAY);

	toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
	switch (action.type) {
		case "ADD_TOAST":
			return {
				...state,
				toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
			};

		case "UPDATE_TOAST":
			return {
				...state,
				toasts: state.toasts.map((t) =>
					t.id === action.toast.id ? { ...t, ...action.toast } : t
				),
			};

		case "DISMISS_TOAST": {
			const { toastId } = action;

			// ! Side effects ! - This could be extracted into a dismissToast() action,
			// but I'll keep it here for simplicity
			if (toastId) {
				addToRemoveQueue(toastId);
			} else {
				state.toasts.forEach((toast) => {
					addToRemoveQueue(toast.id);
				});
			}

			return {
				...state,
				toasts: state.toasts.map((t) =>
					t.id === toastId || toastId === undefined
						? {
								...t,
								open: false,
						  }
						: t
				),
			};
		}
		case "REMOVE_TOAST":
			if (action.toastId === undefined) {
				return {
					...state,
					toasts: [],
				};
			}
			return {
				...state,
				toasts: state.toasts.filter((t) => t.id !== action.toastId),
			};
	}
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
	memoryState = reducer(memoryState, action);
	listeners.forEach((listener) => {
		listener(memoryState);
	});
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
	const id = genId();

	const update = (props: ToasterToast) =>
		dispatch({
			type: "UPDATE_TOAST",
			toast: { ...props, id },
		});
	const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

	dispatch({
		type: "ADD_TOAST",
		toast: {
			...props,
			id,
			open: true,
			onOpenChange: (open) => {
				if (!open) dismiss();
			},
		},
	});

	return {
		id: id,
		dismiss,
		update,
	};
}

function useToast() {
	const [state, setState] = React.useState<State>(memoryState);

	React.useEffect(() => {
		listeners.push(setState);
		return () => {
			const index = listeners.indexOf(setState);
			if (index > -1) {
				listeners.splice(index, 1);
			}
		};
	}, [state]);

	return {
		...state,
		toast,
		dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
	};
}

export { useToast, toast };

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";
import reactCompiler from "eslint-plugin-react-compiler";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
	baseDirectory: __dirname,
});

const eslintConfig = [
	...compat.extends("next/core-web-vitals", "next/typescript"),
	{
		plugins: {
			"react-compiler": reactCompiler,
		},
		rules: {
			"react-compiler/react-compiler": "error",
			"no-unused-vars": "off",
			"@typescript-eslint/no-unused-vars": "off",
			"@typescript-eslint/no-empty-interface": "off",
			"@typescript-eslint/no-empty-object-type": "off",
			"@typescript-eslint/no-explicit-any": "off",
			"react-hooks/exhaustive-deps": "off",
			"react/jsx-no-undef": "off",
			"react/no-unescaped-entities": "off",
			"react-compiler/react-compiler": "off",
			"react/no-unknown-property": "off",
			"react/no-deprecated": "off",
			"react/no-string-refs": "off",
			"react/no-find-dom-node": "off",
			"react/no-danger": "off",
			"react/no-did-mount-set-state": "off",
			"react/no-did-update-set-state": "off",
			"react/no-direct-mutation-state": "off",
			"react/no-is-mounted": "off",
			"react/display-name": "off",
			"@typescript-eslint/ban-ts-comment": "off",
			"@typescript-eslint/no-unsafe-assignment": "off",
			"@typescript-eslint/no-unsafe-call": "off",
			// "@typescript-eslint/no-unsafe-member-access": "off",
			"@typescript-eslint/no-unsafe-return": "off",
			"@typescript-eslint/no-unsafe-argument": "off",
		},
	},
];

export default eslintConfig;

================
File: import.bat
================
@echo off
chcp 65001
setlocal

:: Database credentials
set DB_HOST=localhost
set DB_USER=root
set DB_PASS=Ibl2000
set DB_NAME=dpo_db
set SQL_FOLDER=C:\Users\Usuario\Desktop\projects\test2

:: Disable foreign key checks
mysql -h %DB_HOST% -u %DB_USER% -p%DB_PASS% --default-character-set=utf8mb4 %DB_NAME% -e "SET FOREIGN_KEY_CHECKS=0;"

:: Loop through SQL files
for %%f in ("%SQL_FOLDER%\*.sql") do (
    echo Importing %%f...
    mysql -h %DB_HOST% -u %DB_USER% -p%DB_PASS% --default-character-set=utf8mb4 %DB_NAME% < "%%f"
    if %errorlevel% equ 0 (
        echo Successfully imported %%f
    ) else (
        echo Error importing %%f
    )
)

:: Re-enable foreign key checks
mysql -h %DB_HOST% -u %DB_USER% -p%DB_PASS% --default-character-set=utf8mb4 %DB_NAME% -e "SET FOREIGN_KEY_CHECKS=1;"

echo All files imported.
pause

================
File: lib/cache.ts
================
const cache = new Map();

export async function getCachedData(queryKey: string, fetcher: () => Promise<any>) {
	if (cache.has(queryKey)) {
		return cache.get(queryKey);
	}

	const data = await fetcher();
	cache.set(queryKey, data);
	return data;
}

================
File: lib/context/PresupuestoContext.tsx
================
import { createContext, useContext, useState, useCallback, ReactNode } from 'react';
import {
  PresupuestoData,
  PresupuestoItem,
  GroupedPresupuestoData,
  MedicionData,
  MedicionItem,
} from '@/lib/types/presupuesto';

interface PresupuestoContextType {
  // Presupuesto data
  presupuesto: PresupuestoData | null;
  presupuestoItems: GroupedPresupuestoData;
  updatePresupuestoItem: (
    tag: string,
    itemId: string,
    key: keyof PresupuestoItem,
    value: string
  ) => void;
  addItemToSection: (tag: string, item: PresupuestoItem) => void;
  removeItemFromSection: (tag: string, itemId: string) => void;
  calculateTotals: () => { total: number; sectionTotals: { [key: string]: number } };

  // Mediciones
  mediciones: MedicionData[];
  currentMedicion: GroupedPresupuestoData | null;
  updateMedicionItem: (
    tag: string,
    itemId: string,
    presente: number
  ) => void;
  saveMedicion: () => Promise<void>;
  loadMedicion: (medicionId: number) => void;

  // Loading states
  isLoading: boolean;
  error: string | null;
}

// Helper type for items in currentMedicion
type CurrentMedicionItem = PresupuestoItem & {
  anterior: number;
  presente: number;
  acumulado: number;
  completedAmount: number;
};

type CurrentMedicionData = {
  [key: string]: CurrentMedicionItem[];
};

const PresupuestoContext = createContext<PresupuestoContextType | undefined>(undefined);

export function PresupuestoProvider({
  children,
  initialPresupuesto,
}: {
  children: ReactNode;
  initialPresupuesto?: PresupuestoData;
}) {
  const [presupuesto, setPresupuesto] = useState<PresupuestoData | null>(
    initialPresupuesto || null
  );
  const [presupuestoItems, setPresupuestoItems] = useState<GroupedPresupuestoData>(
    initialPresupuesto?.data || {}
  );
  const [mediciones, setMediciones] = useState<MedicionData[]>([]);
  const [currentMedicion, setCurrentMedicion] = useState<CurrentMedicionData | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Calculate totals for presupuesto
  const calculateTotals = useCallback(() => {
    const sectionTotals: { [key: string]: number } = {};
    let total = 0;

    Object.entries(presupuestoItems).forEach(([tag, items]) => {
      const sectionTotal = items.reduce((acc, item) => acc + (item.total || 0), 0);
      sectionTotals[tag] = sectionTotal;
      total += sectionTotal;
    });

    return { total, sectionTotals };
  }, [presupuestoItems]);

  // Update presupuesto item
  const updatePresupuestoItem = useCallback((
    tag: string,
    itemId: string,
    key: keyof PresupuestoItem,
    value: string
  ) => {
    setPresupuestoItems(prev => {
      const newItems = { ...prev };
      const itemIndex = newItems[tag].findIndex(item => item.id === itemId);

      if (itemIndex === -1) return prev;

      const item = { ...newItems[tag][itemIndex] };
      (item[key] as any) = value;

      // Recalculate total if quantity or unitPrice changes
      if (key === 'quantity' || key === 'unitPrice') {
        item.total = (parseFloat(item.quantity.toString()) || 0) *
          (parseFloat(item.unitPrice.toString()) || 0);
      }

      newItems[tag][itemIndex] = item;
      return newItems;
    });
  }, []);

  // Add item to section
  const addItemToSection = useCallback((tag: string, item: PresupuestoItem) => {
    setPresupuestoItems(prev => ({
      ...prev,
      [tag]: [...(prev[tag] || []), item],
    }));
  }, []);

  // Remove item from section
  const removeItemFromSection = useCallback((tag: string, itemId: string) => {
    setPresupuestoItems(prev => ({
      ...prev,
      [tag]: prev[tag].filter(item => item.id !== itemId),
    }));
  }, []);

  // Update medicion item with fixed types
  const updateMedicionItem = useCallback((
    tag: string,
    itemId: string,
    presente: number
  ) => {
    if (!currentMedicion) return;

    setCurrentMedicion(prev => {
      if (!prev) return prev;

      const newItems = { ...prev };
      const itemIndex = newItems[tag].findIndex(item => item.id === itemId);

      if (itemIndex === -1) return prev;

      const item = newItems[tag][itemIndex];
      const anterior = item.anterior;

      // Validation: New percentage can't be less than previous
      if (presente < anterior) {
        setError(`El porcentaje no puede ser menor al anterior (${anterior}%)`);
        return prev;
      }

      // Validation: Can't exceed 100%
      if (presente > 100) {
        setError("El porcentaje no puede superar el 100%");
        return prev;
      }

      newItems[tag][itemIndex] = {
        ...item,
        presente,
        acumulado: presente,
        completedAmount: (item.total * presente) / 100,
      };

      return newItems;
    });
  }, [currentMedicion]);

  // Save medicion with fixed types
  const saveMedicion = useCallback(async () => {
    if (!presupuesto || !currentMedicion) return;

    try {
      setIsLoading(true);
      setError(null);

      // Calculate totals
      let totalCompleted = 0;
      let totalAmount = 0;

      Object.values(currentMedicion).forEach(items => {
        items.forEach(item => {
          totalCompleted += item.completedAmount;
          totalAmount += item.total;
        });
      });

      const completedPercentage = (totalCompleted / totalAmount) * 100;

      // Save medicion
      const response = await fetch(`/api/presupuestos/${presupuesto.id}/mediciones`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          presupuestoId: presupuesto.id,
          totalCompleted,
          completedPercentage,
          data: currentMedicion,
        }),
      });

      if (!response.ok) throw new Error('Error al guardar la medición');

      const newMedicion = await response.json();
      setMediciones(prev => [newMedicion, ...prev]);

    } catch (err) {
      setError(err instanceof Error ? err.message : 'Error al guardar la medición');
      throw err;
    } finally {
      setIsLoading(false);
    }
  }, [presupuesto, currentMedicion]);

  // Load medicion
  const loadMedicion = useCallback(async (medicionId: number) => {
    if (!presupuesto) return;

    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(`/api/presupuestos/${presupuesto.id}/mediciones/${medicionId}`);
      if (!response.ok) throw new Error('Error al cargar la medición');

      const medicion = await response.json();
      setCurrentMedicion(medicion.data);

    } catch (err) {
      setError(err instanceof Error ? err.message : 'Error al cargar la medición');
    } finally {
      setIsLoading(false);
    }
  }, [presupuesto]);

  return (
    <PresupuestoContext.Provider
      value={{
        presupuesto,
        presupuestoItems,
        updatePresupuestoItem,
        addItemToSection,
        removeItemFromSection,
        calculateTotals,
        mediciones,
        currentMedicion,
        updateMedicionItem,
        saveMedicion,
        loadMedicion,
        isLoading,
        error,
      }}
    >
      {children}
    </PresupuestoContext.Provider>
  );
}

export function usePresupuesto() {
  const context = useContext(PresupuestoContext);
  if (context === undefined) {
    throw new Error('usePresupuesto must be used within a PresupuestoProvider');
  }
  return context;
}

================
File: lib/hooks/use-mobile.tsx
================
"use client"

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: lib/hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: lib/hooks/useMedicion.ts
================
import { useState, useCallback } from "react";
import { MedicionData } from "@/lib/types/presupuesto";

interface UseMedicionProps {
	presupuestoId: string | number;
}

export function useMedicion({ presupuestoId }: UseMedicionProps) {
	const [isLoading, setIsLoading] = useState(false);
	const [error, setError] = useState<string | null>(null);

	// Fetch mediciones for a presupuesto
	const getMediciones = useCallback(async () => {
		try {
			setIsLoading(true);
			const response = await fetch(
				`/api/presupuestos/${presupuestoId}/mediciones`
			);
			if (!response.ok) throw new Error("Error al cargar las mediciones");
			return await response.json();
		} catch (err) {
			setError(
				err instanceof Error ? err.message : "Error al cargar las mediciones"
			);
			throw err;
		} finally {
			setIsLoading(false);
		}
	}, [presupuestoId]);

	// Get a specific medicion
	const getMedicion = useCallback(
		async (medicionId: number) => {
			try {
				setIsLoading(true);
				const response = await fetch(
					`/api/presupuestos/${presupuestoId}/mediciones/${medicionId}`
				);
				if (!response.ok) throw new Error("Error al cargar la medición");
				return await response.json();
			} catch (err) {
				setError(
					err instanceof Error ? err.message : "Error al cargar la medición"
				);
				throw err;
			} finally {
				setIsLoading(false);
			}
		},
		[presupuestoId]
	);

	// Create a new medicion
	const createMedicion = useCallback(
		async (data: Partial<MedicionData>) => {
			try {
				setIsLoading(true);
				const response = await fetch(
					`/api/presupuestos/${presupuestoId}/mediciones`,
					{
						method: "POST",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify(data),
					}
				);
				if (!response.ok) throw new Error("Error al crear la medición");
				return await response.json();
			} catch (err) {
				setError(
					err instanceof Error ? err.message : "Error al crear la medición"
				);
				throw err;
			} finally {
				setIsLoading(false);
			}
		},
		[presupuestoId]
	);

	// Update a medicion
	const updateMedicion = useCallback(
		async (medicionId: number, data: Partial<MedicionData>) => {
			try {
				setIsLoading(true);
				const response = await fetch(
					`/api/presupuestos/${presupuestoId}/mediciones/${medicionId}`,
					{
						method: "PUT",
						headers: { "Content-Type": "application/json" },
						body: JSON.stringify(data),
					}
				);
				if (!response.ok) throw new Error("Error al actualizar la medición");
				return await response.json();
			} catch (err) {
				setError(
					err instanceof Error ? err.message : "Error al actualizar la medición"
				);
				throw err;
			} finally {
				setIsLoading(false);
			}
		},
		[presupuestoId]
	);

	return {
		getMediciones,
		getMedicion,
		createMedicion,
		updateMedicion,
		isLoading,
		error,
	};
}

================
File: lib/hooks/usePresupuesto.ts
================
import { useState, useCallback, useEffect } from "react";
import {
	PresupuestoItem,
	GroupedPresupuestoData,
} from "@/lib/types/presupuesto";
import {
	calculateGrandTotal,
	calculateSectionRubros,
	calculateSectionIacums,
	calculateItemTotal,
} from "@/lib/utils/calculations";

interface UsePresupuestoProps {
	initialData?: GroupedPresupuestoData;
	presupuestoId?: string | number;
}

export function usePresupuesto({
	initialData = {},
	presupuestoId,
}: UsePresupuestoProps = {}) {
	const [data, setData] = useState<GroupedPresupuestoData>(initialData);
	console.log("data", data);
	const [loading, setLoading] = useState(false);
	const [error, setError] = useState<string | null>(null);

	// Calculate totals and percentages
	const grandTotal = calculateGrandTotal(data);
	const sectionRubros = calculateSectionRubros(data, grandTotal);
	const sectionIacums = calculateSectionIacums(data, grandTotal);

	// Fetch presupuesto data
	const fetchData = useCallback(async () => {
		if (!presupuestoId) {
			console.log("No presupuestoId provided");
			return;
		}

		try {
			setLoading(true);
			console.log("Fetching presupuesto data for ID:", presupuestoId);
			const response = await fetch(`/api/presupuestos/${presupuestoId}`);
			if (!response.ok) throw new Error("Error al cargar el presupuesto.");

			const presupuestoData = await response.json();
			console.log("Received presupuesto data:", presupuestoData);
			setData(presupuestoData.data);
		} catch (err) {
			console.error("Error fetching data:", err);
			setError("Error al cargar los datos.");
		} finally {
			setLoading(false);
		}
	}, [presupuestoId]);

	// Fetch data on mount
	useEffect(() => {
		fetchData();
	}, [fetchData]);

	// Update item data
	const updateData = useCallback(
		(
			tag: string,
			itemId: string | number,
			key: keyof PresupuestoItem,
			value: string
		) => {
			setData((prev) => {
				const newData = { ...prev };
				const items = newData[tag] || [];
				const itemIndex = items.findIndex(
					(it) => String(it.id) === String(itemId)
				);

				if (itemIndex > -1) {
					const item = items[itemIndex];
					const numValue = Number(value) || 0;

					// Create updated item with new value
					const updatedItem = { ...item, [key]: numValue };

					// Recalculate totalPrice if quantity or unitPrice changes
					if (key === "quantity" || key === "unitPrice") {
						updatedItem.totalPrice = calculateItemTotal(
							updatedItem.quantity,
							updatedItem.unitPrice
						);
					}

					// Update the item in the array
					newData[tag] = [
						...items.slice(0, itemIndex),
						updatedItem,
						...items.slice(itemIndex + 1),
					];

					// Update parcial values for all sections
					Object.keys(newData).forEach((sectionTag) => {
						const sectionTotal = newData[sectionTag].reduce((sum, item) => {
							return sum + calculateItemTotal(item.quantity, item.unitPrice);
						}, 0);

						newData[sectionTag] = newData[sectionTag].map((item) => {
							const itemTotal = calculateItemTotal(
								item.quantity,
								item.unitPrice
							);
							return {
								...item,
								totalPrice: itemTotal,
								parcial: grandTotal > 0 ? (itemTotal * 100) / grandTotal : 0,
								rubro: grandTotal > 0 ? (sectionTotal * 100) / grandTotal : 0,
							};
						});
					});
				}
				return newData;
			});
		},
		[]
	);

	// Add element to section
	const addElementToSection = useCallback(
		(tag: string, element: PresupuestoItem) => {
			setData((prev) => {
				const newData = { ...prev };
				if (!newData[tag]) {
					newData[tag] = [];
				}
				newData[tag] = [...newData[tag], element];
				return newData;
			});
		},
		[]
	);

	// Delete row from section
	const deleteRow = useCallback((tag: string, itemId: string | number) => {
		setData((prev) => {
			const newData = { ...prev };
			newData[tag] =
				newData[tag]?.filter((item) => String(item.id) !== String(itemId)) ||
				[];
			return newData;
		});
	}, []);

	// Save presupuesto
	const savePresupuesto = useCallback(async () => {
		if (!presupuestoId) return;

		try {
			setLoading(true);
			const response = await fetch(`/api/presupuestos/${presupuestoId}`, {
				method: "PUT",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify({ data }),
			});

			if (!response.ok) throw new Error("Error al guardar el presupuesto.");

			const result = await response.json();
			return result;
		} catch (err) {
			console.error("Error saving data:", err);
			setError("Error al guardar los datos.");
			throw err;
		} finally {
			setLoading(false);
		}
	}, [presupuestoId, data]);

	return {
		data,
		loading,
		error,
		grandTotal,
		sectionRubros,
		sectionIacums,
		fetchData,
		updateData,
		addElementToSection,
		deleteRow,
		savePresupuesto,
	};
}

================
File: lib/prisma.ts
================
import { PrismaClient } from "@prisma/client";

const globalForPrisma = global as unknown as {
	prisma: PrismaClient | undefined;
};

export const prisma =
	globalForPrisma.prisma ??
	new PrismaClient({
		log:
			process.env.NODE_ENV === "development"
				? ["query", "error", "warn"]
				: ["error"],
	});

if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = prisma;

================
File: lib/types/common.ts
================
// Base interfaces for items
export interface BaseItem {
	id: string | number;
	name: string;
	category: string;
}

// Common table cell props
export interface EditableCellProps {
	value: string | number;
	onChange: (value: string) => void;
	suffix?: string;
	prefix?: string;
	originalValue?: string | number;
	highlightChanges?: boolean;
}

// Common section props
export interface BaseSectionProps {
	tag: string;
	tagIndex: number;
	previewVersion: string | boolean;
	highlightChanges?: boolean;
}

// Common grouped data interface
export interface GroupedData<T> {
	[tag: string]: T[];
}

================
File: lib/types/medicion.ts
================
import { BaseItem } from "./common";

export interface MedicionItem extends BaseItem {
	anterior: number;
	presente: number;
	acumulado: number;
}

export interface MedicionData {
	fecha: string;
	items: {
		itemId: string | number;
		anterior: number;
		presente: number;
		acumulado: number;
	}[];
}

export interface Medicion {
	id: number;
	presupuestoId: number;
	data: MedicionData;
	createdAt: string;
	updatedAt: string;
}

export interface MedicionSectionProps {
	presupuestoId: string | number;
	initialData: GroupedMedicionData;
	onSave?: (data: MedicionData) => void;
	highlightChanges?: boolean;
}

export interface GroupedMedicionData {
	[tag: string]: MedicionItem[];
}

export interface MedicionHistoryProps {
	presupuestoId: string | number;
	onMedicionSelect: (medicion: Medicion) => void;
}

================
File: lib/types/presupuesto.ts
================
import { BaseItem } from "./common";

export interface PresupuestoItem {
	id: string;
	code: string;
	name: string;
	unit: string;
	quantity: number;
	unitPrice: number;
	total: number;
	tag?: string;
}

export interface MedicionItem extends PresupuestoItem {
	anterior: number; // Previous completion percentage
	presente: number; // Current period completion percentage
	acumulado: number; // Total accumulated percentage
	completedAmount: number; // Monetary amount completed
}

export interface GroupedPresupuestoData {
	[key: string]: PresupuestoItem[];
}

export interface GroupedMedicionData {
	[key: string]: MedicionItem[];
}

export interface PresupuestoData {
	id: number;
	obraId: number;
	totalAmount: number;
	isActive: boolean;
	data: GroupedPresupuestoData;
	createdAt: string;
	updatedAt: string;
}

export interface MedicionData {
	id: number;
	presupuestoId: number;
	fecha: string;
	totalCompleted: number;
	completedPercentage: number;
	data: GroupedMedicionData;
	createdAt: string;
	updatedAt: string;
}

export interface PresupuestoSectionProps {
	tag: string;
	tagIndex: number;
	items: PresupuestoItem[];
	previewVersion: "false" | "medicion" | "parcial";
	grandTotal: number;
	sectionRubros: number[];
	sectionIacums: number[];
	updateData: (
		itemId: string | number,
		key: keyof PresupuestoItem,
		value: string
	) => void;
	handleDeleteRow: (itemId: string | number) => void;
	addElementToSection?: (element: PresupuestoItem) => void;
	allElements?: PresupuestoItem[];
	highlightChanges?: boolean;
}

export interface PresupuestoPageProps {
	id: string;
	initialData?: GroupedPresupuestoData;
}

================
File: lib/types/table-types.ts
================
export interface Item {
  id: string
  insumos: string
  unidad: string
  precio: string
  subItems?: Item[]
}

export type SortDirection = 'asc' | 'desc'

================
File: lib/utils.ts
================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

================
File: lib/utils/calculations.ts
================
import { PresupuestoItem } from "@/lib/types/presupuesto";
import { GroupedData } from "@/lib/types/common";

export function calculateItemTotal(
	quantity: number = 0,
	unitPrice: number = 0
): number {
	return quantity * unitPrice;
}

export function calculateGrandTotal(
	data: GroupedData<PresupuestoItem>
): number {
	return Object.values(data).reduce((total, items) => {
		return (
			total +
			items.reduce((sectionTotal, item) => {
				return sectionTotal + calculateItemTotal(item.quantity, item.unitPrice);
			}, 0)
		);
	}, 0);
}

export function calculateSectionRubros(
	data: GroupedData<PresupuestoItem>,
	grandTotal: number
): number[] {
	return Object.entries(data).map(([_, items]) => {
		const sectionTotal = items.reduce((sum, item) => {
			return sum + calculateItemTotal(item.quantity, item.unitPrice);
		}, 0);

		return grandTotal > 0 ? (sectionTotal * 100) / grandTotal : 0;
	});
}

export function calculateSectionIacums(
	data: GroupedData<PresupuestoItem>,
	grandTotal: number
): number[] {
	let runningTotal = 0;
	return Object.entries(data).map(([_, items]) => {
		const sectionTotal = items.reduce((sum, item) => {
			return sum + calculateItemTotal(item.quantity, item.unitPrice);
		}, 0);

		runningTotal += sectionTotal;
		return grandTotal > 0 ? (runningTotal * 100) / grandTotal : 0;
	});
}

export function calculateParcialPercentage(
	itemTotal: number,
	grandTotal: number
): number {
	return grandTotal > 0 ? (itemTotal * 100) / grandTotal : 0;
}

export function calculateMedicionAcumulado(
	anterior: number,
	presente: number
): number {
	return (anterior || 0) + (presente || 0);
}

================
File: lib/utils/errorHandler.ts
================
import { NextResponse } from "next/server";

export class APIError extends Error {
	constructor(
		message: string,
		public statusCode: number = 500,
		public code?: string
	) {
		super(message);
		this.name = "APIError";
	}
}

export function handleAPIError(error: unknown) {
	console.error("API Error:", error);

	if (error instanceof APIError) {
		return NextResponse.json(
			{ error: error.message, code: error.code },
			{ status: error.statusCode }
		);
	}

	// Handle Prisma errors
	if (error && typeof error === "object" && "code" in error) {
		return NextResponse.json(
			{ error: "Database operation failed", code: error.code },
			{ status: 500 }
		);
	}

	if (error instanceof Error) {
		return NextResponse.json(
			{ error: error.message || "An error occurred" },
			{ status: 500 }
		);
	}

	return NextResponse.json(
		{ error: "An unexpected error occurred" },
		{ status: 500 }
	);
}

================
File: lib/utils/format.ts
================
export const formatCurrency = (amount: number): string => {
	return new Intl.NumberFormat("es-AR", {
		style: "currency",
		currency: "ARS",
		minimumFractionDigits: 2,
	}).format(amount);
};

================
File: lib/utils/generateNav.ts
================
import fs from "fs";
import path from "path";

export function getDirectoryStructure(dirPath: string): Record<string, any> {
	const result: Record<string, any> = {};
	const files = fs.readdirSync(dirPath);

	for (const file of files) {
		const filePath = path.join(dirPath, file);
		const stats = fs.statSync(filePath);

		if (stats.isDirectory()) {
			result[file] = getDirectoryStructure(filePath); // Recurse into subdirectories
		} else {
			if (!result.files) result.files = [];
			result.files.push(file); // Add files to a `files` array
		}
	}

	return result;
}

================
File: lib/utils/table-utils.ts
================
import { Item } from "../types/table-types";
import React, { createElement } from "react";

export const flattenData = (data: Item[]): Item[] => {
	return data.reduce((acc: Item[], item) => {
		acc.push(item);
		if (item.subItems) {
			acc.push(...flattenData(item.subItems));
		}
		return acc;
	}, []);
};

export const highlightText = (text: string, highlight: string) => {
	if (!highlight.trim()) {
		return text;
	}
	const regex = new RegExp(`(${highlight})`, "gi");
	return text
		.split(regex)
		.map((part, i) =>
			regex.test(part)
				? createElement("mark", { key: i, className: "bg-yellow-200" }, part)
				: part
		);
};

export const sortData = (
	data: Item[],
	sortColumn: keyof Item,
	sortDirection: "asc" | "desc"
): Item[] => {
	const sortedData = [...data].sort((a, b) => {
		const aVal = a[sortColumn];
		const bVal = b[sortColumn];
		if (aVal === undefined || bVal === undefined) return 0;
		if (aVal < bVal) return sortDirection === "asc" ? -1 : 1;
		if (aVal > bVal) return sortDirection === "asc" ? 1 : -1;
		return 0;
	});

	return sortedData.map((item) => {
		if (item.subItems) {
			return {
				...item,
				subItems: sortData(item.subItems, sortColumn, sortDirection),
			};
		}
		return item;
	});
};

================
File: lib/utils/validation.ts
================
import { APIError } from "./errorHandler";

export function validateRequiredFields<T extends Record<string, any>>(
	data: T,
	requiredFields: (keyof T)[]
) {
	for (const field of requiredFields) {
		if (
			data[field] === undefined ||
			data[field] === null ||
			data[field] === ""
		) {
			throw new APIError(
				`Missing required field: ${String(field)}`,
				400,
				"VALIDATION_ERROR"
			);
		}
	}
}

export function validateNumericField(value: any, fieldName: string) {
	if (isNaN(Number(value))) {
		throw new APIError(
			`${fieldName} must be a number`,
			400,
			"VALIDATION_ERROR"
		);
	}
}

export function validateDateField(value: any, fieldName: string) {
	const date = new Date(value);
	if (isNaN(date.getTime())) {
		throw new APIError(
			`${fieldName} must be a valid date`,
			400,
			"VALIDATION_ERROR"
		);
	}
}

export function validateIdParam(id: string) {
	if (!id || isNaN(Number(id))) {
		throw new APIError("Invalid ID parameter", 400, "VALIDATION_ERROR");
	}
	return parseInt(id, 10);
}

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
	experimental: {
		reactCompiler: true,
	},
	reactStrictMode: false,
};

export default nextConfig;

================
File: package.json
================
{
	"name": "dpo",
	"version": "0.1.0",
	"private": true,
	"scripts": {
		"dev": "next dev --turbopack",
		"build": "prisma validate && prisma generate && next build",
		"start": "next start",
		"lint": "next lint",
		"postinstall": "prisma generate"
	},
	"dependencies": {
		"@dnd-kit/core": "^6.3.1",
		"@dnd-kit/modifiers": "^9.0.0",
		"@dnd-kit/sortable": "^10.0.0",
		"@prisma/client": "^6.1.0",
		"@radix-ui/react-avatar": "^1.1.2",
		"@radix-ui/react-checkbox": "^1.1.3",
		"@radix-ui/react-collapsible": "^1.1.2",
		"@radix-ui/react-dialog": "^1.1.5",
		"@radix-ui/react-dropdown-menu": "^2.1.4",
		"@radix-ui/react-label": "^2.1.1",
		"@radix-ui/react-popover": "^1.1.4",
		"@radix-ui/react-radio-group": "^1.2.2",
		"@radix-ui/react-scroll-area": "^1.2.2",
		"@radix-ui/react-select": "^2.1.4",
		"@radix-ui/react-separator": "^1.1.1",
		"@radix-ui/react-slot": "^1.0.2",
		"@radix-ui/react-switch": "^1.1.2",
		"@radix-ui/react-tabs": "^1.1.2",
		"@radix-ui/react-toast": "^1.1.5",
		"@radix-ui/react-tooltip": "^1.1.6",
		"@supabase/auth-helpers-nextjs": "^0.10.0",
		"@supabase/supabase-js": "^2.48.1",
		"@tailwindcss/container-queries": "^0.1.1",
		"@tanstack/react-table": "^8.20.6",
		"@tanstack/react-virtual": "^3.11.2",
		"class-variance-authority": "^0.7.0",
		"clsx": "^2.1.0",
		"cmdk": "^1.0.4",
		"csv-parse": "^5.6.0",
		"dnd-kit": "^0.0.2",
		"fs": "^0.0.1-security",
		"fs-extra": "^11.3.0",
		"lodash": "^4.17.21",
		"lucide-react": "^0.469.0",
		"motion": "^11.18.2",
		"mysql2": "^3.12.0",
		"next": "15.1.2",
		"prisma": "^6.1.0",
		"react": "^18.2.0",
		"react-dom": "^18.2.0",
		"react-icons": "^5.4.0",
		"react-scan": "^0.1.3",
		"react-use-measure": "^2.1.1",
		"swr": "^2.3.0",
		"tailwind-merge": "^2.2.1",
		"tailwindcss-animate": "^1.0.7"
	},
	"devDependencies": {
		"@eslint/eslintrc": "^3",
		"@types/lodash": "^4.17.15",
		"@types/node": "^20",
		"@types/react": "^19",
		"@types/react-dom": "^19",
		"babel-plugin-react-compiler": "^19.0.0-beta-27714ef-20250124",
		"eslint": "^9",
		"eslint-config-next": "15.1.2",
		"eslint-plugin-react-compiler": "^19.0.0-beta-27714ef-20250124",
		"postcss": "^8",
		"tailwindcss": "^3.4.1",
		"typescript": "^5"
	}
}

================
File: page.tsx
================
import ExpandableTable from './components/expandable-table'

export default function Home() {
  return (
    <main className="min-h-screen p-24">
      <h1 className="text-2xl font-bold mb-4">Tabla de Insumos para la Construcción</h1>
      <ExpandableTable />
    </main>
  )
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: prisma/migrations/20250203134229_init/migration.sql
================
-- CreateTable
CREATE TABLE `prices` (
    `id` INTEGER NOT NULL AUTO_INCREMENT,
    `itemId` INTEGER NOT NULL,
    `price_date` DATETIME(3) NOT NULL,
    `price` DOUBLE NULL,

    PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- CreateTable
CREATE TABLE `items` (
    `id` INTEGER NOT NULL AUTO_INCREMENT,
    `cod` VARCHAR(255) NULL,
    `name` VARCHAR(255) NOT NULL,
    `unit` VARCHAR(255) NULL,
    `category` VARCHAR(255) NULL,
    `type` VARCHAR(255) NULL,
    `origin_table` VARCHAR(255) NULL,

    PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- CreateTable
CREATE TABLE `presupuestos` (
    `id` INTEGER NOT NULL AUTO_INCREMENT,
    `obraId` INTEGER NOT NULL,
    `data` JSON NOT NULL,
    `createdAt` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
    `updatedAt` DATETIME(3) NOT NULL,

    PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- CreateTable
CREATE TABLE `mediciones` (
    `id` INTEGER NOT NULL AUTO_INCREMENT,
    `presupuestoId` INTEGER NOT NULL,
    `data` JSON NOT NULL,
    `createdAt` DATETIME(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),
    `updatedAt` DATETIME(3) NOT NULL,

    PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- CreateTable
CREATE TABLE `obras` (
    `id` INTEGER NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(200) NULL,
    `montoContrato` DOUBLE NULL,
    `inaugurada` SMALLINT NULL,
    `plazo` INTEGER NULL,
    `Fecha de Contrato` DATETIME(3) NULL,
    `Fecha de Inicio` DATETIME(3) NULL,
    `Fecha de Finalización` DATETIME(3) NULL,
    `fechaLicitacion` DATETIME(3) NULL,
    `data` JSON NOT NULL,

    UNIQUE INDEX `NombreObra`(`name`),
    PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- CreateTable
CREATE TABLE `certificaciones` (
    `id` INTEGER NOT NULL AUTO_INCREMENT,
    `NumCertificado` VARCHAR(50) NULL,
    `Monto` DOUBLE NULL,
    `MesCertificado` DATETIME(3) NULL,
    `data` JSON NOT NULL,
    `IdObras` INTEGER NULL,
    `IdEmpresa` INTEGER NULL,
    `FechaLiq` DATETIME(3) NULL,
    `FechaIng` DATETIME(3) NULL,
    `pagado` SMALLINT NULL,
    `netoapagar` DOUBLE NULL,

    PRIMARY KEY (`id`)
) DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- AddForeignKey
ALTER TABLE `prices` ADD CONSTRAINT `prices_itemId_fkey` FOREIGN KEY (`itemId`) REFERENCES `items`(`id`) ON DELETE NO ACTION ON UPDATE NO ACTION;

-- AddForeignKey
ALTER TABLE `presupuestos` ADD CONSTRAINT `presupuestos_obraId_fkey` FOREIGN KEY (`obraId`) REFERENCES `obras`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE `mediciones` ADD CONSTRAINT `mediciones_presupuestoId_fkey` FOREIGN KEY (`presupuestoId`) REFERENCES `presupuestos`(`id`) ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE `certificaciones` ADD CONSTRAINT `certificaciones_IdObras_fkey` FOREIGN KEY (`IdObras`) REFERENCES `obras`(`id`) ON DELETE SET NULL ON UPDATE CASCADE;

================
File: prisma/migrations/20250203134911_changes/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `price_date` on the `prices` table. All the data in the column will be lost.
  - Added the required column `priceDate` to the `prices` table without a default value. This is not possible if the table is not empty.

*/
-- AlterTable
ALTER TABLE `prices` DROP COLUMN `price_date`,
    ADD COLUMN `priceDate` DATETIME(3) NOT NULL;

================
File: prisma/migrations/migration_lock.toml
================
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "mysql"

================
File: prisma/schema_old.prisma
================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASEURL")
}

model certificaciones {
  IdCertificado   Int                   @id @default(autoincrement())
  NumCertificado  String?               @db.VarChar(50)
  Monto           Float?
  MesCertificado  DateTime?
  IdObras         Int?
  IdTipos         Int?
  IdEmpresa       Int?
  FechaLiq        DateTime?
  FechaIng        DateTime?
  pagado          Int?                  @db.SmallInt
  netoapagar      Float?
  numexpte        String?               @db.VarChar(255)
  provisorio      Int?                  @db.SmallInt
  verificado      Int?                  @db.SmallInt
  numexpte2       Int?
  ubicacion       Int?
  recibidofyh_1   DateTime?
  recibidofyh_2   DateTime?
  recibidofyh_3   DateTime?
  recibidofyh_4   DateTime?
  recibidofyh_5   DateTime?
  recibido_1      Int?                  @db.SmallInt
  recibido_2      Int?                  @db.SmallInt
  recibido_3      Int?                  @db.SmallInt
  recibido_4      Int?                  @db.SmallInt
  recibido_5      Int?                  @db.SmallInt
  IdTipos2        Int?
  redetnum        String?               @db.VarChar(255)
  adicnum         String?               @db.VarChar(255)

  // Relations
  empresa         empresas?             @relation("EmpresasCertificaciones", fields: [IdEmpresa], references: [IdEmpresa])
  obra            obras?                @relation("ObrasCertificaciones", fields: [IdObras], references: [IdObras])
  tipo            tipocertificados?     @relation("CertTipos", fields: [IdTipos], references: [IdTipos])
  tipo2           tipocertificados?     @relation("CertTipos2", fields: [IdTipos2], references: [IdTipos])

  // Indexes
  @@index([IdEmpresa], map: "cert_IdEmpresa")
  @@index([IdObras], map: "IdObra")
  @@index([IdTipos], map: "IdTipos")
  @@index([NumCertificado], map: "NumCertificado")
  @@index([IdObras], map: "ObrasCertificaciones")
  @@index([IdTipos2], map: "IdTipos2")
}

model empresas {
  IdEmpresa     Int              @id @default(autoincrement())
  Nombreempresa String?          @db.VarChar(50)
  Responsable   String?           @db.VarChar(50)
  Direcci_n      String?           @map("Dirección") @db.VarChar(50)
  Telefono      String?           @db.VarChar(255)
  Cuit          String?           @db.VarChar(255)
  Observaciones String?          @db.VarChar(255)
  mail          String?           @db.VarChar(255)
  cfce          DateTime?
  cfcv          DateTime?
  cfcp          DateTime?
  pass          String?           @db.VarChar(255)
  user          String?           @db.VarChar(255)

  // Relations
  certificaciones certificaciones[] @relation("EmpresasCertificaciones")
  obras           obras[]            @relation("ObrasEmpresas")
}

model inspectores {
  IdInspectores Int     @id @default(autoincrement())
  Tratamiento   String? @db.VarChar(10)
  Apellido      String? @db.VarChar(50)
  Nombres       String? @db.VarChar(50)
  proye         Int?
  Tel_fono      String? @map("Teléfono") @db.VarChar(50)
  Inspector     Int?    @db.SmallInt

  // Relations
  obras       obras[] @relation("ObrasInspectores")
}

model obras {
  IdObras               Int               @id @default(autoincrement())
  NombreObra            String?           @unique(map: "NombreObra") @db.VarChar(200)
  Norma_Legal           String?   @db.VarChar(50)
  Norma_Legal2          String?   @db.VarChar(50)
  Monto_Contrato        Float?
  IdEmpresa             Int?
  IdInspectores         Int?
  IdReparticion         Int?
  IdAvance              Int?
  Plazo                 Int?
  IdModalidad           Int?
  IdLocalidad           Int?
  IdAreas               Int?
  Fecha_de_Contrato     DateTime? @map("Fecha de Contrato")
  Fecha_de_Inicio       DateTime? @map("Fecha de Inicio")
  Fecha_de_Finalizaci_n DateTime? @map("Fecha de Finalización")
  Memoria_Desc          String?   @map("Memoria Desc") @db.VarChar(255)
  Codigo_Meta           String?   @map("Codigo Meta") @db.VarChar(50)
  Departamento          Int?
  Monto_Adicional_1     Float?
  Plazo_Adicional1      Int?
  Final_adicional1      DateTime?
  Monto_Adicional_2     Float?
  Plazo_Adicional2      Int?
  Final_adicional2      DateTime?
  Plazo_Adicional3      Int?
  Final_adicional3      DateTime?
  IdProyectista         Int?
  Norma1                String?   @db.VarChar(50)
  Norma2                String?   @db.VarChar(50)
  Norma3                String?   @db.VarChar(50)
  Amp_Cont1             String?   @db.VarChar(50)
  Amp_Cont2             String?   @db.VarChar(50)
  Observaciones         String?
  Monto_Adicional_3     Float?
  Amp_Cont3             String?   @db.VarChar(50)
  Redet_monto_1         Float?
  Redet_monto_2         Float?
  Redet_monto_3         Float?
  Redet_norma_1         String?   @db.VarChar(50)
  Redet_norma_2         String?   @db.VarChar(50)
  Redet_norma_3         String?   @db.VarChar(50)
  Redet_monto_4         Float?
  Redet_monto_5         Float?
  Redet_monto_6         Float?
  Redet_norma_4         Int?
  Redet_norma_5         Int?
  Redet_norma_6         Int?
  Redet_norma_01        Int?
  Redet_norma_02        Int?
  Redet_norma_03        Int?
  redet1                String?   @db.VarChar(255)
  redet2                String?   @db.VarChar(255)
  redet3                String?   @db.VarChar(255)
  redet4                String?   @db.VarChar(255)
  redet5                String?   @db.VarChar(255)
  redet6                String?   @db.VarChar(255)
  basicoredet1          String?   @db.VarChar(255)
  basicoredet2          String?   @db.VarChar(255)
  basicoredet3          String?   @db.VarChar(255)
  basicoredet4          String?   @db.VarChar(255)
  basicoredet5          String?   @db.VarChar(255)
  basicoredet6          String?   @db.VarChar(255)
  Proyecto              Int?      @db.SmallInt
  A_oTerminada          Int?      @map("AñoTerminada")
  Expte                 String?   @db.VarChar(255)
  Expte2                Int?
  pliego                Int?      @db.SmallInt
  basico                String?   @db.VarChar(255)
  prioridad             Int?      @db.SmallInt
  fuenteO               Int?
  Edificio              Int?
  pptoof               Float?
  p                     Int?      @map("3p") @db.SmallInt
  Fechalicit            DateTime?
  ResponsableProy       String?   @db.VarChar(255)
  Fechapliego           DateTime?
  Fechaelevado          DateTime?
  NormaARP              String?   @db.VarChar(255)
  NormaARD              String?   @db.VarChar(255)
  fechaARP              DateTime?
  fechaARD              DateTime?
  NormaARPA1            String?   @db.VarChar(255)
  NormaARDA1            String?   @db.VarChar(255)
  fechaARPA1            DateTime?
  fechaARDA1            DateTime?
  NormaARPA2            String?   @db.VarChar(255)
  NormaARDA2            String?   @db.VarChar(255)
  fechaARPA2            DateTime?
  fechaARDA2            DateTime?
  NormaARPA3            String?   @db.VarChar(255)
  NormaARDA3            String?   @db.VarChar(255)
  fechaARPA3            DateTime?
  fechaARDA3            DateTime?
  inaugurada            Int?      @db.SmallInt
  ainaugurar            Int?      @db.SmallInt
  fechainaugur          DateTime?
  noinaugur             Int?      @db.SmallInt
  observ3_              String?   @map("observ3%") @db.VarChar(255)
  numlic                String?   @db.VarChar(255)
  asociado1             Int?
  asociado2             Int?
  calculista            Int?
  computista            Int?
  dibujante1            Int?
  dibujante2            Int?
  IdEstad               Int?
  pptador               Int?
  fechainicio           DateTime?
  fechafin              DateTime?
  fechaelevdir          DateTime?
  IdEsc                 Int?
  tareas                String?   @db.VarChar(255)
  IdObj                 Int?
  observproy            String?   @db.VarChar(255)
  solic1                Int?
  solic2                Int?
  Idproceso             Int?
  refm2                 Int?
  ampm2                 Int?
  normaadju             String?   @db.VarChar(255)
  normalicit            String?   @db.VarChar(255)
  fecha1                DateTime?
  fecha2                DateTime?
  fecha3                DateTime?
  fecha4                DateTime?
  fecha5                DateTime?
  fecha6                DateTime?
  datospoliza           String?
  onm2                  Int?
  codigoSIG             Int?
  avanceproy            Int?      @map("%avanceproy")
  MemAdic1              String?
  MemAdic2              String?
  MemAdic3              String?
  polizanum             String?   @db.VarChar(255)
  polizaemp             String?   @db.VarChar(255)
  polizamonto           Float?
  clasificacion         Int?
  fecha7                DateTime?
  fecha8                DateTime?
  fecha9                DateTime?
  caratula              Int?      @db.SmallInt
  presupuesto           Int?      @db.SmallInt
  drive                 Int?      @db.SmallInt
  obserpliego           String?
  IdProg                Int?
  autor1                String?   @db.VarChar(255)
  autor2                String?   @db.VarChar(255)
  autor3                String?   @db.VarChar(255)
  autor4                String?   @db.VarChar(255)
  autor5                String?   @db.VarChar(255)
  autor6                String?   @db.VarChar(255)
  autor7                String?   @db.VarChar(255)
  autor8                String?   @db.VarChar(255)
  autor9                String?   @db.VarChar(255)
  autor10               String?   @db.VarChar(255)
  autor11               String?   @db.VarChar(255)
  autor12               String?   @db.VarChar(255)
  link1                 String?   @db.VarChar(50)
  link2                 String?   @db.VarChar(50)
  ordenanza1            String?   @db.VarChar(50)
  ordenanza2            String?   @db.VarChar(50)
  progresoplanif        Int?
  Redet_monto_7         Float?
  Redet_monto_8         Float?
  Redet_monto_9         Float?
  Redet_norma_7         String?   @db.VarChar(50)
  Redet_norma_8         String?   @db.VarChar(50)
  Redet_norma_9         String?   @db.VarChar(50)
  Redet_monto_10        Float?
  Redet_monto_11        Float?
  Redet_monto_12        Float?
  Redet_norma_10        Int?
  Redet_norma_11        Int?
  Redet_norma_12        Int?
  basicoredet7          String?   @db.VarChar(255)
  basicoredet8          String?   @db.VarChar(255)
  basicoredet9          String?   @db.VarChar(255)
  basicoredet10         String?   @db.VarChar(255)
  basicoredet11         String?   @db.VarChar(255)
  basicoredet12         String?   @db.VarChar(255)
  redet7                String?   @db.VarChar(255)
  redet8                String?   @db.VarChar(255)
  redet9                String?   @db.VarChar(255)
  redet10               String?   @db.VarChar(255)
  redet11               String?   @db.VarChar(255)
  redet12               String?   @db.VarChar(255)
  Adic_norma_1          Int?
  Adic_norma_2          Int?
  Adic_norma_3          Int?
  Adic_norma_4          Int?
  ARP_norma_1           Int?
  ARD_norma_1           Int?
  AP_norma_1            Int?
  AP_norma_2            Int?
  AP_norma_3            Int?
  AP_norma_4            Int?
  Monto_Adicional_4     Float?
  Plazo_Adicional4      Int?
  Final_adicional4      DateTime?
  Amp_Cont4             String?   @db.VarChar(50)
  MemAdic4              String?
  ARPA_expte_4          Int?
  ARDA_expte_4          Int?
  NormaARPA4            String?   @db.VarChar(255)
  NormaARDA4            String?   @db.VarChar(255)
  fechaARPA4            DateTime?
  fechaARDA4            DateTime?
  Norma4                String?   @db.VarChar(50)
  ARPA_expte_3          Int?
  ARDA_expte_3          Int?
  ARPA_expte_2          Int?
  ARDA_expte_2          Int?
  ARPA_expte_1          Int?
  ARDA_expte_1          Int?
  pr1                   Int?      @map("3pr1") @db.SmallInt
  pr2                   Int?      @map("3pr2") @db.SmallInt
  pr3                   Int?      @map("3pr3") @db.SmallInt
  pr4                   Int?      @map("3pr4") @db.SmallInt
  pr5                   Int?      @map("3pr5") @db.SmallInt
  pr6                   Int?      @map("3pr6") @db.SmallInt
  pr7                   Int?      @map("3pr7") @db.SmallInt
  pr8                   Int?      @map("3pr8") @db.SmallInt
  pr9                   Int?      @map("3pr9") @db.SmallInt
  pr10                  Int?      @map("3pr10") @db.SmallInt
  pr11                  Int?      @map("3pr11") @db.SmallInt
  pr12                  Int?      @map("3pr12") @db.SmallInt
  IdRepresentante       Int?
  ARPA_expte_0          Int?
  ARDA_expte_0          Int?
  pptotope              Int?      @db.SmallInt
  presupuestos         presupuestos[]

  // Relations
  certificaciones certificaciones[] @relation("ObrasCertificaciones")

  // Foreign Keys
  IdEmpresa             Int?
  IdAreas               Int?
  IdAvance              Int?
  IdInspectores         Int?
  IdLocalidad           Int?
  IdModalidad           Int?
  IdReparticion         Int?
  IdProyectista         Int?
  IdEsc                 Int?
  IdEstad               Int?
  IdRepresentante       Int?
  Idproceso             Int?

  // Relations
  empresa               empresas?         @relation("ObrasEmpresas", fields: [IdEmpresa], references: [IdEmpresa])
  area                  areas?            @relation("ObrasAreas", fields: [IdAreas], references: [IdAreas])
  avance                avance?           @relation("ObrasAvance", fields: [IdAvance], references: [IdAvance])
  inspector             inspectores?      @relation("ObrasInspectores", fields: [IdInspectores], references: [IdInspectores])
  localidad             localidades?     @relation("ObrasLocalidades", fields: [IdLocalidad], references: [IdLocalidad])
  modalidad             modalidad?        @relation("ObrasModalidad", fields: [IdModalidad], references: [IdModalidad])
  reparticion           repartici_n?     @relation("ObrasReparticion", fields: [IdReparticion], references: [IdReparticion])
  proyectista           proyectistas?     @relation("ObrasProyectistas", fields: [IdProyectista], references: [IdProyectista])
  edificio              edificios?        @relation("ObrasEdificios", fields: [IdEsc], references: [IdEsc])
  estado                estados?          @relation("ObrasEstados", fields: [IdEstad], references: [Idestad])
  representante         representantes?  @relation("ObrasRepresentantes", fields: [IdRepresentante], references: [IdRep])
  proceso               procesos?         @relation("ObrasProcesos", fields: [Idproceso], references: [Idproceso])

  // Indexes
  @@index([IdEmpresa], map: "obras_IdEmpresa")
  @@index([IdAreas], map: "obras_IdAreas")
  @@index([IdAvance], map: "obras_IdAvance")
  @@index([IdInspectores], map: "obras_IdInspector")
  @@index([IdLocalidad], map: "obras_IdLocalidad")
  @@index([IdModalidad], map: "obras_IdModalidad")
  @@index([IdReparticion], map: "obras_IdReparticion")
  @@index([IdProyectista], map: "obras_Proyectista")
  @@index([IdEsc], map: "obras_IdEsc")
  @@index([IdEstad], map: "obras_IdEstad")
  @@index([IdRepresentante], map: "obras_IdInspectores")
  @@index([Idproceso], map: "obras_Idproceso")
}

model proyectistas {
  IdProyectista Int     @id @default(autoincrement())
  Tratamiento   String? @db.VarChar(10)
  Apellido      String? @db.VarChar(50)
  Nombres       String? @db.VarChar(50)
  Profesion     String? @db.VarChar(50)
  Direcci_n     String? @map("Dirección") @db.VarChar(50)
  Tel_fono      String? @map("Teléfono") @db.VarChar(50)
  Inspector     Int?    @db.SmallInt
  DNI           Int?
  observaciones String?
  mail          String? @db.VarChar(255)
  dependencia   Int?

  // Relations
  obras         obras[] @relation("ObrasProyectistas")
}

model items {
  id           Int      @id @default(autoincrement())
  cod          String?   @db.VarChar(255)
  publicar     String?  @db.VarChar(255)
  item_name    String   @db.VarChar(255)
  unid         String?  @db.VarChar(255)
  category     String?  @db.VarChar(255)
  type         String?  @db.VarChar(255)
  origin_table String?  @db.VarChar(255)
  prices       prices[]
}

model areas {
  IdAreas Int       @id @default(autoincrement())
  Areas   String?   @db.VarChar(50)

  // Relations
  obras    obras[]   @relation("ObrasAreas")

  @@index([Areas], map: "areas_IdArea")
}

model avance {
  IdAvance    Int     @id @default(autoincrement())
  Estado      String? @db.VarChar(50)
  descripcion String? @db.VarChar(255)

  // Relations
  obras     obras[] @relation("ObrasAvance")
}

model clasificacion {
  IdClasif Int     @id @default(autoincrement())
  clasif   String? @db.VarChar(255)
}

model comercios {
  IdComercio     Int     @id @default(autoincrement())
  Nombrecomercio String? @db.VarChar(50)
  Responsable    String? @db.VarChar(50)
  Direcci_n      String? @map("Dirección") @db.VarChar(50)
  Telefono       String? @db.VarChar(255)
  Cuit           String? @db.VarChar(255)
  Observaciones  String? @db.VarChar(255)
}

model dependencias {
  IdDep       Int     @id @default(autoincrement())
  dependencia String? @db.VarChar(255)
  dep         String? @db.VarChar(255)
}

model dptos {
  IdDptos       Int     @id @default(autoincrement())
  Departamentos String? @unique(map: "Departamentos") @db.VarChar(50)
  abrev         String? @db.VarChar(255)
}

model edificios {
  IdEsc         Int      @id @default(autoincrement())
  acceso        String?  @db.VarChar(255)
  Numero        Int?
  Adrema        String? @db.VarChar(255)
  propiedad     String? @db.VarChar(255)
  lat           String? @db.VarChar(10)
  lng           String? @db.VarChar(10)
  Nombre        String? @db.VarChar(50)
  IdDptos       Int?
  IdLocalidad   Int?
  estadoconserv String? @db.VarChar(255)
  Superficie    Float?
  dirlote       String? @db.VarChar(255)
  Extras        String?
  Observaciones String?
  Direcci_n     String? @map("Dirección") @db.VarChar(255)
  Convenio      String? @db.VarChar(255)
  Categor_a     String? @map("Categoría") @db.VarChar(255)
  IdFuncio      Int?
  Distancia     Int?
  Instespec     String? @db.VarChar(255)
  A_oconst      String? @map("Añoconst") @db.VarChar(255)
  Director      String? @db.VarChar(255)
  dirmanzana    String? @db.VarChar(255)
  dirnum        String? @db.VarChar(255)
  Insctomo      String? @db.VarChar(255)
  Inscfolio     String? @db.VarChar(255)
  Caraconst     String? @db.VarChar(255)
  Insca_o       Int?    @map("Inscaño")
  Empresaejec   String? @db.VarChar(255)
  Autor         String? @db.VarChar(255)
  FotoEmp       String? @db.VarChar(255)
  Foto1         String? @db.VarChar(255)
  Foto2         String? @db.VarChar(255)
  Foto3         String? @db.VarChar(255)
  Img1          String? @db.VarChar(255)
  mensura       String? @db.VarChar(255)
  otros_datos   String? @map("otros datos") @db.VarChar(255)
  frente        Float?
  fondo         Float?

  // Relations
  obras         obras[] @relation("ObrasEdificios")

  @@index([Nombre], map: "edificios_Nombre")
  @@index([IdDptos], map: "edificios_iddptos")
}

model estados {
  Idestad Int      @id @default(autoincrement())
  estado  String?  @db.VarChar(255)

  // Relations
  obras    obras[] @relation("ObrasEstados")
}

model fuentes {
  IdFuente Int     @id @default(autoincrement())
  fuente   String? @db.VarChar(255)
}

model funcion {
  IdFuncio Int     @id @default(autoincrement())
  funcion  String? @db.VarChar(50)
}

model informes {
  IdInforme Int       @id @default(autoincrement())
  fecha     DateTime?
  IdObras   Int?
  informe   String?   @db.VarChar(200)
}

model iniciadores {
  IdInic    Int     @id @default(autoincrement())
  iniciador String? @unique(map: "iniciador") @db.VarChar(255)
  IdEmpresa Int?

  @@index([IdEmpresa], map: "IdEmpresa")
}

model localidades {
  IdLocalidad Int      @id @default(autoincrement())
  Localidad   String?  @unique(map: "Localidad") @db.VarChar(50)
  IdDptos     Int?
  Categor_a   Int?     @map("Categoría")
  Poblaci_n   Int?      @map("Población")
  intendente  String?  @db.VarChar(255)
  codpostal   String?  @db.VarChar(255)
  Datos       String?  @db.VarChar(255)
  abrevloc    String?  @db.VarChar(255)

  // Relations
  obras       obras[] @relation("ObrasLocalidades")

  @@index([IdDptos], map: "localidades_iddptos")
}

model modalidad {
  IdModalidad Int      @id @default(autoincrement())
  Tipo        String?  @db.VarChar(50)

  // Relations
  obras       obras[] @relation("ObrasModalidad")
}

model plan_trabajo {
  IdPlan          Int       @id @default(autoincrement())
  IdObras         Int?
  Mes_1           DateTime? @map("Mes 1")
  Montos_1        Float?     @map("Montos 1")
  P__de_Trabajo_1 Float?     @map("P_ de Trabajo_1")

  @@index([IdObras], map: "IdObras")
}

model procesos {
  Idproceso Int      @id @default(autoincrement())
  proceso   String?  @db.VarChar(255)

  // Relations
  obras     obras[] @relation("ObrasProcesos")
}

model programas {
  IdProg       Int     @id @default(autoincrement())
  Denominacion String? @db.VarChar(255)
}

model representantes {
  IdRep       Int      @id @default(autoincrement())
  TratRep     String?  @db.VarChar(255)
  ApellidoRep String?  @db.VarChar(255)
  NombresRep  String?  @db.VarChar(255)
  DNIRep      String?  @db.VarChar(255)
  Mat         String?  @db.VarChar(255)

  // Relations
  obras       obras[] @relation("ObrasRepresentantes")
}

model rubros {
  IdRubro    Int     @id @default(autoincrement())
  Rubro      String? @db.VarChar(50)
  comentario String? @db.VarChar(255)

  @@index([Rubro], map: "rubros_IdArea")
}

model tipocertificados {
  IdTipos         Int                   @id @default(autoincrement())
  tipocertificado String?               @db.VarChar(50)

  // Relations
  certificaciones certificaciones[]     @relation("CertTipos")
  certificaciones2 certificaciones[]    @relation("CertTipos2")

  // Indexes
  @@index([IdTipos], map: "IdTipos")
}

model tipocomprobante {
  IdCompro   Int     @id @default(autoincrement())
  compro     String? @db.VarChar(50)
  comentario String? @db.VarChar(255)

  @@index([compro], map: "compro_IdArea")
}

model usuarios {
  IdUsuario Int     @id @default(autoincrement())
  Login     String?  @db.VarChar(255)
  pass      String?  @db.VarChar(255)
  Id_acceso Int?
  usuario   String?  @db.VarChar(255)
  identif   String?  @db.VarChar(255)
  IdDep     Int?

  @@index([identif], map: "identif")
}

model repartici_n {
  IdReparticion     Int      @id @default(autoincrement())
  NombreRepartici_n String?  @map("NombreRepartición") @db.VarChar(50)

  // Relations
  obras           obras[] @relation("ObrasReparticion")

  @@map("repartición")
}

model prices {
  id         Int      @id @default(autoincrement())
  item_id    Int
  price_date DateTime
  price      Float?
  items      items    @relation(fields: [item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prices_ibfk_1")

  @@index([item_id], map: "item_id")
}

model presupuestos {
  id          Int      @id @default(autoincrement())
  obraId      Int
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  obra        obras    @relation(fields: [obraId], references: [IdObras])

  @@index([obraId])
}

================
File: prisma/schema.prisma
================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASEURL")
}

model prices {
  id        Int      @id @default(autoincrement())
  itemId    Int
  price     Float?
  priceDate DateTime
  item      items    @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([itemId], map: "prices_itemId_fkey")
}

model items {
  id           Int      @id @default(autoincrement())
  cod          String?  @db.VarChar(255)
  name         String   @db.VarChar(255)
  unit         String?  @db.VarChar(255)
  category     String?  @db.VarChar(255)
  type         String?  @db.VarChar(255)
  origin_table String?  @db.VarChar(255)
  prices       prices[]
}

model presupuestos {
  id         Int          @id @default(autoincrement())
  obraId     Int
  data       Json
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  mediciones mediciones[]
  obra       obras        @relation(fields: [obraId], references: [id])

  @@index([obraId], map: "presupuestos_obraId_fkey")
}

model mediciones {
  id            Int          @id @default(autoincrement())
  presupuestoId Int
  data          Json
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  presupuesto   presupuestos @relation(fields: [presupuestoId], references: [id])

  @@index([presupuestoId], map: "mediciones_presupuestoId_fkey")
}

model obras {
  id                    Int               @id @default(autoincrement())
  NombreObra            String?           @unique(map: "NombreObra") @db.VarChar(200)
  Monto_Contrato        Float?
  inaugurada            Int?              @db.SmallInt
  plazo                 Int?
  Fecha_de_Contrato     DateTime?         @map("Fecha de Contrato")
  Fecha_de_Inicio       DateTime?         @map("Fecha de Inicio")
  Fecha_de_Finalizaci_n DateTime?         @map("Fecha de Finalización")
  Fechalicit            DateTime?
  data                  Json
  certificaciones       certificaciones[]
  presupuestos          presupuestos[]
}

model certificaciones {
  id             Int       @id @default(autoincrement())
  NumCertificado String?   @db.VarChar(50)
  Monto          Float?
  MesCertificado DateTime?
  data           Json
  IdObras        Int?
  IdEmpresa      Int?
  FechaLiq       DateTime?
  FechaIng       DateTime?
  pagado         Int?      @db.SmallInt
  netoapagar     Float?
  obra           obras?    @relation(fields: [IdObras], references: [id])

  @@index([IdObras], map: "certificaciones_IdObras_fkey")
}

================
File: prisma/schema.prisma.backup
================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASEURL")
}

model prices {
  id         Int      @id @default(autoincrement())
  itemId     Int
  price_date DateTime
  price      Float?

  // Relation to items:
  item       items    @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model items {
  id           Int      @id @default(autoincrement())
  cod          String?  @db.VarChar(255)
  name         String   @db.VarChar(255)
  unit         String?  @db.VarChar(255)
  category     String?  @db.VarChar(255)
  type         String?  @db.VarChar(255)
  origin_table String?  @db.VarChar(255)

  // One item can have many prices.
  prices       prices[]
}

model presupuestos {
  id          Int      @id @default(autoincrement())
  obraId      Int
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Each presupuesto belongs to one obra.
  obra        obras   @relation(fields: [obraId], references: [id])
}

model mediciones {
  id          Int      @id @default(autoincrement())
  presupuestoId      Int
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Each medicion belongs to one presupuesto.
  presupuesto        presupuestos   @relation(fields: [presupuestoId], references: [id])
}

model obras {
  id               Int               @id @default(autoincrement())
  name             String?           @unique(map: "NombreObra") @db.VarChar(200)
  montoContrato   Float?
  inaugurada       Int?              @db.SmallInt
  plazo            Int?
  fechaContrato    DateTime?         @map("Fecha de Contrato")
  fechaInicio      DateTime?         @map("Fecha de Inicio")
  fechaFin         DateTime?         @map("Fecha de Finalización")
  fechaLicitacion  DateTime?
  data        Json

  // These fields refer to other entities (e.g. empresa, estado, localidad).
  // You can later add relations if you define those models.
  //IdEmpresa        Int?
  //IdEstado         Int?
  //IdLocalidad      Int?

  // One obra can have many presupuestos.
  presupuestos     presupuestos[]

  // One obra can have many certificaciones.
  certificaciones  certificaciones[]
}


model certificaciones {
  id              Int         @id @default(autoincrement())
  NumCertificado  String?     @db.VarChar(50)
  Monto           Float?
  MesCertificado  DateTime?
  data        Json

  // Relate certificaciones to obras (if an obra is associated).
  IdObras         Int?
  obra            obras?      @relation(fields: [IdObras], references: [id])
  
  // Optionally, if you define an "empresa" model later you can add a similar relation.
  IdEmpresa       Int?

  FechaLiq        DateTime?
  FechaIng        DateTime?
  pagado          Int?        @db.SmallInt
  netoapagar      Float?
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{js,ts,jsx,tsx,mdx}",
		"./components/**/*.{js,ts,jsx,tsx,mdx}",
		"./app/**/*.{js,ts,jsx,tsx,mdx}",
	],
	theme: {
		extend: {
			colors: {
				background: "hsl(var(--background))",
				foreground: "hsl(var(--foreground))",
				brand: {
					DEFAULT: "hsl(var(--brand))",
					background: "hsl(var(--brand-background))",
					foreground: "hsl(var(--brand-foreground))",
					secondary: "hsl(var(--brand-secondary))",
					border: "hsl(var(--border))",
				},
				accent: {
					DEFAULT: "hsl(var(--accent))",
					background: "hsl(var(--accent-background))",
					foreground: "hsl(var(--accent-foreground))",
					secondary: "hsl(var(--accent-secondary))",
				},
				destructive: {
					DEFAULT: "hsl(var(--destructive))",
					background: "hsl(var(--destructive-background))",
					foreground: "hsl(var(--destructive-foreground))",
					secondary: "hsl(var(--destructive-secondary))",
					border: "hsl(var(--destructive-border))",
				},
				success: {
					DEFAULT: "hsl(var(--success))",
					background: "hsl(var(--success-background))",
					foreground: "hsl(var(--success-foreground))",
					secondary: "hsl(var(--success-secondary))",
					border: "hsl(var(--success-border))",
				},
				alert: {
					DEFAULT: "hsl(var(--alert))",
					background: "hsl(var(--alert-background))",
					foreground: "hsl(var(--alert-foreground))",
					secondary: "hsl(var(--alert-secondary))",
					border: "hsl(var(--alert-border))",
				},
				input: {
					DEFAULT: "hsl(var(--input))",
					background: "hsl(var(--input-background))",
					foreground: "hsl(var(--input-foreground))",
					secondary: "hsl(var(--input-secondary))",
				},
				card: {
					DEFAULT: "hsl(var(--card))",
					foreground: "hsl(var(--card-foreground))",
				},
				popover: {
					DEFAULT: "hsl(var(--popover))",
					foreground: "hsl(var(--popover-foreground))",
				},
				primary: {
					DEFAULT: "hsl(var(--primary))",
					foreground: "hsl(var(--primary-foreground))",
				},
				secondary: {
					DEFAULT: "hsl(var(--secondary))",
					foreground: "hsl(var(--secondary-foreground))",
				},
				muted: {
					DEFAULT: "hsl(var(--muted))",
					foreground: "hsl(var(--muted-foreground))",
				},
				border: "hsl(var(--border))",
				ring: "hsl(var(--ring))",
				black: "hsl(var(--black))",
				chart: {
					"1": "hsl(var(--chart-1))",
					"2": "hsl(var(--chart-2))",
					"3": "hsl(var(--chart-3))",
					"4": "hsl(var(--chart-4))",
					"5": "hsl(var(--chart-5))",
				},
				sidebar: {
					DEFAULT: "hsl(var(--sidebar-background))",
					foreground: "hsl(var(--sidebar-foreground))",
					primary: "hsl(var(--sidebar-primary))",
					"primary-foreground": "hsl(var(--sidebar-primary-foreground))",
					accent: "hsl(var(--sidebar-accent))",
					"accent-foreground": "hsl(var(--sidebar-accent-foreground))",
					border: "hsl(var(--sidebar-border))",
					ring: "hsl(var(--sidebar-ring))",
				},
			},
			textColor: {
				foreground: {
					DEFAULT: "hsl(var(--foreground))",
					dim: "hsl(var(--foreground-dim))",
					muted: "hsl(var(--foreground-muted))",
					secondary: "hsl(var(--foreground-secondary))",
				},
				brand: {
					DEFAULT: "hsl(var(--brand-foreground))",
					secondary: "hsl(var(--brand-secondary))",
				},
				accent: {
					DEFAULT: "hsl(var(--accent-foreground))",
					secondary: "hsl(var(--accent-secondary))",
				},
				destructive: {
					DEFAULT: "hsl(var(--destructive-foreground))",
					secondary: "hsl(var(--destructive-secondary))",
				},
				success: {
					DEFAULT: "hsl(var(--success-foreground))",
					secondary: "hsl(var(--success-secondary))",
				},
				alert: {
					DEFAULT: "hsl(var(--alert-foreground))",
					secondary: "hsl(var(--alert-secondary))",
				},
				input: {
					DEFAULT: "hsl(var(--input-foreground))",
					secondary: "hsl(var(--input-secondary))",
				},
			},
			boxShadow: {
				DEFAULT: "0 3px 4px -2px hsl(var(--border))",
				hover: "0 3px 5px 0px hsl(var(--border))",
				simple:
					"inset 0 1px 0 hsla(0, 0%, 100%, .25),0 0 0 1px hsl(203, 13%, 12%), 0 0.3px 0.4px hsla(203,86%,12%,0.02),0 0.9px 1.5px hsla(203,86%,12%,0.045),0 3.5px 6px hsla(203,86%,12%,0.09)",
				"simple-hover":
					"inset 0 1px 0 hsla(0, 0%, 100%, .15),0 0 0 1px hsl(203, 13%, 12%), 0 0.3px 0.4px hsla(203,86%,12%,0.02),0 0.9px 1.5px hsla(203,86%,12%,0.045),0 3.5px 6px hsla(203,86%,12%,0.09), inset 0px 11px 10px -10px hsla(0, 0%, 100%, 0.35)",
				"simple-destructive":
					"inset 0 1px 0 hsla(0, 0%, 100%, .15),0 0 0 1px hsl(var(--destructive-border)), 0 0.3px 0.4px hsla(203,86%,12%,0.02),0 0.9px 1.5px hsla(203,86%,12%,0.045),0 3.5px 6px hsla(203,86%,12%,0.09)",
				"simple-destructive-hover":
					"inset 0 1px 0 hsla(0, 0%, 100%, .15),0 0 0 1px hsl(var(--destructive-border)), 0 0.3px 0.4px hsla(203,86%,12%,0.02),0 0.9px 1.5px hsla(203,86%,12%,0.045),0 3.5px 6px hsla(203,86%,12%,0.09), inset 0px 11px 10px -10px hsla(0, 0%, 100%, 0.35)",
				"simple-success":
					"inset 0 1px 0 hsla(0, 0%, 100%, .15),0 0 0 1px hsl(var(--success-border)), 0 0.3px 0.4px hsla(203,86%,12%,0.02),0 0.9px 1.5px hsla(203,86%,12%,0.045),0 3.5px 6px hsla(203,86%,12%,0.09)",
				"simple-success-hover":
					"inset 0 1px 0 hsla(0, 0%, 100%, .15),0 0 0 1px hsl(var(--success-border)), 0 0.3px 0.4px hsla(203,86%,12%,0.02),0 0.9px 1.5px hsla(203,86%,12%,0.045),0 3.5px 6px hsla(203,86%,12%,0.09), inset 0px 11px 10px -10px hsla(0, 0%, 100%, 0.35)",
				"simple-alert":
					"inset 0 1px 0 hsla(0, 0%, 100%, .15),0 0 0 1px hsl(var(--alert-border)), 0 0.3px 0.4px hsla(203,86%,12%,0.02),0 0.9px 1.5px hsla(203,86%,12%,0.045),0 3.5px 6px hsla(203,86%,12%,0.09)",
				"simple-alert-hover":
					"inset 0 1px 0 hsla(0, 0%, 100%, .15),0 0 0 1px hsl(var(--alert-border)), 0 0.3px 0.4px hsla(203,86%,12%,0.02),0 0.9px 1.5px hsla(203,86%,12%,0.045),0 3.5px 6px hsla(203,86%,12%,0.09), inset 0px 11px 10px -10px hsla(0, 0%, 100%, 0.35)",
				custom2:
					"inset 0 1px 0 hsla(0, 0%, 100%, .15),0 0 0 1px hsl(203, 13%, 12%, .075), 0 0 0 1px hsla(203,86%,12%,0.02),0 1px 3px -1px hsla(203,86%,12%,0.045)",
				"2sm": "0 1px 2px 0 hsl(var(--border))",
				"3sm": "0 2px 3px 0 hsl(var(--border))",
			},
			borderRadius: {
				lg: "var(--radius)",
				md: "calc(var(--radius) - 2px)",
				sm: "calc(var(--radius) - 4px)",
			},
			borderColor: {
				DEFAULT: "hsl(var(--border))",
				brand: "hsl(var(--brand-border))",
				input: "hsl(var(--input-border))",
				warning: "hsl(var(--warning-border))",
				success: "hsl(var(--success-border))",
				destructive: "hsl(var(--destructive-border))",
				dark: "hsl(var(--dark-border))",
			},
			ringColor: {
				DEFAULT: "hsl(var(--border))",
				brand: "hsl(var(--blue-500))",
				input: "hsl(var(--navy-400))",
				warning: "hsl(var(--yellow-500))",
				success: "hsl(var(--green-500))",
				destructive: "hsl(var(--border-destructive))",
				dark: "hsl(var(--navy-900))",
			},
			fontFamily: {
				sans: ["var(--font-sans)"],
			},
			transitionTimingFunction: {
				"in-quad": "cubic-bezier(0.55, 0.085, 0.68, 0.53)",
				"in-cubic": "cubic-bezier(0.55, 0.055, 0.675, 0.19)",
				"in-quart": "cubic-bezier(0.895, 0.03, 0.685, 0.22)",
				"in-quint": "cubic-bezier(0.755, 0.05, 0.855, 0.06)",
				"in-expo": "cubic-bezier(0.95, 0.05, 0.795, 0.035)",
				"in-circ": "cubic-bezier(0.6, 0.04, 0.98, 0.335)",

				"out-quad": "cubic-bezier(0.25, 0.46, 0.45, 0.94)",
				"out-cubic": "cubic-bezier(0.215, 0.61, 0.355, 1)",
				"out-quart": "cubic-bezier(0.165, 0.84, 0.44, 1)",
				"out-quint": "cubic-bezier(0.23, 1, 0.32, 1)",
				"out-expo": "cubic-bezier(0.19, 1, 0.22, 1)",
				"out-circ": "cubic-bezier(0.075, 0.82, 0.165, 1)",

				"in-out-quad": "cubic-bezier(0.455, 0.03, 0.515, 0.955)",
				"in-out-cubic": "cubic-bezier(0.645, 0.045, 0.355, 1)",
				"in-out-quart": "cubic-bezier(0.77, 0, 0.175, 1)",
				"in-out-quint": "cubic-bezier(0.86, 0, 0.07, 1)",
				"in-out-expo": "cubic-bezier(1, 0, 0, 1)",
				"in-out-circ": "cubic-bezier(0.785, 0.135, 0.15, 0.86)",
			},
		},
	},
	safelist: ["border-brand-border"],
	plugins: [require("tailwindcss-animate")],
} satisfies Config;

================
File: tsconfig.json
================
{
	"compilerOptions": {
		"target": "ES2017",
		"lib": ["dom", "dom.iterable", "esnext"],
		"allowJs": true,
		"skipLibCheck": true,
		"strict": true,
		"noEmit": true,
		"esModuleInterop": true,
		"module": "esnext",
		"moduleResolution": "bundler",
		"allowImportingTsExtensions": true,
		"resolveJsonModule": true,
		"isolatedModules": true,
		"jsx": "preserve",
		"incremental": true,
		"plugins": [
			{
				"name": "next"
			}
		],
		"paths": {
			"@/*": ["./*"]
		}
	},
	"include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
	"exclude": ["node_modules"]
}

================
File: vercel.json
================
{
	"version": 2,
	"buildCommand": "npm run build",
	"devCommand": "npm run dev",
	"installCommand": "npm install",
	"framework": "nextjs",
	"env": {
		"NEXT_PUBLIC_API_URL": "${NEXT_PUBLIC_API_URL}",
		"DATABASE_URL": "${DATABASE_URL}"
	}
}



================================================================
End of Codebase
================================================================
