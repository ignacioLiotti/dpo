This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.env.example
.gitignore
app/(auth-pages)/forgot-password/page.tsx
app/(auth-pages)/layout.tsx
app/(auth-pages)/sign-in/page.tsx
app/(auth-pages)/sign-up/page.tsx
app/(auth-pages)/smtp-message.tsx
app/actions.ts
app/api/items/precios/route.ts
app/api/items/route.ts
app/api/items/selected/route.ts
app/api/mediciones/route.ts
app/api/obras/route.ts
app/api/presupuestos/route.ts
app/api/upload/route.ts
app/auth/callback/route.ts
app/get-query-clients.ts
app/globals.css
app/layout.tsx
app/notes/page.tsx
app/obras/[id]/ObraPage.tsx
app/obras/[id]/page.tsx
app/obras/[id]/PresupuestosDisplay.tsx
app/obras/[id]/profile/ObraProfileClient.tsx
app/obras/[id]/profile/page.tsx
app/obras/[id]/TabsComponent.tsx
app/obras/create/page.tsx
app/obras/page.tsx
app/page.tsx
app/presupuesto/[id]/MedicionSection.tsx
app/presupuesto/[id]/page.tsx
app/presupuesto/all/page.tsx
app/presupuesto/components/GeneralSearch.tsx
app/presupuesto/components/MedicionesContent.tsx
app/presupuesto/components/PresupuestoContent.tsx
app/presupuesto/components/SearchDialog.tsx
app/presupuesto/page.tsx
app/presupuesto/types.ts
app/protected/page.tsx
app/protected/reset-password/page.tsx
app/providers.tsx
app/reactScanWrapper.tsx
app/upload/page.tsx
components.json
components/BudgetForm.tsx
components/BudgetTable.tsx
components/CertificateForm.tsx
components/CertificateTable.tsx
components/deploy-button.tsx
components/DraggableRow.tsx
components/editable-cell.tsx
components/env-var-warning.tsx
components/expandable-table.tsx
components/form-message.tsx
components/header-auth.tsx
components/hero.tsx
components/next-logo.tsx
components/presupuesto/PresupuestoSection.tsx
components/presupuesto/SearchDialog.tsx
components/sidebar/app-sidebar.tsx
components/sidebar/nav-main.tsx
components/sidebar/nav-projects.tsx
components/sidebar/nav-user.tsx
components/sidebar/team-switcher.tsx
components/submit-button.tsx
components/supabase-logo.tsx
components/Table/custom-table.tsx
components/Table/DataTableFacetedFilter.tsx
components/Table/DataTableFloatingToolbar.tsx
components/Table/DataTablePagination.tsx
components/Table/DataTableToolbar.tsx
components/testDocument/page.tsx
components/theme-switcher.tsx
components/tutorial/code-block.tsx
components/tutorial/connect-supabase-steps.tsx
components/tutorial/fetch-data-steps.tsx
components/tutorial/sign-up-user-steps.tsx
components/tutorial/tutorial-step.tsx
components/typography/inline-code.tsx
components/ui/avatar.tsx
components/ui/badge.tsx
components/ui/breadcrumb.tsx
components/ui/button.tsx
components/ui/calendar.tsx
components/ui/card.tsx
components/ui/checkbox.tsx
components/ui/collapsible.tsx
components/ui/command.tsx
components/ui/dialog.tsx
components/ui/dropdown-menu.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/popover.tsx
components/ui/radio-group.tsx
components/ui/scroll-area.tsx
components/ui/select.tsx
components/ui/separator.tsx
components/ui/sheet.tsx
components/ui/sidebar.tsx
components/ui/skeleton.tsx
components/ui/switch.tsx
components/ui/table.tsx
components/ui/tabs.tsx
components/ui/textarea.tsx
components/ui/toast.tsx
components/ui/toaster.tsx
components/ui/tooltip.tsx
components/ui/use-toast.ts
databaseSchema.txt
hooks/useItems.ts
hooks/useMediciones.ts
hooks/useObras.ts
hooks/usePrefetch.ts
hooks/usePresupuestoData.ts
hooks/usePresupuestos.ts
hooks/useQueries.ts
hooks/useQueryConfig.ts
lib/hooks/use-mobile.tsx
lib/hooks/use-toast.ts
lib/hooks/useMedicion.ts
lib/prisma.ts
lib/query-client.ts
lib/utils.ts
middleware.ts
next.config.ts
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json
utils/api-client.ts
utils/calculations.ts
utils/supabase/check-env-vars.ts
utils/supabase/client.ts
utils/supabase/middleware.ts
utils/supabase/server.ts
utils/utils.ts

================================================================
Files
================================================================

================
File: .env.example
================
# Update these with your Supabase details from your project settings > API
# https://app.supabase.com/project/_/settings/api
NEXT_PUBLIC_SUPABASE_URL=your-project-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local
.env

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: app/(auth-pages)/forgot-password/page.tsx
================
import { forgotPasswordAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Link from "next/link";
import { SmtpMessage } from "../smtp-message";

export default async function ForgotPassword(props: {
  searchParams: Promise<Message>;
}) {
  const searchParams = await props.searchParams;
  return (
    <>
      <form className="flex-1 flex flex-col w-full gap-2 text-foreground [&>input]:mb-6 min-w-64 max-w-64 mx-auto">
        <div>
          <h1 className="text-2xl font-medium">Reset Password</h1>
          <p className="text-sm text-secondary-foreground">
            Already have an account?{" "}
            <Link className="text-primary underline" href="/sign-in">
              Sign in
            </Link>
          </p>
        </div>
        <div className="flex flex-col gap-2 [&>input]:mb-3 mt-8">
          <Label htmlFor="email">Email</Label>
          <Input name="email" placeholder="you@example.com" required />
          <SubmitButton formAction={forgotPasswordAction}>
            Reset Password
          </SubmitButton>
          <FormMessage message={searchParams} />
        </div>
      </form>
      <SmtpMessage />
    </>
  );
}

================
File: app/(auth-pages)/layout.tsx
================
export default async function Layout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="max-w-7xl flex flex-col gap-12 items-start">{children}</div>
  );
}

================
File: app/(auth-pages)/sign-in/page.tsx
================
import { signInAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Link from "next/link";

export default async function Login(props: { searchParams: Promise<Message> }) {
  const searchParams = await props.searchParams;
  return (
    <form className="flex-1 flex flex-col min-w-64">
      <h1 className="text-2xl font-medium">Sign in</h1>
      <p className="text-sm text-foreground">
        Don't have an account?{" "}
        <Link className="text-foreground font-medium underline" href="/sign-up">
          Sign up
        </Link>
      </p>
      <div className="flex flex-col gap-2 [&>input]:mb-3 mt-8">
        <Label htmlFor="email">Email</Label>
        <Input name="email" placeholder="you@example.com" required />
        <div className="flex justify-between items-center">
          <Label htmlFor="password">Password</Label>
          <Link
            className="text-xs text-foreground underline"
            href="/forgot-password"
          >
            Forgot Password?
          </Link>
        </div>
        <Input
          type="password"
          name="password"
          placeholder="Your password"
          required
        />
        <SubmitButton pendingText="Signing In..." formAction={signInAction}>
          Sign in
        </SubmitButton>
        <FormMessage message={searchParams} />
      </div>
    </form>
  );
}

================
File: app/(auth-pages)/sign-up/page.tsx
================
import { signUpAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import Link from "next/link";
import { SmtpMessage } from "../smtp-message";

export default async function Signup(props: {
  searchParams: Promise<Message>;
}) {
  const searchParams = await props.searchParams;
  if ("message" in searchParams) {
    return (
      <div className="w-full flex-1 flex items-center h-screen sm:max-w-md justify-center gap-2 p-4">
        <FormMessage message={searchParams} />
      </div>
    );
  }

  return (
    <>
      <form className="flex flex-col min-w-64 max-w-64 mx-auto">
        <h1 className="text-2xl font-medium">Sign up</h1>
        <p className="text-sm text text-foreground">
          Already have an account?{" "}
          <Link className="text-primary font-medium underline" href="/sign-in">
            Sign in
          </Link>
        </p>
        <div className="flex flex-col gap-2 [&>input]:mb-3 mt-8">
          <Label htmlFor="email">Email</Label>
          <Input name="email" placeholder="you@example.com" required />
          <Label htmlFor="password">Password</Label>
          <Input
            type="password"
            name="password"
            placeholder="Your password"
            minLength={6}
            required
          />
          <SubmitButton formAction={signUpAction} pendingText="Signing up...">
            Sign up
          </SubmitButton>
          <FormMessage message={searchParams} />
        </div>
      </form>
      <SmtpMessage />
    </>
  );
}

================
File: app/(auth-pages)/smtp-message.tsx
================
import { ArrowUpRight, InfoIcon } from "lucide-react";
import Link from "next/link";

export function SmtpMessage() {
  return (
    <div className="bg-muted/50 px-5 py-3 border rounded-md flex gap-4">
      <InfoIcon size={16} className="mt-0.5" />
      <div className="flex flex-col gap-1">
        <small className="text-sm text-secondary-foreground">
          <strong> Note:</strong> Emails are rate limited. Enable Custom SMTP to
          increase the rate limit.
        </small>
        <div>
          <Link
            href="https://supabase.com/docs/guides/auth/auth-smtp"
            target="_blank"
            className="text-primary/50 hover:text-primary flex items-center text-sm gap-1"
          >
            Learn more <ArrowUpRight size={14} />
          </Link>
        </div>
      </div>
    </div>
  );
}

================
File: app/actions.ts
================
"use server";

import { encodedRedirect } from "@/utils/utils";
import { createClient } from "@/utils/supabase/server";
import { headers } from "next/headers";
import { redirect } from "next/navigation";

export const signUpAction = async (formData: FormData) => {
  const email = formData.get("email")?.toString();
  const password = formData.get("password")?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get("origin");

  if (!email || !password) {
    return encodedRedirect(
      "error",
      "/sign-up",
      "Email and password are required",
    );
  }

  const { error } = await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${origin}/auth/callback`,
    },
  });

  if (error) {
    console.error(error.code + " " + error.message);
    return encodedRedirect("error", "/sign-up", error.message);
  } else {
    return encodedRedirect(
      "success",
      "/sign-up",
      "Thanks for signing up! Please check your email for a verification link.",
    );
  }
};

export const signInAction = async (formData: FormData) => {
  const email = formData.get("email") as string;
  const password = formData.get("password") as string;
  const supabase = await createClient();

  const { error } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (error) {
    return encodedRedirect("error", "/sign-in", error.message);
  }

  return redirect("/protected");
};

export const forgotPasswordAction = async (formData: FormData) => {
  const email = formData.get("email")?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get("origin");
  const callbackUrl = formData.get("callbackUrl")?.toString();

  if (!email) {
    return encodedRedirect("error", "/forgot-password", "Email is required");
  }

  const { error } = await supabase.auth.resetPasswordForEmail(email, {
    redirectTo: `${origin}/auth/callback?redirect_to=/protected/reset-password`,
  });

  if (error) {
    console.error(error.message);
    return encodedRedirect(
      "error",
      "/forgot-password",
      "Could not reset password",
    );
  }

  if (callbackUrl) {
    return redirect(callbackUrl);
  }

  return encodedRedirect(
    "success",
    "/forgot-password",
    "Check your email for a link to reset your password.",
  );
};

export const resetPasswordAction = async (formData: FormData) => {
  const supabase = await createClient();

  const password = formData.get("password") as string;
  const confirmPassword = formData.get("confirmPassword") as string;

  if (!password || !confirmPassword) {
    encodedRedirect(
      "error",
      "/protected/reset-password",
      "Password and confirm password are required",
    );
  }

  if (password !== confirmPassword) {
    encodedRedirect(
      "error",
      "/protected/reset-password",
      "Passwords do not match",
    );
  }

  const { error } = await supabase.auth.updateUser({
    password: password,
  });

  if (error) {
    encodedRedirect(
      "error",
      "/protected/reset-password",
      "Password update failed",
    );
  }

  encodedRedirect("success", "/protected/reset-password", "Password updated");
};

export const signOutAction = async () => {
  const supabase = await createClient();
  await supabase.auth.signOut();
  return redirect("/sign-in");
};

================
File: app/api/items/precios/route.ts
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function POST(request: Request) {
	try {
		const supabase = await createClient();
		const { itemId, precio, fecha } = await request.json();

		const { data: price, error } = await supabase
			.from("precios")
			.insert([
				{
					item_id: itemId,
					precio,
					fecha: new Date(fecha).toISOString(),
				},
			])
			.select()
			.single();

		if (error) throw error;
		return NextResponse.json(price);
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json({ error: "Failed to add price" }, { status: 500 });
	}
}

export async function GET(request: Request) {
	try {
		const supabase = await createClient();
		const { searchParams } = new URL(request.url);
		const itemId = searchParams.get("itemId");

		if (!itemId) {
			return NextResponse.json(
				{ error: "itemId is required" },
				{ status: 400 }
			);
		}

		const { data: prices, error } = await supabase
			.from("precios")
			.select("*")
			.eq("item_id", itemId)
			.order("fecha", { ascending: false });

		if (error) throw error;
		return NextResponse.json(prices);
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to fetch prices" },
			{ status: 500 }
		);
	}
}

================
File: app/api/items/route.ts
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
	try {
		const { searchParams } = new URL(request.url);
		const id = searchParams.get("id");
		const page = parseInt(searchParams.get("page") || "0");
		const limit = parseInt(searchParams.get("limit") || "10");
		const search = searchParams.get("search") || "";
		const sort = searchParams.get("sort") || "";

		const supabase = await createClient();

		if (id) {
			const { data: item, error } = await supabase
				.from("items")
				.select(
					`
					*,
					precios (
						*
					)
				`
				)
				.eq("id", id)
				.order("fecha", { foreignTable: "precios", ascending: false })
				.single();

			if (error) throw error;
			return NextResponse.json(item);
		}

		// Start building the query
		let query = supabase.from("items").select(
			`
				*,
				precios (
					*
				)
			`,
			{ count: "exact" }
		); // Add count to get total

		// Add search if provided
		if (search) {
			query = query.or(
				`nombre.ilike.%${search}%,categoria.ilike.%${search}%,unidad.ilike.%${search}%`
			);
		}

		// Add sorting if provided
		if (sort) {
			const [column, order] = sort.split(":");
			if (column && order) {
				query = query.order(column, { ascending: order === "asc" });
			}
		} else {
			// Default sorting
			query = query.order("created_at", { ascending: false });
		}

		// Add pagination
		const from = page * limit;
		const to = from + limit - 1;
		query = query.range(from, to);

		// Execute the query
		const { data: items, error, count } = await query;

		if (error) throw error;

		// Process items to include only the latest price
		const processedItems = items.map((item) => ({
			...item,
			precios: item.precios.slice(0, 1), // Keep only the latest price
		}));

		return NextResponse.json({
			items: processedItems,
			total: count || 0,
			page,
			limit,
			pageCount: Math.ceil((count || 0) / limit),
			hasMore: (page + 1) * limit < (count || 0),
		});
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to fetch items" },
			{ status: 500 }
		);
	}
}

export async function POST(request: Request) {
	try {
		const supabase = await createClient();
		const data = await request.json();

		const { data: item, error } = await supabase
			.from("items")
			.insert([
				{
					codigo: data.codigo,
					nombre: data.nombre,
					unidad: data.unidad,
					categoria: data.categoria,
				},
			])
			.select(
				`
				*,
				precios (
					*
				)
			`
			)
			.single();

		if (error) throw error;
		return NextResponse.json(item);
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to create item" },
			{ status: 500 }
		);
	}
}

export async function PUT(request: Request) {
	try {
		const supabase = await createClient();
		const { id, ...data } = await request.json();

		const { data: item, error } = await supabase
			.from("items")
			.update(data)
			.eq("id", id)
			.select(
				`
				*,
				precios (
					*
				)
			`
			)
			.single();

		if (error) throw error;
		return NextResponse.json(item);
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to update item" },
			{ status: 500 }
		);
	}
}

export async function DELETE(request: Request) {
	try {
		const supabase = await createClient();
		const { searchParams } = new URL(request.url);
		const id = searchParams.get("id");

		if (!id) {
			return NextResponse.json({ error: "ID is required" }, { status: 400 });
		}

		// Supabase will automatically delete related prices due to ON DELETE CASCADE
		const { error } = await supabase.from("items").delete().eq("id", id);

		if (error) throw error;
		return NextResponse.json({ success: true });
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to delete item" },
			{ status: 500 }
		);
	}
}

================
File: app/api/items/selected/route.ts
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
	try {
		const { searchParams } = new URL(request.url);
		const selectedIds = searchParams.get("ids")?.split(",") || [];

		if (selectedIds.length === 0) {
			return NextResponse.json({ items: [] });
		}

		const supabase = await createClient();

		// Fetch items with their latest prices
		const { data: items, error } = await supabase
			.from("items")
			.select(
				`
        *,
        precios!inner (
          precio,
          fecha
        )
      `
			)
			.in("id", selectedIds);

		if (error) {
			console.error("Error fetching items:", error);
			return NextResponse.json(
				{ error: "Failed to fetch items" },
				{ status: 500 }
			);
		}

		// Process items to get the latest price for each
		const processedItems = items?.map((item) => {
			const prices = item.precios;
			// Sort prices by date and get the latest one
			const latestPrice = prices.sort(
				(a: any, b: any) =>
					new Date(b.fecha).getTime() - new Date(a.fecha).getTime()
			)[0];

			// Convert to the format expected by the presupuesto page
			return {
				id: item.id,
				name: item.nombre,
				unit: item.unidad,
				quantity: 1, // Default quantity
				unitPrice: latestPrice?.precio || 0,
				totalPrice: latestPrice?.precio || 0, // Initially same as unit price
				price: latestPrice?.precio || 0,
				category: item.categoria,
				parcial: 0,
				rubro: 0,
				accumulated: 0,
				element_tags: [{ tags: { name: item.categoria } }],
			};
		});

		// Group items by category
		const groupedItems = processedItems.reduce((acc: any, item) => {
			const category = item.category;
			if (!acc[category]) {
				acc[category] = [];
			}
			acc[category].push(item);
			return acc;
		}, {});

		return NextResponse.json({
			presupuestoData: groupedItems,
			allElements: processedItems,
			mediciones: [], // Empty mediciones array as initial state
		});
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Internal server error" },
			{ status: 500 }
		);
	}
}

================
File: app/api/mediciones/route.ts
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

interface MedicionItem {
	id: string;
	anterior: number;
	presente: number;
	acumulado: number;
}

interface MedicionSeccion {
	nombre: string;
	items: MedicionItem[];
}

interface MedicionData {
	secciones: MedicionSeccion[];
}

export async function GET(request: Request) {
	try {
		const { searchParams } = new URL(request.url);
		const obraId = searchParams.get("obraId");
		const id = searchParams.get("id");

		const supabase = await createClient();

		if (id) {
			const { data: medicion, error } = await supabase
				.from("mediciones")
				.select("*")
				.eq("id", id)
				.single();

			if (error) throw error;
			return NextResponse.json(medicion);
		}

		if (obraId) {
			const { data: mediciones, error } = await supabase
				.from("mediciones")
				.select("*")
				.eq("obra_id", obraId)
				.order("periodo", { ascending: false });

			if (error) throw error;
			return NextResponse.json(mediciones);
		}

		return NextResponse.json(
			{ error: "obraId or id is required" },
			{ status: 400 }
		);
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to fetch mediciones" },
			{ status: 500 }
		);
	}
}

export async function POST(request: Request) {
	try {
		const supabase = await createClient();
		const body = await request.json();
		console.log("body", body);
		const { obraId, presupuestoId, periodo, data } = body;

		// Validate required fields
		if (!obraId || !periodo || !data) {
			return NextResponse.json(
				{ error: "obraId, periodo, and data are required" },
				{ status: 400 }
			);
		}

		// Type check for obraId
		if (typeof obraId !== "number") {
			return NextResponse.json(
				{ error: "obraId must be a number" },
				{ status: 400 }
			);
		}

		// Validate data structure
		if (!data.secciones || !Array.isArray(data.secciones)) {
			return NextResponse.json(
				{ error: "data must contain a secciones array" },
				{ status: 400 }
			);
		}

		// Store presupuestoId in the data object if provided
		const fullData = {
			...data,
			presupuestoId, // Store presupuestoId in the JSONB data field
		};

		// Create medicion
		const { data: medicion, error: medicionError } = await supabase
			.from("mediciones")
			.insert([
				{
					obra_id: obraId,
					periodo: new Date(periodo).toISOString(),
					data: fullData,
				},
			])
			.select()
			.single();

		if (medicionError) {
			console.error("Error creating medicion:", medicionError);
			throw new Error(medicionError.message);
		}

		return NextResponse.json(medicion);
	} catch (error) {
		console.error("Error creating medicion:", error);
		return NextResponse.json(
			{
				error:
					error instanceof Error ? error.message : "Failed to create medicion",
			},
			{ status: 500 }
		);
	}
}

export async function PUT(request: Request) {
	try {
		const supabase = await createClient();
		const { id, periodo, data, presupuestoId } = await request.json();

		if (!id || !periodo || !data) {
			return NextResponse.json(
				{ error: "id, periodo, and data are required" },
				{ status: 400 }
			);
		}

		// Store presupuestoId in the data object if provided
		const fullData = {
			...data,
			presupuestoId, // Store presupuestoId in the JSONB data field
		};

		// Update medicion
		const { data: updatedMedicion, error: updateError } = await supabase
			.from("mediciones")
			.update({
				periodo: new Date(periodo).toISOString(),
				data: fullData,
			})
			.eq("id", id)
			.select()
			.single();

		if (updateError) {
			console.error("Error updating medicion:", updateError);
			throw new Error(updateError.message);
		}

		return NextResponse.json(updatedMedicion);
	} catch (error) {
		console.error("Error updating medicion:", error);
		return NextResponse.json(
			{
				error:
					error instanceof Error ? error.message : "Failed to update medicion",
			},
			{ status: 500 }
		);
	}
}

export async function DELETE(request: Request) {
	try {
		const supabase = await createClient();
		const { searchParams } = new URL(request.url);
		const id = searchParams.get("id");

		if (!id) {
			return NextResponse.json({ error: "ID is required" }, { status: 400 });
		}

		const { error } = await supabase.from("mediciones").delete().eq("id", id);

		if (error) {
			console.error("Error deleting medicion:", error);
			throw new Error(error.message);
		}

		return NextResponse.json({ success: true });
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{
				error:
					error instanceof Error ? error.message : "Failed to delete medicion",
			},
			{ status: 500 }
		);
	}
}

================
File: app/api/obras/route.ts
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
	try {
		const { searchParams } = new URL(request.url);
		const id = searchParams.get("id");

		const supabase = await createClient();

		if (id) {
			const { data: obra, error } = await supabase
				.from("obras")
				.select("*")
				.eq("id", id)
				.single();

			if (error) throw error;
			return NextResponse.json(obra);
		}

		// Get all obras
		const { data: obras, error } = await supabase
			.from("obras")
			.select("*")
			.order("created_at", { ascending: false });

		if (error) throw error;
		return NextResponse.json(obras);
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to fetch obras" },
			{ status: 500 }
		);
	}
}

export async function POST(request: Request) {
	try {
		const supabase = await createClient();
		const data = await request.json();

		const { data: obra, error } = await supabase
			.from("obras")
			.insert([
				{
					nombre: data.nombre,
					ubicacion: data.ubicacion,
					descripcion: data.descripcion,
				},
			])
			.select()
			.single();

		if (error) throw error;
		return NextResponse.json(obra);
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to create obra" },
			{ status: 500 }
		);
	}
}

export async function PUT(request: Request) {
	try {
		const supabase = await createClient();
		const { id, ...data } = await request.json();

		const { data: obra, error } = await supabase
			.from("obras")
			.update(data)
			.eq("id", id)
			.select()
			.single();

		if (error) throw error;
		return NextResponse.json(obra);
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to update obra" },
			{ status: 500 }
		);
	}
}

export async function DELETE(request: Request) {
	try {
		const supabase = await createClient();
		const { searchParams } = new URL(request.url);
		const id = searchParams.get("id");

		if (!id) {
			return NextResponse.json({ error: "ID is required" }, { status: 400 });
		}

		const { error } = await supabase.from("obras").delete().eq("id", id);

		if (error) throw error;
		return NextResponse.json({ success: true });
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to delete obra" },
			{ status: 500 }
		);
	}
}

================
File: app/api/presupuestos/route.ts
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
	try {
		const { searchParams } = new URL(request.url);
		const obraId = searchParams.get("obraId");
		const id = searchParams.get("id");

		const supabase = await createClient();

		if (id) {
			const { data: presupuesto, error } = await supabase
				.from("presupuestos")
				.select("*")
				.eq("id", id)
				.single();

			if (error) throw error;
			return NextResponse.json(presupuesto);
		}

		if (obraId) {
			const { data: presupuestos, error } = await supabase
				.from("presupuestos")
				.select("*")
				.eq("obra_id", obraId);

			if (error) throw error;
			return NextResponse.json(presupuestos);
		}

		return NextResponse.json(
			{ error: "obraId or id is required" },
			{ status: 400 }
		);
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to fetch presupuestos" },
			{ status: 500 }
		);
	}
}

export async function POST(request: Request) {
	try {
		const supabase = await createClient();
		const { obraId, nombre, total, data } = await request.json();

		// Validate required fields
		if (!obraId || !nombre || !data || typeof total !== "number") {
			return NextResponse.json(
				{ error: "obraId, nombre, total, and data are required" },
				{ status: 400 }
			);
		}

		// Validate data structure
		if (!data.secciones || !Array.isArray(data.secciones)) {
			return NextResponse.json(
				{ error: "data must contain a secciones array" },
				{ status: 400 }
			);
		}

		// Validate each section
		for (const seccion of data.secciones) {
			if (!seccion.nombre || !Array.isArray(seccion.items)) {
				return NextResponse.json(
					{ error: "Each section must have a nombre and items array" },
					{ status: 400 }
				);
			}

			// Validate each item
			for (const item of seccion.items) {
				if (
					!item.id ||
					!item.nombre ||
					typeof item.cantidad !== "number" ||
					typeof item.precioUnitario !== "number"
				) {
					return NextResponse.json(
						{
							error:
								"Each item must have id, nombre, cantidad, and precioUnitario",
						},
						{ status: 400 }
					);
				}
			}
		}

		// Create presupuesto
		const { data: presupuesto, error: presupuestoError } = await supabase
			.from("presupuestos")
			.insert([
				{
					obra_id: obraId,
					nombre,
					total,
					data,
				},
			])
			.select()
			.single();

		if (presupuestoError) throw presupuestoError;
		return NextResponse.json(presupuesto);
	} catch (error) {
		console.error("Error creating presupuesto:", error);
		return NextResponse.json(
			{ error: "Failed to create presupuesto" },
			{ status: 500 }
		);
	}
}

export async function PUT(request: Request) {
	try {
		const supabase = await createClient();
		const { id, nombre, total, data } = await request.json();

		if (!id || !nombre || !data || typeof total !== "number") {
			return NextResponse.json(
				{ error: "id, nombre, total, and data are required" },
				{ status: 400 }
			);
		}

		// Update presupuesto
		const { data: updatedPresupuesto, error: updateError } = await supabase
			.from("presupuestos")
			.update({
				nombre,
				total,
				data,
			})
			.eq("id", id)
			.select()
			.single();

		if (updateError) throw updateError;
		return NextResponse.json(updatedPresupuesto);
	} catch (error) {
		console.error("Error updating presupuesto:", error);
		return NextResponse.json(
			{ error: "Failed to update presupuesto" },
			{ status: 500 }
		);
	}
}

export async function DELETE(request: Request) {
	try {
		const supabase = await createClient();
		const { searchParams } = new URL(request.url);
		const id = searchParams.get("id");

		if (!id) {
			return NextResponse.json({ error: "ID is required" }, { status: 400 });
		}

		const { error } = await supabase.from("presupuestos").delete().eq("id", id);

		if (error) throw error;
		return NextResponse.json({ success: true });
	} catch (error) {
		console.error("Error:", error);
		return NextResponse.json(
			{ error: "Failed to delete presupuesto" },
			{ status: 500 }
		);
	}
}

================
File: app/api/upload/route.ts
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function POST(request: Request) {
	try {
		const supabase = await createClient();

		// Parse the request body
		const { items, priceDate } = await request.json();

		if (!items || !Array.isArray(items) || !priceDate) {
			return NextResponse.json(
				{ error: "Invalid data format" },
				{ status: 400 }
			);
		}

		let successCount = 0;

		// Process items in batches to handle potential duplicates
		for (const item of items) {
			try {
				// First, try to find if the item already exists
				const { data: existingItems, error: searchError } = await supabase
					.from("items")
					.select("id")
					.eq("nombre", item.nombre)
					.eq("unidad", item.unidad)
					.eq("categoria", item.categoria)
					.single();

				if (searchError && searchError.code !== "PGRST116") {
					// PGRST116 is the "no rows returned" error
					console.error("Error searching for item:", searchError);
					continue;
				}

				let itemId;

				if (existingItems) {
					// Item exists, use its ID
					itemId = existingItems.id;
				} else {
					// Item doesn't exist, insert it
					const { data: newItem, error: insertError } = await supabase
						.from("items")
						.insert({
							codigo: `${item.categoria.substring(0, 3).toUpperCase()}-${Date.now()}`, // Generate a simple code
							nombre: item.nombre,
							unidad: item.unidad,
							categoria: item.categoria,
						})
						.select()
						.single();

					if (insertError) {
						console.error("Error inserting item:", insertError);
						continue;
					}

					itemId = newItem.id;
				}

				// Insert the price for this item
				const { error: priceError } = await supabase.from("precios").insert({
					item_id: itemId,
					precio: item.precio,
					fecha: priceDate,
				});

				if (priceError) {
					console.error("Error inserting price:", priceError);
					continue;
				}

				successCount++;
			} catch (itemError) {
				console.error("Error processing item:", itemError);
				continue;
			}
		}

		return NextResponse.json(
			{ success: true, count: successCount },
			{ status: 200 }
		);
	} catch (error) {
		console.error("Error processing request:", error);
		return NextResponse.json(
			{ error: "Internal server error" },
			{ status: 500 }
		);
	}
}

================
File: app/auth/callback/route.ts
================
import { createClient } from "@/utils/supabase/server";
import { NextResponse } from "next/server";

export async function GET(request: Request) {
  // The `/auth/callback` route is required for the server-side auth flow implemented
  // by the SSR package. It exchanges an auth code for the user's session.
  // https://supabase.com/docs/guides/auth/server-side/nextjs
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get("code");
  const origin = requestUrl.origin;
  const redirectTo = requestUrl.searchParams.get("redirect_to")?.toString();

  if (code) {
    const supabase = await createClient();
    await supabase.auth.exchangeCodeForSession(code);
  }

  if (redirectTo) {
    return NextResponse.redirect(`${origin}${redirectTo}`);
  }

  // URL to redirect to after sign up process completes
  return NextResponse.redirect(`${origin}/protected`);
}

================
File: app/get-query-clients.ts
================
import {
	QueryClient,
	defaultShouldDehydrateQuery,
	isServer,
	QueryCache,
} from "@tanstack/react-query";
import { toast } from "@/components/ui/use-toast";

// Create a single instance of the query client for the browser
const browserQueryClient =
	typeof window !== "undefined"
		? new QueryClient({
				defaultOptions: {
					queries: {
						staleTime: 60 * 1000,
						retry: false,
					},
					dehydrate: {
						shouldDehydrateQuery: (query) =>
							defaultShouldDehydrateQuery(query) ||
							query.state.status === "pending",
					},
				},
				queryCache: new QueryCache({
					onSuccess: (data, query) => {
						const queryKey = JSON.stringify(query.queryKey);
						if (query.state.dataUpdateCount === 1) {
							toast({
								title: "Fresh Data Fetched",
								description: `New fetch for ${queryKey}`,
							});
						} else {
							toast({
								title: "Using Cached Data",
								description: `Retrieved from cache for ${queryKey}`,
							});
						}
					},
				}),
			})
		: null;

function makeServerQueryClient() {
	return new QueryClient({
		defaultOptions: {
			queries: {
				staleTime: 60 * 1000,
				retry: false,
			},
			dehydrate: {
				shouldDehydrateQuery: (query) =>
					defaultShouldDehydrateQuery(query) ||
					query.state.status === "pending",
			},
		},
	});
}

export function getQueryClient() {
	if (isServer) {
		console.log("Server QueryClient");
		return makeServerQueryClient();
	}

	if (!browserQueryClient) {
		throw new Error("Browser QueryClient was not initialized");
	}

	return browserQueryClient;
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
// layout.tsx
import { Geist, Geist_Mono, GeistMono } from "next/font/google";
import "./globals.css";
import { SidebarInset, SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/sidebar/app-sidebar";
import { Separator } from "@radix-ui/react-dropdown-menu";
import { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from "@/components/ui/breadcrumb";
import ReactScanWrapper from "./reactScanWrapper";
import { Toaster } from "@/components/ui/toaster";
import Providers from "./providers";
import { ReactQueryDevtoolsPanel } from '@tanstack/react-query-devtools'

const defaultUrl = process.env.VERCEL_URL
  ? `https://${process.env.VERCEL_URL}`
  : "http://localhost:3000";

export const metadata = {
  metadataBase: new URL(defaultUrl),
  title: "Next.js and Supabase Starter Kit",
  description: "The fastest way to build apps with Next.js and Supabase",
};

const geistSans = Geist({
  display: "swap",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  display: "swap",
  subsets: ["latin"],
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  const mapped = [
    {
      "title": "Obras",
      "url": "/obras",
      "iconKey": "HardHatIcon",
      "items": [
        {
          "title": "Main",
          "url": "/obras",
          "iconKey": "House"
        },
        {
          "title": "Create",
          "url": "/obras/create",
          "iconKey": "FilePlus",
          "items": [
            {
              "title": "Main",
              "url": "/obras/create",
              "iconKey": "House"
            }
          ]
        },
        {
          "title": "[id]",
          "url": "/obras/1",
          "iconKey": "Bot",
          "items": [
            {
              "title": "Main",
              "url": "/obras/1",
              "iconKey": "House"
            }
          ]
        }
      ]
    },
    {
      "title": "Presupuesto",
      "url": "/presupuesto",
      "iconKey": "Coins",
      "items": [
        {
          "title": "Main",
          "url": "/presupuesto",
          "iconKey": "House"
        },
        {
          "title": "All",
          "url": "/presupuesto/all",
          "iconKey": "Bot",
          "items": [
            {
              "title": "Main",
              "url": "/presupuesto/all",
              "iconKey": "House"
            }
          ]
        },
        {
          "title": "Components",
          "url": "/presupuesto/components",
          "iconKey": "Bot",
          "items": []
        },
        {
          "title": "[id]",
          "url": "/presupuesto/1",
          "iconKey": "Bot",
          "items": [
            {
              "title": "Main",
              "url": "/presupuesto/1",
              "iconKey": "House"
            }
          ]
        }
      ]
    },
    {
      "title": "Home",
      "url": "/",
      "iconKey": "Coins",
      "items": []
    },
  ]

  return (
    <Providers>
      <html lang="en">
        <head>
          {/* rest of your scripts go under */}
        </head>
        <body
          className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        >
          <ReactScanWrapper>
            <SidebarProvider>
              <AppSidebar mappedData={mapped as any} />
              <SidebarInset>
                <header className="flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12">
                  <div className="flex items-center gap-2 px-4">
                    <SidebarTrigger className="-ml-1" />
                    <Separator className="mr-2 h-4" />
                    <Breadcrumb>
                      <BreadcrumbList>
                        <BreadcrumbItem className="hidden md:block">
                          <BreadcrumbLink href="#">
                            Building Your Application
                          </BreadcrumbLink>
                        </BreadcrumbItem>
                        <BreadcrumbSeparator className="hidden md:block" />
                        <BreadcrumbItem>
                          <BreadcrumbPage>Data Fetching</BreadcrumbPage>
                        </BreadcrumbItem>
                      </BreadcrumbList>
                    </Breadcrumb>
                  </div>
                </header>

                {children}
                <div className="absolute bottom-0 right-0 w-full h-1/3">
                  <ReactQueryDevtoolsPanel />
                </div>
              </SidebarInset>
            </SidebarProvider>
          </ReactScanWrapper>
          <Toaster />
        </body>
      </html>
    </Providers>
  );
}

================
File: app/notes/page.tsx
================
import { createClient } from '@/utils/supabase/server'

export default async function Page() {
  const supabase = await createClient()
  const { data: notes } = await supabase.from('notes').select()

  console.log(notes)

  return <pre>{JSON.stringify(notes, null, 2)}</pre>
}

================
File: app/obras/[id]/ObraPage.tsx
================
// app/obras/[id]/ObraPage.tsx
'use client';

import { usePathname, useRouter } from 'next/navigation';
import { useEffect, useState } from 'react';
import { Button } from "@/components/ui/button";
import Link from 'next/link';
import TabsComponent from './TabsComponent';
import { motion, AnimatePresence } from 'framer-motion';
import { useRef } from 'react';
import { Spinner } from '@/components/ui/spinner';
import { cn } from '@/lib/utils';
import { ClipboardPenLineIcon, ClipboardPen, PlusIcon, Stamp, FileBadgeIcon, FileChartPieIcon } from 'lucide-react';
import { usePrefetch } from '@/hooks/usePrefetch';
import { useQuery } from '@tanstack/react-query';

interface Obra {
  id: number;
  nombre: string;
  ubicacion: string;
  empresa: string;
  fecha_inicio: string;
  fecha_fin: string;
  estado: string;
  created_at: string;
  updated_at: string;
}

interface ObraPageProps {
  id: string
}

export default function ObraPage({ id }: ObraPageProps) {
  const router = useRouter();
  const pathname = usePathname();
  const [obra, setObra] = useState<Obra | null>(null);
  const [latestPresupuestoId, setLatestPresupuestoId] = useState<number | null>(null);
  const [open, setOpen] = useState(false);
  const [formState, setFormState] = useState("idle");
  const [feedback, setFeedback] = useState("");
  const ref = useRef<HTMLDivElement>(null);
  const { prefetchMediciones, prefetchPresupuesto } = usePrefetch();

  // Fetch obra data (this should pick up the prefetched data during hydration)
  const {
    data: obraData,
    error: obraError,
    isLoading: isLoadingObra,
  } = useQuery({
    queryKey: ['obra', id],
    queryFn: async () => {
      const response = await fetch(`/api/obras?id=${id}`)
      if (!response.ok) throw new Error('Failed to fetch obra')
      return response.json()
    },
  })

  // Fetch presupuesto data once obraData is available.
  const {
    data: presupuestoData,
    isLoading: isLoadingPresupuesto,
  } = useQuery({
    queryKey: ['latestPresupuesto', id],
    queryFn: async () => {
      const response = await fetch(`/api/presupuestos?obraId=${id}&latest=true`)
      if (!response.ok) throw new Error('Failed to fetch presupuesto')
      return response.json()
    },
    enabled: !!obraData,
  })

  // When obraData is available, update local state and prefetch related data.
  useEffect(() => {
    if (obraData) {
      setObra(obraData)
      prefetchMediciones(Number(id))
      prefetchPresupuesto(Number(id))
    }
  }, [obraData, id, prefetchMediciones, prefetchPresupuesto])

  // When presupuesto data is available, update the latest presupuesto id.
  useEffect(() => {
    if (presupuestoData) {
      const latestPresupuesto = presupuestoData[presupuestoData.length - 1]
      setLatestPresupuestoId(latestPresupuesto?.id || null)
    }
  }, [presupuestoData])

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setOpen(false);
        setFormState("idle");
        setFeedback("");
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  if (isLoadingObra || isLoadingPresupuesto) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-lg">Loading...</div>
      </div>
    );
  }

  if (obraError || !obraData) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen gap-4">
        <div className="text-lg text-red-500">
          {obraError?.message || 'Obra not found'}
        </div>
        <Button onClick={() => router.push('/obras')}>
          Back to Obras
        </Button>
      </div>
    );
  }

  return (
    <div className="flex flex-col bg-muted/70 min-h-screen">
      <div className="flex-1 p-6">
        <TabsComponent obra={obra} />
      </div>

      <div className="flex justify-end items-center p-4 bg-background/95 shadow-sm">
        <div className={cn("flex gap-2 absolute bottom-20 left-[40vw] translate-x-[-50%]", open ? "bottom-60 left-[40vw] translate-x-[-200%]" : "")}>
          <motion.button
            layoutId="wrapper"
            onClick={() => {
              setOpen(true);
              setFormState("idle");
              setFeedback("");
            }}
            className="relative flex h-9 items-center rounded-lg border border-neutral-200 bg-white px-3 font-medium outline-none"
          >
            <motion.span layoutId="title">Crear</motion.span>
          </motion.button>

          <AnimatePresence>
            {open && (
              <motion.div
                ref={ref}
                layoutId="wrapper"
                transition={{ type: "spring", bounce: 0, stiffness: 1000, damping: 100 }}
                className="absolute h-48 w-[364px] overflow-hidden rounded-xl bg-neutral-50 p-1 shadow-lg outline-none ring-1 ring-black/5 flex flex-col"
              >
                <motion.span
                  aria-hidden
                  className="absolute left-4 top-2 text-sm text-neutral-500"
                  layoutId="title"
                  data-success={formState === "success"}
                  data-feedback={feedback ? "true" : "false"}
                >
                  Crear
                </motion.span>

                <div className="flex flex-col gap-2 w-full h-9">
                </div>

                {formState === "success" ? (
                  <div className="flex h-full flex-col items-center justify-center">
                    {/* Success SVG and content */}
                    <h3 className="mb-1 mt-2 text-sm font-medium text-neutral-900">Feedback received!</h3>
                    <p className="text-sm text-neutral-500">Thanks for helping us improve.</p>
                  </div>
                ) : (
                  <div
                    className="rounded-lg border border-neutral-200 bg-white h-full"
                  >
                    <div className="flex h-full items-center justify-center gap-2 ">
                      <Button variant="box" className="h-28" href={`/?obra=${obra.id}`}>
                        <FileChartPieIcon className="!size-6" />
                        Presupuesto
                      </Button>

                      <Button
                        variant="box"
                        className="h-20"
                        href={latestPresupuestoId ? `/presupuesto/${latestPresupuestoId}?tab=medicion` : '#'}
                      >
                        <ClipboardPenLineIcon className="!size-6" />
                        Medicion
                      </Button>

                      <Button variant="box" className="h-20">
                        <FileBadgeIcon className="!size-6" />
                        Certificado
                      </Button>
                    </div>
                  </div>
                )}
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
}

================
File: app/obras/[id]/page.tsx
================
import { dehydrate, HydrationBoundary, QueryClient } from '@tanstack/react-query'
import ObraPage from './ObraPage'
import { getQueryClient } from '@/app/get-query-clients'

export default async function ObraServerPage({ params }: { params: Promise<{ id: string }> }) {

  const waitParams = await params
  const queryClient = getQueryClient()

  // Prefetch the obra data on the server.
  await queryClient.prefetchQuery({
    queryKey: ['obra', waitParams.id],
    queryFn: async () => {
      // Check if data exists in cache
      const cachedData = queryClient.getQueryData(['obra', waitParams.id])
      if (!cachedData) {
        console.log('No cached data found for obra', waitParams.id)
        console.log(queryClient.getQueryCache())
      }

      // On the server, ensure your API URL is accessible (you may need an absolute URL).
      const response = await fetch(`http://localhost:3000/api/obras?id=${waitParams.id}`)
      if (!response.ok) throw new Error('Failed to fetch obra')
      return response.json()
    },
  })

  return (
    // Pass the dehydrated state so that the client-side QueryClient can be hydrated.
    <HydrationBoundary state={dehydrate(queryClient)}>
      <ObraPage id={waitParams.id} />
    </HydrationBoundary>
  )
}

================
File: app/obras/[id]/PresupuestosDisplay.tsx
================
// app/obras/[id]/PresupuestosContent.tsx
import { TabsContent } from '@/components/ui/tabs';
import { motion, AnimatePresence } from "framer-motion";
import { cn } from '@/lib/utils';
import React, { useEffect, useState } from 'react';
import { PresupuestoContent } from '@/app/presupuesto/components/PresupuestoContent';
import { TableItem } from '@/app/presupuesto/types';
import { Card } from '@/components/ui/card';
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { FilePenLine, BookIcon, BarChart } from "lucide-react";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { MedicionesContent } from '@/app/presupuesto/components/MedicionesContent';
import { PresupuestoSection } from '@/components/presupuesto/PresupuestoSection';

interface Presupuesto {
  id: number;
  obra_id: number;
  nombre: string;
  total: number;
  data: {
    secciones: {
      nombre: string;
      items: {
        id: number;
        nombre: string;
        unidad: string;
        cantidad: number;
        precioUnitario: number;
        total: number;
      }[];
    }[];
  };
  created_at: string;
  updated_at: string;
}

function PresupuestosContent({ obraId }: { obraId: string }) {
  const [selectedPresupuesto, setSelectedPresupuesto] = useState<Presupuesto | null>(null);
  const [presupuestos, setPresupuestos] = useState<Presupuesto[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'normal' | 'preview' | 'medicion'>('normal');
  const [isScrolled, setIsScrolled] = useState(false);
  const [data, setData] = useState<Record<string, TableItem[]>>({});

  // Calculate grand total and section rubros
  const { grandTotal, sectionRubros } = React.useMemo(() => {
    if (!selectedPresupuesto) return { grandTotal: 0, sectionRubros: [] };

    const total = selectedPresupuesto.total;
    const rubros = Object.entries(data).map(([_, items]) => {
      return items.reduce((sum, item) => sum + item.totalPrice, 0) * 100 / total;
    });

    return { grandTotal: total, sectionRubros: rubros };
  }, [data, selectedPresupuesto]);

  // Calculate running total (IACUM) for each section
  const sectionIacums = React.useMemo(() => {
    let runningTotal = 0;
    return Object.entries(data).map(([_, items]) => {
      runningTotal += items.reduce((sum, item) => sum + item.totalPrice, 0);
      return (runningTotal * 100) / grandTotal;
    });
  }, [data, grandTotal]);

  useEffect(() => {
    if (obraId) {
      setLoading(true);
      fetch(`/api/presupuestos?obraId=${obraId}`)
        .then((response) => {
          if (!response.ok) {
            throw new Error('Failed to fetch presupuestos');
          }
          return response.json();
        })
        .then((data) => {
          setPresupuestos(data);
          setLoading(false);
        })
        .catch((error) => {
          console.error('Error fetching presupuestos:', error);
          setError(error.message);
          setLoading(false);
        });
    }
  }, [obraId]);

  // Update scroll detection
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0);
    }

    window.addEventListener('scroll', handleScroll);
    handleScroll();

    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  useEffect(() => {
    if (selectedPresupuesto) {
      const transformedData = transformPresupuestoData(selectedPresupuesto);
      setData(transformedData);
    }
  }, [selectedPresupuesto]);

  // Transform presupuesto data to match PresupuestoContent format
  const transformPresupuestoData = (presupuesto: Presupuesto): Record<string, TableItem[]> => {
    const result: Record<string, TableItem[]> = {};

    presupuesto.data.secciones.forEach(seccion => {
      result[seccion.nombre] = seccion.items.map(item => ({
        id: item.id.toString(),
        name: item.nombre,
        unit: item.unidad,
        quantity: item.cantidad,
        unitPrice: item.precioUnitario,
        totalPrice: item.total,
        price: item.precioUnitario,
        category: seccion.nombre,
        parcial: (item.total * 100) / presupuesto.total,
        rubro: (seccion.items.reduce((acc: number, i) => acc + i.total, 0) * 100) / presupuesto.total,
        accumulated: 0,
        element_tags: [],
        originalUnit: item.unidad,
        originalQuantity: item.cantidad,
        originalUnitPrice: item.precioUnitario,
        targetSection: seccion.nombre,
        nombre: item.nombre
      }));
    });

    // Calculate accumulated values
    let runningTotal = 0;
    Object.entries(result).forEach(([seccion, items]) => {
      const sectionTotal = items.reduce((acc, item) => acc + item.totalPrice, 0);
      runningTotal += sectionTotal;
      items.forEach(item => {
        item.accumulated = (runningTotal * 100) / presupuesto.total;
      });
    });

    return result;
  };

  if (loading) {
    return (
      <TabsContent value="tab-2" className="h-full mt-16">
        <div className="flex items-center justify-center h-64">
          <p className="text-lg">Loading presupuestos...</p>
        </div>
      </TabsContent>
    );
  }

  if (error) {
    return (
      <TabsContent value="tab-2" className="h-full mt-16">
        <div className="flex flex-col items-center justify-center h-64 gap-4">
          <p className="text-lg text-red-500">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
          >
            Retry
          </button>
        </div>
      </TabsContent>
    );
  }

  return (
    <TabsContent value="tab-2" className="h-full mt-20">
      <div className="flex gap-4 h-full items-start">
        <div className="flex flex-col gap-5">
          {presupuestos.map((presupuesto) => (
            <div
              key={presupuesto.id}
              onClick={() => setSelectedPresupuesto(presupuesto)}
              className={cn(
                'flex flex-col justify-center items-start p-4 w-[15vw] max-w-[15vw] h-20 rounded-lg relative z-20 cursor-pointer'
              )}
            >
              <h2 className="font-semibold text-xl">Presupuesto {presupuesto.nombre}</h2>
              <p className="text-sm text-muted-foreground">
                {new Date(presupuesto.created_at).toLocaleDateString()}
              </p>
              <motion.span
                className={cn(
                  '-z-10 w-full h-[80px] absolute',
                  selectedPresupuesto?.id === presupuesto.id
                    ? 'shadow-[-20px_4px_6px_-1px_#0000001a]'
                    : ''
                )}
                animate={{
                  width: selectedPresupuesto?.id === presupuesto.id ? 310 : 275,
                }}
                exit={{ width: 275 }}
              />
              <motion.span
                className={cn(
                  'flex flex-col justify-center items-start p-4 w-[15vw] h-20 rounded-lg absolute left-0 -z-10 cursor-pointer transition-colors',
                  selectedPresupuesto?.id === presupuesto.id
                    ? 'bg-white'
                    : 'bg-gray-200'
                )}
                animate={{
                  width: selectedPresupuesto?.id === presupuesto.id ? 310 : 275,
                }}
                exit={{ width: 275 }}
              />
            </div>
          ))}
        </div>

        <div className="bg-white rounded-lg w-full h-full min-h-[500px] flex-1 relative shadow-md">
          {selectedPresupuesto ? (
            <div className='flex flex-col gap-2 mb-16 absolute -top-20 left-20 w-full h-full'>
              <AnimatePresence mode="wait">
                <Tabs
                  value={activeTab}
                  onValueChange={(value: string) => setActiveTab(value as 'normal' | 'preview' | 'medicion')}
                  className={cn("absolute top-0 z-10 p-3 pt-5 -mt-5 -ml-20 w-full h-full")}
                >
                  <TabsList className="flex-col bg-muted rounded-lg">
                    <TooltipProvider delayDuration={0}>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <span>
                            <TabsTrigger value="normal" className="py-3" asChild>
                              <motion.button className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
                                "hover:text-muted-foreground data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
                                "gap-1.5 group relative",
                              )}>
                                <motion.div layoutId="icon-1" className="flex-shrink-0">
                                  <FilePenLine size={16} strokeWidth={2} aria-hidden="true" />
                                </motion.div>
                              </motion.button>
                            </TabsTrigger>
                          </span>
                        </TooltipTrigger>
                        <TooltipContent side="right" className="px-2 py-1 text-xs">
                          Vista Normal
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>

                    <TooltipProvider delayDuration={0}>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <span>
                            <TabsTrigger value="preview" className="py-3" asChild>
                              <motion.button className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
                                "hover:text-muted-foreground data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
                                "gap-1.5 group relative",
                              )}>
                                <motion.div layoutId="icon-2" className="flex-shrink-0">
                                  <BookIcon size={16} strokeWidth={2} aria-hidden="true" />
                                </motion.div>
                              </motion.button>
                            </TabsTrigger>
                          </span>
                        </TooltipTrigger>
                        <TooltipContent side="right" className="px-2 py-1 text-xs">
                          Vista Previa
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>

                    <TooltipProvider delayDuration={0}>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <span>
                            <TabsTrigger value="medicion" className="py-3" asChild>
                              <motion.button className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
                                "hover:text-muted-foreground data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
                                "gap-1.5 group relative",
                              )}>
                                <motion.div layoutId="icon-3" className="flex-shrink-0">
                                  <BarChart size={16} strokeWidth={2} aria-hidden="true" />
                                </motion.div>
                              </motion.button>
                            </TabsTrigger>
                          </span>
                        </TooltipTrigger>
                        <TooltipContent side="right" className="px-2 py-1 text-xs">
                          Mediciones
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </TabsList>
                </Tabs>
              </AnimatePresence>

              {activeTab === 'medicion' ? (
                <MedicionesContent
                  initialMediciones={[]}
                  presupuestoData={Object.entries(data).reduce((acc, [section, items]) => {
                    acc[section] = items.map(item => ({
                      id: String(item.id),
                      name: item.name,
                      totalPrice: item.totalPrice
                    }))
                    return acc
                  }, {} as Record<string, { id: string; name: string; totalPrice: number }[]>)}
                  obraId={Number(selectedPresupuesto.obra_id)}
                  presupuestoId={selectedPresupuesto.id.toString()}
                />
              ) : (
                <div className="max-w-[1000px] min-w-[1000px] ml-10 p-6 bg-white rounded-xl shadow-lg relative border">
                  <div className="text-center mb-8">
                    <h1 className="text-2xl font-bold text-gray-800 mb-4">
                      Ministerio de Obras y Servicios Públicos
                    </h1>
                    <Card className="text-gray-600 flex flex-col justify-center items-start p-2 px-4">
                      <p className="mb-2">Presupuesto: <b>{selectedPresupuesto.nombre}</b></p>
                      <p>Total: <b>${selectedPresupuesto.total.toLocaleString('es-AR', { minimumFractionDigits: 2 })}</b></p>
                    </Card>
                    <h2 className="mt-4 text-lg font-bold uppercase underline">
                      Planilla de Presupuesto e Incidencias
                    </h2>
                  </div>
                  <div className="rounded-lg border-none border-gray-200 space-y-8">
                    {Object.entries(data).map(([tag, items], tagIndex) => (
                      <PresupuestoSection
                        key={tag}
                        tag={tag}
                        tagIndex={tagIndex}
                        items={items}
                        previewVersion={activeTab === 'preview' ? 'true' : 'false'}
                        grandTotal={grandTotal}
                        sectionRubros={sectionRubros}
                        sectionIacums={sectionIacums}
                        updateData={() => { }}
                        handleDeleteRow={() => { }}
                        allElements={[]}
                        addElementToSection={() => { }}
                      />
                    ))}
                  </div>
                  <div className="text-sm text-center mt-8">
                    <p>Página 1 de 1</p>
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="flex flex-col items-center justify-center h-[500px] text-muted-foreground">
              <p>Select a presupuesto to view details</p>
            </div>
          )}
        </div>
      </div>
    </TabsContent>
  );
}

export default PresupuestosContent;

================
File: app/obras/[id]/profile/ObraProfileClient.tsx
================
'use client'
import { getQueryClient } from '@/app/get-query-clients'
import { useQuery } from '@tanstack/react-query'

interface ObraProfileClientProps {
  id: string
}

export default function ObraProfileClient({ id }: ObraProfileClientProps) {
  const queryClient = getQueryClient()

  const { data } = useQuery({
    queryKey: ['obra', id],
    queryFn: async () => {
      const cachedData = queryClient.getQueryData(['obra', id])
      if (!cachedData) {
        console.log('No cached data found for obra', id)
        console.log(queryClient.getQueryCache())
      }

      const response = await fetch(`/api/obras?id=${id}`)
      if (!response.ok) throw new Error('Failed to fetch obra')
      return response.json()
    }
  }

  )

  return (
    <div>
      <h1>{data?.nombre} Profile</h1>
      {/* ... rest of your profile UI ... */}
    </div>
  )
}

================
File: app/obras/[id]/profile/page.tsx
================
import ObraProfileClient from './ObraProfileClient'

interface ObraProfilePageProps {
  params: {
    id: string
  }
}

export default async function ObraProfilePage({ params }: ObraProfilePageProps) {
  const id = await params

  return <ObraProfileClient id={id.id} />
}

================
File: app/obras/[id]/TabsComponent.tsx
================
// app/obras/[id]/TabsComponent.tsx
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { House, PanelsTopLeft, Box } from 'lucide-react';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import PresupuestosDisplay from './PresupuestosDisplay';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { usePrefetch } from '@/hooks/usePrefetch';

interface Obra {
  id: number;
  nombre: string;
  ubicacion: string;
  empresa: string;
  fecha_inicio: string;
  fecha_fin: string;
  estado: string;
  created_at: string;
  updated_at: string;
}

function TabsComponent({ obra }: { obra: Obra }) {
  const { prefetchMediciones, prefetchPresupuesto } = usePrefetch();

  return (
    <Tabs defaultValue="tab-1">
      <div className="flex justify-between items-center">
        <div className="flex flex-col gap-2">
          <h1 className="text-3xl font-semibold">{obra?.nombre}</h1>
          <p className="text-sm text-input/60 font-semibold">{obra?.ubicacion}</p>
        </div>

        <ScrollArea>
          <TabsList className="mb-3">
            <TabsTrigger value="tab-1">
              <House
                className="-ms-0.5 me-1.5 opacity-60"
                size={16}
                strokeWidth={2}
                aria-hidden="true"
              />
              Overview
            </TabsTrigger>
            <TabsTrigger
              value="tab-2"
              className="group"
              onMouseEnter={() => prefetchPresupuesto(obra?.id)}
            >
              <PanelsTopLeft
                className="-ms-0.5 me-1.5 opacity-60"
                size={16}
                strokeWidth={2}
                aria-hidden="true"
              />
              Presupuestos
              <Badge className="ms-1.5 bg-primary/15 px-1 transition-opacity group-data-[state=inactive]:opacity-50">
                {/* The length will be updated dynamically */}
              </Badge>
            </TabsTrigger>
            <TabsTrigger
              value="tab-3"
              className="group"
              onMouseEnter={() => prefetchMediciones(obra?.id)}
            >
              <Box
                className="-ms-0.5 me-1.5 opacity-60"
                size={16}
                strokeWidth={2}
                aria-hidden="true"
              />
              Mediciones
              <Badge className="ms-1.5 transition-opacity group-data-[state=inactive]:opacity-50">
                New
              </Badge>
            </TabsTrigger>
          </TabsList>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>

      <TabsContent value="tab-1" className="mt-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle>General Information</CardTitle>
              <CardDescription>Basic details about the obra</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="font-medium">ID:</label>
                <p>{obra?.id}</p>
              </div>
              <div>
                <label className="font-medium">Nombre:</label>
                <p>{obra?.nombre}</p>
              </div>
              <div>
                <label className="font-medium">Ubicación:</label>
                <p>{obra?.ubicacion}</p>
              </div>
              <div>
                <label className="font-medium">Empresa:</label>
                <p>{obra?.empresa}</p>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Status & Dates</CardTitle>
              <CardDescription>Current status and important dates</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <label className="font-medium">Estado:</label>
                <p>{obra?.estado}</p>
              </div>
              <div>
                <label className="font-medium">Fecha de Inicio:</label>
                <p>{obra?.fecha_inicio ? new Date(obra?.fecha_inicio).toLocaleDateString() : 'No establecida'}</p>
              </div>
              <div>
                <label className="font-medium">Fecha de Fin:</label>
                <p>{obra?.fecha_fin ? new Date(obra?.fecha_fin).toLocaleDateString() : 'No establecida'}</p>
              </div>
            </CardContent>
          </Card>

          <Card className="md:col-span-2">
            <CardHeader>
              <CardTitle>System Information</CardTitle>
              <CardDescription>System tracking information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="font-medium">Created At:</label>
                  <p>{new Date(obra?.created_at).toLocaleString()}</p>
                </div>
                <div>
                  <label className="font-medium">Last Updated:</label>
                  <p>{new Date(obra?.updated_at).toLocaleString()}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </TabsContent>

      <PresupuestosDisplay
        obraId={obra?.id.toString()}
      />

      <TabsContent value="tab-3">
        <p className="p-4 pt-1 text-center text-xs text-muted-foreground">Content for Mediciones</p>
      </TabsContent>
    </Tabs>
  );
}

export default TabsComponent;

================
File: app/obras/create/page.tsx
================
"use client";

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

type Field = {
  name: string;
  label: string;
  type: string; // e.g. 'text', 'number', 'date'...
};

type FieldSection = {
  sectionName: string;
  fields: Field[];
};

// Example: only a small subset of your actual fields.
const obraFieldSections: FieldSection[] = [
  {
    sectionName: "General Info",
    fields: [
      { name: "NombreObra", label: "Nombre de la Obra", type: "text" },
      { name: "Norma_Legal", label: "Norma Legal", type: "text" },
      { name: "Norma_Legal2", label: "Norma Legal 2", type: "text" },
      { name: "IdEmpresa", label: "IdEmpresa (Int)", type: "number" },
    ],
  },
  {
    sectionName: "Montos & Contratos",
    fields: [
      { name: "Monto_Contrato", label: "Monto Contrato (Float)", type: "number" },
      { name: "Plazo", label: "Plazo (Int)", type: "number" },
      { name: "Monto_Adicional_1", label: "Monto Adicional 1 (Float)", type: "number" },
      { name: "Monto_Adicional_2", label: "Monto Adicional 2 (Float)", type: "number" },
    ],
  },
  {
    sectionName: "Fechas",
    fields: [
      { name: "Fecha_de_Contrato", label: "Fecha de Contrato", type: "date" },
      { name: "Fecha_de_Inicio", label: "Fecha de Inicio", type: "date" },
      { name: "Fecha_de_Finalizaci_n", label: "Fecha de Finalización", type: "date" },
    ],
  },
  {
    sectionName: "Observaciones & Memorias",
    fields: [
      { name: "Observaciones", label: "Observaciones", type: "text" },
      { name: "Memoria_Desc", label: "Memoria Desc", type: "text" },
    ],
  },
  // ... Create as many sections as you like and add the rest of your fields
];

export default function CreateObraPage() {
  const router = useRouter();
  const [formData, setFormData] = useState<Record<string, any>>({});

  // Handle changes from any input
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Example: parse numeric or date fields if needed
    // if (formData["IdEmpresa"]) {
    //   formData["IdEmpresa"] = parseInt(formData["IdEmpresa"], 10);
    // }
    // if (formData["Monto_Contrato"]) {
    //   formData["Monto_Contrato"] = parseFloat(formData["Monto_Contrato"]);
    // }

    try {
      const res = await fetch("/api/obras", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });
      if (res.ok) {
        router.push("/db/obras");
      } else {
        console.error("Error creating obra:", await res.text());
      }
    } catch (error) {
      console.error("Error creating obra:", error);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Create New Obra</h1>

      <form onSubmit={handleSubmit}>
        {obraFieldSections.map((section) => (
          <div key={section.sectionName} className="mb-10">
            <h2 className="text-xl font-semibold mb-4">{section.sectionName}</h2>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {section.fields.map((field) => (
                <div key={field.name} className="space-y-2">
                  <Label htmlFor={field.name}>{field.label}</Label>
                  <Input
                    id={field.name}
                    name={field.name}
                    type={field.type}
                    value={formData[field.name] || ""}
                    onChange={handleChange}
                  // You can add required if needed:
                  // required
                  />
                </div>
              ))}
            </div>
          </div>
        ))}

        <div className="flex gap-4 pt-4">
          <Button type="submit">Create Obra</Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push("/db/obras")}
          >
            Cancel
          </Button>
        </div>
      </form>
    </div>
  );
}

================
File: app/obras/page.tsx
================
"use client";

import { Key, useState, useEffect } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import Link from "next/link";

interface Obra {
  id: number;
  nombre: string;
  ubicacion: string;
  empresa: string;
  fecha_inicio: string;
  fecha_fin: string;
  estado: string;
  created_at: string;
  updated_at: string;
}

export default function ObrasPage() {
  const [obras, setObras] = useState<Obra[]>([]);

  useEffect(() => {
    fetch("/api/obras")
      .then((res) => res.json())
      .then((data) => {
        setObras(data);
      });
  }, []);

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Obras</h1>
        <Link href="/obras/create">
          <Button>Create New</Button>
        </Link>
      </div>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>ID</TableHead>
            <TableHead>Nombre</TableHead>
            <TableHead>Ubicación</TableHead>
            <TableHead>Empresa</TableHead>
            <TableHead>Fecha Inicio</TableHead>
            <TableHead>Fecha Fin</TableHead>
            <TableHead>Estado</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {obras.map((obra) => (
            <TableRow key={obra.id}>
              <TableCell>{obra.id}</TableCell>
              <TableCell>{obra.nombre}</TableCell>
              <TableCell>{obra.ubicacion}</TableCell>
              <TableCell>{obra.empresa}</TableCell>
              <TableCell>{new Date(obra.fecha_inicio).toLocaleDateString()}</TableCell>
              <TableCell>{obra.fecha_fin ? new Date(obra.fecha_fin).toLocaleDateString() : '-'}</TableCell>
              <TableCell>{obra.estado}</TableCell>
              <TableCell>
                <div className="flex gap-2">
                  <Link href={`/obras/${obra.id}`}>
                    <Button variant="outline" size="sm">View</Button>
                  </Link>
                  <Link href={`/obras/${obra.id}/edit`}>
                    <Button variant="outline" size="sm">Edit</Button>
                  </Link>
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}

================
File: app/page.tsx
================
import CustomTable from "@/components/Table/custom-table"
import { Card } from "@/components/ui/card"

export default function Page() {
  return (
    <div className="flex flex-1 flex-col gap-4 p-4 bg-muted/70">
      <Card className="min-h-[100vh] flex-1 rounded-xl md:min-h-min p-0">
        <CustomTable />
      </Card>
      <div className="grid auto-rows-min gap-4 md:grid-cols-3">
        <div className="aspect-video rounded-xl bg-muted/50" />
        <div className="aspect-video rounded-xl bg-muted/50" />
        <div className="aspect-video rounded-xl bg-muted/50" />
      </div>
    </div>
  );
}

================
File: app/presupuesto/[id]/MedicionSection.tsx
================
'use client'

import React, { useEffect, useState } from 'react'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Plus } from 'lucide-react'
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from '@/components/ui/dialog'
import { Calendar } from '@/components/ui/calendar'

interface MedicionItem {
  id: number;
  nombre: string;
  unidad: string;
  anterior: number;
  presente: number;
  acumulado: number;
}

interface MedicionSection {
  nombre: string;
  items: MedicionItem[];
}

interface Medicion {
  id: number;
  obra_id: number;
  presupuesto_id: number;
  periodo: string;
  data: {
    secciones: MedicionSection[];
  };
}

interface PresupuestoItem {
  id: number | string;
  name: string;
  unit: string;
  quantity: number;
  unitPrice: number;
  totalPrice: number;
  price: number;
  category: string;
  parcial: number;
  rubro: number;
  accumulated: number;
}

interface MedicionSectionProps {
  presupuestoId: string;
  obraId: number;
  presupuestoData: Record<string, PresupuestoItem[]>;
}

export default function MedicionSection({ presupuestoId, obraId, presupuestoData }: MedicionSectionProps) {
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [mediciones, setMediciones] = useState<Medicion[]>([])
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(undefined)
  const [isNewMedicionOpen, setIsNewMedicionOpen] = useState(false)
  const [creatingMedicion, setCreatingMedicion] = useState(false)

  useEffect(() => {
    async function fetchMediciones() {
      try {
        setLoading(true)
        const response = await fetch(`/api/mediciones?presupuestoId=${presupuestoId}`)
        if (!response.ok) {
          throw new Error('Failed to fetch mediciones')
        }
        const data = await response.json()
        setMediciones(data)
      } catch (error) {
        console.error('Error fetching mediciones:', error)
        setError(error instanceof Error ? error.message : 'Error fetching mediciones')
      } finally {
        setLoading(false)
      }
    }

    if (presupuestoId) {
      fetchMediciones()
    }
  }, [presupuestoId])

  const handleCreateMedicion = async () => {
    if (!selectedDate) {
      return;
    }

    try {
      setCreatingMedicion(true)

      // Get the latest medicion to use its values as "anterior"
      const latestMedicion = mediciones[0]

      // Transform presupuesto data into medicion format
      const secciones = Object.entries(presupuestoData).map(([nombre, items]) => ({
        nombre,
        items: items.map(item => {
          // Find the item in the latest medicion if it exists
          const latestItem = latestMedicion?.data.secciones
            .find(s => s.nombre === nombre)?.items
            .find(i => i.id === item.id)

          const anterior = latestItem?.acumulado || 0
          const presente = 0
          const acumulado = anterior + presente

          return {
            id: item.id,
            nombre: item.name,
            unidad: item.unit,
            anterior,
            presente,
            acumulado
          }
        })
      }))

      const response = await fetch('/api/mediciones', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          obraId,
          presupuestoId,
          periodo: selectedDate.toISOString(),
          data: { secciones }
        }),
      })

      if (!response.ok) {
        throw new Error('Failed to create medicion')
      }

      const newMedicion = await response.json()
      setMediciones(prev => [newMedicion, ...prev])
      setIsNewMedicionOpen(false)
      setSelectedDate(undefined)
    } catch (error) {
      console.error('Error creating medicion:', error)
      setError(error instanceof Error ? error.message : 'Error creating medicion')
    } finally {
      setCreatingMedicion(false)
    }
  }

  if (loading) return <div>Cargando mediciones...</div>
  if (error) return <div className="text-red-500">{error}</div>

  return (
    <div className="space-y-8">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-semibold">Mediciones</h3>
        <Dialog open={isNewMedicionOpen} onOpenChange={setIsNewMedicionOpen}>
          <DialogTrigger asChild>
            <Button variant="outline" size="sm">
              <Plus className="w-4 h-4 mr-2" />
              Nueva Medición
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Nueva Medición</DialogTitle>
            </DialogHeader>
            <div className="py-4">
              <Calendar
                mode="single"
                selected={selectedDate}
                onSelect={setSelectedDate}
                className="rounded-md border"
              />
            </div>
            <DialogFooter>
              <Button
                onClick={handleCreateMedicion}
                disabled={!selectedDate || creatingMedicion}
              >
                {creatingMedicion ? 'Creando...' : 'Crear Medición'}
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      <div className="grid gap-4">
        {mediciones.map((medicion) => (
          <Card key={medicion.id} className="p-4">
            <div className="mb-4">
              <h4 className="font-medium">
                Periodo: {new Date(medicion.periodo).toLocaleDateString('es-AR')}
              </h4>
            </div>
            <div className="space-y-6">
              {medicion.data.secciones.map((seccion) => (
                <div key={seccion.nombre}>
                  <h5 className="font-medium mb-2">{seccion.nombre}</h5>
                  <div className="grid grid-cols-6 gap-2 text-sm font-medium text-muted-foreground mb-2">
                    <div>Item</div>
                    <div>Unidad</div>
                    <div className="text-right">Anterior</div>
                    <div className="text-right">Presente</div>
                    <div className="text-right">Acumulado</div>
                    <div className="text-right">%</div>
                  </div>
                  {seccion.items.map((item) => (
                    <div key={item.id} className="grid grid-cols-6 gap-2 text-sm">
                      <div>{item.nombre}</div>
                      <div>{item.unidad}</div>
                      <div className="text-right">{item.anterior.toFixed(2)}</div>
                      <div className="text-right">{item.presente.toFixed(2)}</div>
                      <div className="text-right">{item.acumulado.toFixed(2)}</div>
                      <div className="text-right">
                        {((item.acumulado / 100) * 100).toFixed(2)}%
                      </div>
                    </div>
                  ))}
                </div>
              ))}
            </div>
          </Card>
        ))}

        {mediciones.length === 0 && (
          <div className="text-center text-muted-foreground py-8">
            No hay mediciones registradas
          </div>
        )}
      </div>
    </div>
  )
}

================
File: app/presupuesto/[id]/page.tsx
================
'use client'

import React, { useEffect, useState } from 'react'
import { useParams, useSearchParams } from 'next/navigation'
import { FilePenLine, BookIcon, BarChart } from "lucide-react"
import { Card } from '@/components/ui/card'
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { cn } from '@/lib/utils'
import { motion, AnimatePresence } from 'framer-motion'
import { PresupuestoSection } from '@/components/presupuesto/PresupuestoSection'
import MedicionSection from './MedicionSection'
import { MedicionesContent } from '../components/MedicionesContent'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

interface Section {
  nombre: string;
  items: Array<{
    id: number;
    nombre: string;
    unidad: string;
    cantidad: number;
    precioUnitario: number;
    total: number;
  }>;
}

interface PresupuestoItem {
  id: number | string;
  name: string;
  unit: string;
  quantity: number;
  unitPrice: number;
  totalPrice: number;
  price: number;
  category: string;
  parcial: number;
  rubro: number;
  accumulated: number;
}

interface Presupuesto {
  id: number;
  obra_id: number;
  nombre: string;
  total: number;
  data: {
    secciones: Array<{
      nombre: string;
      items: Array<{
        id: number;
        nombre: string;
        unidad: string;
        cantidad: number;
        precioUnitario: number;
        total: number;
      }>;
    }>;
  };
}

type GroupedPresupuestoData = Record<string, PresupuestoItem[]>;

export default function PresupuestoPage() {
  const params = useParams()
  const searchParams = useSearchParams()
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [data, setData] = useState<GroupedPresupuestoData>({})
  const [presupuesto, setPresupuesto] = useState<Presupuesto | null>(null)
  const [activeTab, setActiveTab] = useState<'normal' | 'preview' | 'medicion'>('normal')
  const [isScrolled, setIsScrolled] = useState(false)

  // Update effect to use searchParams instead of params
  useEffect(() => {
    const tabParam = searchParams.get('tab') as 'normal' | 'preview' | 'medicion'
    if (tabParam && ['normal', 'preview', 'medicion'].includes(tabParam)) {
      setActiveTab(tabParam)
    }
  }, [searchParams])

  useEffect(() => {
    async function fetchPresupuesto() {
      console.log("fetchPresupuesto")
      try {
        setLoading(true)
        const response = await fetch(`/api/presupuestos?id=${params.id}`)
        if (!response.ok) {
          throw new Error('Failed to fetch presupuesto')
        }
        const presupuestoData = await response.json()
        setPresupuesto(presupuestoData)

        console.log("presupuestoData", presupuestoData)

        // Transform the data into the format expected by PresupuestoSection
        const transformedData: GroupedPresupuestoData = {}
        presupuestoData.data.secciones.forEach((seccion: Section) => {
          transformedData[seccion.nombre] = seccion.items.map(item => ({
            id: String(item.id),
            name: item.nombre,
            unit: item.unidad,
            quantity: item.cantidad,
            unitPrice: item.precioUnitario,
            totalPrice: item.total,
            price: item.precioUnitario,
            category: seccion.nombre,
            parcial: (item.total * 100) / presupuestoData.total,
            rubro: (seccion.items.reduce((acc: number, i) => acc + i.total, 0) * 100) / presupuestoData.total,
            accumulated: 0 // This will be calculated below
          }))
        })

        // Calculate accumulated values
        let runningTotal = 0
        Object.entries(transformedData).forEach(([seccion, items]) => {
          const sectionTotal = items.reduce((acc, item) => acc + item.totalPrice, 0)
          runningTotal += sectionTotal
          items.forEach(item => {
            item.accumulated = (runningTotal * 100) / presupuestoData.total
          })
        })

        setData(transformedData)
      } catch (error) {
        console.error('Error fetching presupuesto:', error)
        setError(error instanceof Error ? error.message : 'Error fetching presupuesto')
      } finally {
        setLoading(false)
      }
    }

    if (params.id) {
      fetchPresupuesto()
    }
  }, [params.id])

  // Update scroll detection
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0)
    }

    window.addEventListener('scroll', handleScroll)
    handleScroll()

    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

  // Calculate grand total and section rubros
  const { grandTotal, sectionRubros } = React.useMemo(() => {
    const total = presupuesto?.total || 0
    const rubros = Object.entries(data).map(([_, items]) => {
      return items.reduce((sum, item) => sum + item.totalPrice, 0) * 100 / total
    })

    return { grandTotal: total, sectionRubros: rubros }
  }, [data, presupuesto])

  // Calculate running total (IACUM) for each section
  const sectionIacums = React.useMemo(() => {
    let runningTotal = 0
    return Object.entries(data).map(([_, items]) => {
      runningTotal += items.reduce((sum, item) => sum + item.totalPrice, 0)
      return (runningTotal * 100) / grandTotal
    })
  }, [data, grandTotal])

  if (loading) return <div className="flex justify-center items-center min-h-screen">Cargando...</div>
  if (error) return <div className="flex justify-center items-center min-h-screen text-red-500">{error}</div>
  if (!presupuesto) return <div className="flex justify-center items-center min-h-screen">Presupuesto no encontrado</div>

  return (
    <div className='flex items-start justify-center gap-8 relative'>
      <div className='flex flex-col gap-2 mb-16'>
        <AnimatePresence mode="wait">
          <Tabs
            value={activeTab}
            onValueChange={(value: string) => setActiveTab(value as 'normal' | 'preview' | 'medicion')}
            className={cn("sticky top-0 z-10 p-3 pt-5 -mt-5", isScrolled ? "-ml-20" : "w-1/2")}
          >
            {!isScrolled ? (
              <TabsList>
                <motion.div
                  key="expanded"
                  className="bg-muted rounded-lg flex"
                >
                  <span className='w-full'>
                    <TabsTrigger value="normal" className="py-2 w-full justify-start" asChild>
                      <motion.button className={cn(
                        "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                        "transition-all hover:text-muted-foreground",
                        "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                        "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                        "gap-1.5 group relative",
                      )}>
                        <motion.div layoutId="icon-1" className="flex-shrink-0">
                          <FilePenLine size={16} strokeWidth={2} aria-hidden="true" />
                        </motion.div>
                        <motion.div layoutId="text-1" className="flex-shrink-0">
                          <motion.span
                            initial={{ opacity: 1 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.15 }}
                            className="ml-1.5"
                          >
                            Vista Normal
                          </motion.span>
                        </motion.div>
                      </motion.button>
                    </TabsTrigger>
                  </span>
                  <span className='w-full'>
                    <TabsTrigger value="preview" className="py-2 w-full justify-start" asChild>
                      <motion.button className={cn(
                        "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                        "transition-all hover:text-muted-foreground",
                        "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                        "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                        "gap-1.5 group relative",
                      )}>
                        <motion.div layoutId="icon-2" className="flex-shrink-0">
                          <BookIcon size={16} strokeWidth={2} aria-hidden="true" />
                        </motion.div>
                        <motion.div layoutId="text-2" className="flex-shrink-0">
                          <motion.span
                            initial={{ opacity: 1 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.15 }}
                            className="ml-1.5"
                          >
                            Vista Previa
                          </motion.span>
                        </motion.div>
                      </motion.button>
                    </TabsTrigger>
                  </span>
                  <span className='w-full'>
                    <TabsTrigger value="medicion" className="py-2 w-full justify-start" asChild>
                      <motion.button className={cn(
                        "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                        "transition-all hover:text-muted-foreground",
                        "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                        "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                        "gap-1.5 group relative",
                      )}>
                        <motion.div layoutId="icon-3" className="flex-shrink-0">
                          <BarChart size={16} strokeWidth={2} aria-hidden="true" />
                        </motion.div>
                        <motion.div layoutId="text-3" className="flex-shrink-0">
                          <motion.span
                            initial={{ opacity: 1 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.15 }}
                            className="ml-1.5"
                          >
                            Mediciones
                          </motion.span>
                        </motion.div>
                      </motion.button>
                    </TabsTrigger>
                  </span>
                </motion.div>
              </TabsList>
            ) : (
              <TabsList className="flex-col">
                <motion.div
                  key="collapsed"
                  layoutId="tabs-list"
                  transition={{
                    duration: 0.3,
                    width: { duration: 0.2, ease: "easeInOut" },
                    height: { duration: 0.2, ease: "easeInOut", delay: 0.1 }
                  }}
                  className='bg-muted rounded-lg flex flex-col'
                >
                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="normal" className="py-3" asChild>
                            <motion.button className={cn(
                              "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                              "transition-all hover:text-muted-foreground",
                              "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                              "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                              "gap-1.5 group relative",
                            )}>
                              <motion.div layoutId="icon-1" className="flex-shrink-0">
                                <FilePenLine size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Vista Normal
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>

                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="preview" className="py-3" asChild>
                            <motion.button className={cn(
                              "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                              "transition-all hover:text-muted-foreground",
                              "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                              "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                              "gap-1.5 group relative",
                            )}>
                              <motion.div layoutId="icon-2" className="flex-shrink-0">
                                <BookIcon size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Vista Previa
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>

                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="medicion" className="py-3" asChild>
                            <motion.button className={cn(
                              "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                              "transition-all hover:text-muted-foreground",
                              "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                              "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                              "gap-1.5 group relative",
                            )}>
                              <motion.div layoutId="icon-3" className="flex-shrink-0">
                                <BarChart size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Mediciones
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </motion.div>
              </TabsList>
            )}
          </Tabs>
        </AnimatePresence>

        {activeTab === 'medicion' ? (
          <MedicionesContent
            initialMediciones={[]}
            presupuestoData={Object.entries(data).reduce((acc, [section, items]) => {
              acc[section] = items.map(item => ({
                id: String(item.id),
                name: item.name,
                totalPrice: item.totalPrice
              }))
              return acc
            }, {} as Record<string, { id: string; name: string; totalPrice: number }[]>)}
            obraId={presupuesto.obra_id}
            presupuestoId={params.id as string}
          />
        ) : (
          <div className="max-w-[1000px] min-w-[1000px] p-6 bg-white rounded-xl shadow-lg relative border">
            <div className="text-center mb-8">
              <h1 className="text-2xl font-bold text-gray-800 mb-4">
                Ministerio de Obras y Servicios Públicos
              </h1>
              <Card className="text-gray-600 flex flex-col justify-center items-start p-2 px-4">
                <p className="mb-2">Presupuesto: <b>{presupuesto.nombre}</b></p>
                <p>Total: <b>${presupuesto.total.toLocaleString('es-AR', { minimumFractionDigits: 2 })}</b></p>
              </Card>
              <h2 className="mt-4 text-lg font-bold uppercase underline">
                Planilla de Presupuesto e Incidencias
              </h2>
            </div>
            <div className="rounded-lg border-none border-gray-200 space-y-8">
              {Object.entries(data).map(([tag, items], tagIndex) => (
                <PresupuestoSection
                  key={tag}
                  tag={tag}
                  tagIndex={tagIndex}
                  items={items}
                  previewVersion={activeTab === 'preview' ? 'true' : 'false'}
                  grandTotal={grandTotal}
                  sectionRubros={sectionRubros}
                  sectionIacums={sectionIacums}
                  updateData={() => { }}
                  handleDeleteRow={() => { }}
                  allElements={[]}
                  addElementToSection={() => { }}
                />
              ))}
            </div>
            <div className="text-sm text-center mt-8">
              <p>Página 1 de 1</p>
            </div>
          </div>
        )}

      </div>
    </div>
  )
}

================
File: app/presupuesto/all/page.tsx
================
'use client'
import Link from 'next/link';
import React from 'react';

// Assuming you have a function to fetch all presupuestos
const fetchPresupuestos = async () => {
  try {
    const response = await fetch('/api/presupuestos');
    if (!response.ok) {
      throw new Error('Failed to fetch presupuestos');
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching presupuestos:', error);
    return [];
  }
};

const PresupuestoList = () => {
  const [presupuestos, setPresupuestos] = React.useState([]);

  React.useEffect(() => {
    const loadPresupuestos = async () => {
      const data = await fetchPresupuestos();
      console.log(data);
      setPresupuestos(data);
    };
    loadPresupuestos();
  }, []);

  return (
    <ul>
      {presupuestos.map((presupuesto: { id: string | number }) => (
        <li key={presupuesto.id}>
          <Link href={`/presupuesto/${presupuesto.id}`}>
            presupuesto {presupuesto.id}
          </Link>
        </li>
      ))}
    </ul>
  );
};

export default PresupuestoList;

================
File: app/presupuesto/components/GeneralSearch.tsx
================
import React, { useState, useCallback, memo } from 'react';
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Command, CommandInput, CommandEmpty, CommandGroup, CommandList, CommandItem } from "@/components/ui/command";
import { Button } from "@/components/ui/button";
import { Plus, Check } from "lucide-react";
import { debounce } from 'lodash';
import { cn } from "@/lib/utils";

export const GeneralSearch = memo(({
  allElements,
  existingItems,
  onAddElement
}: {
  allElements: any[];
  existingItems: any[];
  onAddElement: (element: any, tag?: string) => void;
}) => {
  const [open, setOpen] = useState(false);
  const [searchValue, setSearchValue] = useState('');
  const [filteredElements, setFilteredElements] = useState<any[]>([]);

  const debouncedSearch = useCallback(
    debounce((searchTerm: string) => {
      if (searchTerm.length >= 4) {
        const filtered = allElements.filter(element =>
          element.name?.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !existingItems.some(existing => existing.id === element.id)
        );
        setFilteredElements(filtered);
      } else {
        setFilteredElements([]);
      }
    }, 300),
    [allElements, existingItems]
  );

  const handleSearch = (value: string) => {
    setSearchValue(value);
    debouncedSearch(value);
  };

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="secondary"
          className="fixed bottom-4 right-4 rounded-full w-12 h-12 p-0 shadow-lg"
        >
          <Plus className="w-6 h-6" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-[400px] p-0" align="end">
        {/* @ts-ignore */}
        <Command>
          {/* @ts-ignore */}
          <CommandInput
            // @ts-ignore
            placeholder="Buscar en todos los elementos..."
            value={searchValue}
            onValueChange={handleSearch}
          />
          {/* @ts-ignore */}
          <CommandEmpty>
            {searchValue.length < 4
              ? "Ingrese al menos 4 caracteres"
              : "No se encontraron elementos"}
          </CommandEmpty>
          {/* @ts-ignore */}
          <CommandGroup>
            {/* @ts-ignore */}
            <CommandList>
              {filteredElements.map((element: any) => (
                // @ts-ignore
                <CommandItem
                  key={element.id}
                  onSelect={() => {
                    onAddElement(element);
                    setOpen(false);
                    setSearchValue('');
                  }}
                >
                  <Check className={cn("mr-2 h-4 w-4", "opacity-0")} />
                  {element.name}
                </CommandItem>
              ))}
            </CommandList>
          </CommandGroup>
        </Command>
      </PopoverContent>
    </Popover>
  );
});

================
File: app/presupuesto/components/MedicionesContent.tsx
================
'use client'

import React, { useState, useEffect } from 'react'
import { Plus, Save, FolderOpen } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card } from '@/components/ui/card'
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { TableItem, GroupedData } from '../types'
import { ScrollArea } from "@/components/ui/scroll-area"
import { useMediciones, useSaveMedicion, Medicion } from '@/hooks/useMediciones'

interface PresupuestoItem {
  id: string
  name: string
  totalPrice: number
}

interface MedicionesContentProps {
  initialMediciones: Medicion[]
  presupuestoData: Record<string, PresupuestoItem[]>
  obraId: number
  presupuestoId: string
}

export function MedicionesContent({
  presupuestoData = {},
  obraId,
  presupuestoId
}: MedicionesContentProps) {
  const [selectedMedicion, setSelectedMedicion] = useState<Medicion | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [isScrolled, setIsScrolled] = useState(false)

  // Use React Query for mediciones
  const { data: mediciones = [], isLoading } = useMediciones(obraId);
  const saveMedicion = useSaveMedicion();

  // Always select the latest medicion
  useEffect(() => {
    if (mediciones.length > 0) {
      const latestMedicion = mediciones[mediciones.length - 1]
      setSelectedMedicion(latestMedicion)
    }
  }, [mediciones])

  // Calculate total budget (sum of all items' total prices)
  const totalBudget = React.useMemo(() => {
    return Object.values(presupuestoData).reduce((total: number, items: PresupuestoItem[]) => {
      return total + items.reduce((sectionTotal: number, item: PresupuestoItem) => sectionTotal + Number(item.totalPrice || 0), 0)
    }, 0)
  }, [presupuestoData])

  // Calculate advancement totals for a medicion
  const calculateAdvancementTotals = (medicion: Medicion) => {
    let currentTotal = 0
    let previousTotal = 0

    Object.entries(presupuestoData).forEach(([_, items]: [string, PresupuestoItem[]]) => {
      items.forEach(item => {
        const measurement = medicion.measurements[item.id]
        if (measurement) {
          currentTotal += Number(item.totalPrice) * (Number(measurement.monthlyProgress) / 100)
          previousTotal += Number(item.totalPrice) * (Number(measurement.cumulativePrevious) / 100)
        }
      })
    })

    const accumulatedTotal = currentTotal + previousTotal

    return {
      currentAdvancement: currentTotal,
      previousAdvancement: previousTotal,
      accumulatedAdvancement: accumulatedTotal,
      currentPercentage: (currentTotal / Number(totalBudget)) * 100,
      previousPercentage: (previousTotal / Number(totalBudget)) * 100,
      accumulatedPercentage: (accumulatedTotal / Number(totalBudget)) * 100
    }
  }

  // Update measurement data
  const updateMedicion = (
    medicionId: number,
    itemId: string,
    field: 'monthlyProgress' | 'cumulativePrevious' | 'cumulativeCurrent',
    value: number
  ) => {
    if (!selectedMedicion) return;

    const updatedMedicion = {
      ...selectedMedicion,
      measurements: {
        ...selectedMedicion.measurements,
        [itemId]: {
          ...selectedMedicion.measurements[itemId],
          [field]: value,
          ...(field === 'monthlyProgress' && {
            cumulativeCurrent: selectedMedicion.measurements[itemId].cumulativePrevious + value
          })
        }
      }
    };

    setSelectedMedicion(updatedMedicion);
  }

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    try {
      if (!selectedMedicion) {
        throw new Error('No hay mediciones para guardar')
      }

      // Transform the data into the format expected by the API
      const formattedData = {
        secciones: Object.entries(presupuestoData).map(([nombre, items]) => ({
          nombre,
          items: items.map(item => {
            const measurement = selectedMedicion.measurements[item.id]
            return {
              id: String(item.id),
              anterior: measurement?.cumulativePrevious || 0,
              presente: measurement?.monthlyProgress || 0,
              acumulado: measurement?.cumulativeCurrent || 0
            }
          })
        }))
      }

      await saveMedicion.mutateAsync({
        obraId,
        periodo: selectedMedicion.month,
        data: formattedData
      });

      alert('Medición guardada exitosamente!')
    } catch (error) {
      console.error('Error saving medicion:', error)
      setError(error instanceof Error ? error.message : 'Error al guardar la medición')
    }
  }

  // Add new medicion period
  const addMedicionPeriod = (month: string) => {
    if (!mediciones.length) return;

    const lastMedicion = mediciones[mediciones.length - 1];
    const newMedicion: Medicion = {
      id: mediciones.length + 1,
      month,
      measurements: Object.keys(presupuestoData).reduce((acc, section) => {
        (presupuestoData[section] as PresupuestoItem[]).forEach((item: PresupuestoItem) => {
          acc[item.id] = {
            monthlyProgress: 0,
            cumulativePrevious: lastMedicion.measurements[item.id]?.cumulativeCurrent || 0,
            cumulativeCurrent: 0
          }
        })
        return acc
      }, {} as Medicion['measurements'])
    }

    setSelectedMedicion(newMedicion)
  }

  // Update scroll detection
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0)
    }

    window.addEventListener('scroll', handleScroll)
    handleScroll()

    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

  const renderMedicionPeriod = (medicion: Medicion) => {
    const advancementTotals = calculateAdvancementTotals(medicion)

    return (
      <div key={medicion.id} className="border rounded-lg p-4">
        <div className="flex flex-col gap-2 mb-4">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold">
              Período: {new Date(medicion.month).toLocaleDateString('es', { month: 'long', year: 'numeric' })}
            </h3>
          </div>
          <div className="text-sm text-gray-600">
            Presupuesto Total: <span className="font-medium">${Number(totalBudget).toLocaleString('es-AR')}</span>
          </div>
        </div>

        <div className="mb-6 grid grid-cols-3 gap-4 bg-gray-50 p-4 rounded-lg">
          <div>
            <h4 className="text-sm font-medium text-gray-600">Avance del Período</h4>
            <p className="text-lg font-semibold">${advancementTotals.currentAdvancement.toLocaleString('es-AR')}</p>
            <p className="text-sm text-gray-500">{advancementTotals.currentPercentage.toFixed(2)}%</p>
          </div>
          <div>
            <h4 className="text-sm font-medium text-gray-600">Avance Anterior</h4>
            <p className="text-lg font-semibold">${advancementTotals.previousAdvancement.toLocaleString('es-AR')}</p>
            <p className="text-sm text-gray-500">{advancementTotals.previousPercentage.toFixed(2)}%</p>
          </div>
          <div>
            <h4 className="text-sm font-medium text-gray-600">Avance Acumulado</h4>
            <p className="text-lg font-semibold">${advancementTotals.accumulatedAdvancement.toLocaleString('es-AR')}</p>
            <p className="text-sm text-gray-500">{advancementTotals.accumulatedPercentage.toFixed(2)}%</p>
          </div>
        </div>

        {Object.entries(presupuestoData).map(([section, items]: [string, PresupuestoItem[]]) => (
          <div key={section} className="mt-6 bg-white rounded-lg border">
            <div className="bg-gray-50 px-4 py-2 rounded-t-lg border-b">
              <h4 className="font-medium text-gray-700">{section}</h4>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="text-sm text-gray-600 border-b">
                    <th className="text-left py-3 px-4">Item</th>
                    <th className="text-right px-4">Precio Total</th>
                    <th className="text-right px-4">Avance Mensual (%)</th>
                    <th className="text-right px-4">Acumulado Anterior (%)</th>
                    <th className="text-right px-4">Acumulado Actual (%)</th>
                    <th className="text-right px-4">Monto Actual ($)</th>
                  </tr>
                </thead>
                <tbody>
                  {items.map((item: PresupuestoItem) => {
                    const measurement = medicion.measurements[item.id]
                    const currentAmount = Number(item.totalPrice) * (Number(measurement?.monthlyProgress) || 0) / 100

                    return (
                      <tr key={item.id} className="border-b last:border-b-0 hover:bg-gray-50">
                        <td className="py-2 px-4">{item.name}</td>
                        <td className="text-right px-4">${Number(item.totalPrice).toLocaleString('es-AR')}</td>
                        <td className="text-right px-4">
                          <input
                            type="number"
                            className="w-24 text-right p-1 border rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            value={measurement?.monthlyProgress || 0}
                            onChange={(e) => updateMedicion(
                              medicion.id,
                              String(item.id),
                              'monthlyProgress',
                              Number(e.target.value)
                            )}
                            disabled={medicion.id !== mediciones[mediciones.length - 1]?.id}
                          />
                        </td>
                        <td className="text-right px-4">
                          {measurement?.cumulativePrevious || 0}%
                        </td>
                        <td className="text-right px-4">
                          {measurement?.cumulativeCurrent || 0}%
                        </td>
                        <td className="text-right px-4">
                          ${currentAmount.toLocaleString('es-AR')}
                        </td>
                      </tr>
                    )
                  })}
                </tbody>
              </table>
            </div>
          </div>
        ))}
      </div>
    )
  }

  return (
    <div className='flex items-start justify-center gap-8 relative'>
      <div className='flex flex-col gap-2 mb-16'>
        <form className="max-w-[1000px] min-w-[1000px] p-6 bg-white rounded-xl shadow-lg relative border">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-2xl font-bold text-gray-800 mb-4">
              Ministerio de Obras y Servicios Públicos
            </h1>
            <Card className="text-gray-600 flex flex-col justify-center items-start p-2 px-4">
              <p className="mb-2">{`Obra: `}
                <b>
                  COMISARIA LAGUNA BRAVA - Obra Nueva 1226
                </b>
              </p>
              <p>{`Ubicacion: `}
                <b>
                  CORRIENTES CAPITAL
                </b>
              </p>
            </Card>

            <h2 className="mt-4 text-lg font-bold uppercase underline">
              Planilla de Mediciones
            </h2>
          </div>

          {isLoading && <p className="text-center text-gray-600">Cargando...</p>}
          {error && <p className="text-center text-red-600">{error}</p>}

          {/* The main content */}
          {!isLoading && !error && selectedMedicion && (
            <div className="rounded-lg border-none border-gray-200 space-y-8">
              {renderMedicionPeriod(selectedMedicion)}
            </div>
          )}

          {/* Footer */}
          <div className="text-sm text-center mt-2">
            <p>Página 1 de 1</p>
          </div>
        </form>
      </div>

      <div className='flex flex-col justify-between gap-8 mt-16 sticky top-5 z-10'>
        <div className='flex flex-col gap-2'>
          <Dialog>
            <DialogTrigger asChild>
              <Button
                type="button"
                variant="secondary"
                className="h-9 w-full justify-start px-3"
              >
                <FolderOpen className="w-4 h-4 mr-2" />
                Seleccionar Medición
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Seleccionar Medición</DialogTitle>
              </DialogHeader>
              <ScrollArea className="h-[300px] pr-4">
                <div className="flex flex-col gap-2">
                  {mediciones.map((medicion) => (
                    <Button
                      key={medicion.id}
                      variant={selectedMedicion?.id === medicion.id ? "default" : "outline"}
                      className="w-full justify-start"
                      onClick={() => {
                        setSelectedMedicion(medicion)
                      }}
                    >
                      {new Date(medicion.month).toLocaleDateString('es', { month: 'long', year: 'numeric' })}
                    </Button>
                  ))}
                </div>
              </ScrollArea>
            </DialogContent>
          </Dialog>

          <Dialog>
            <DialogTrigger asChild>
              <Button
                type="button"
                variant="secondary"
                className="h-9 w-full justify-start px-3"
              >
                <Plus className="w-4 h-4 mr-2" />
                Agregar Período
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Agregar Nuevo Período</DialogTitle>
              </DialogHeader>
              <form onSubmit={(e) => {
                e.preventDefault()
                const monthInput = (e.target as HTMLFormElement).month as HTMLInputElement
                if (monthInput.value) {
                  addMedicionPeriod(monthInput.value)
                  monthInput.value = ''
                }
              }} className="space-y-4">
                <Input
                  type="month"
                  name="month"
                  placeholder="Seleccione el mes"
                  required
                />
                <Button type="submit" className="w-full">
                  Agregar Período
                </Button>
              </form>
            </DialogContent>
          </Dialog>
        </div>

        <Button
          type="submit"
          variant="default"
          className="h-9 w-full justify-start px-3"
          onClick={handleSubmit}
        >
          <Save className="w-4 h-4 mr-2" />
          Guardar Mediciones
        </Button>
      </div>
    </div>
  )
}

================
File: app/presupuesto/components/PresupuestoContent.tsx
================
'use client'

import React, { useState, useEffect } from 'react'
import { Plus, FolderPlus, Save, FilePenLine, BookLock, BookIcon, BookLockIcon, FolderOpen } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card } from '@/components/ui/card'
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { PresupuestoSection } from '@/components/presupuesto/PresupuestoSection'
import { SearchDialog } from '@/components/presupuesto/SearchDialog'
import { motion, AnimatePresence } from 'framer-motion'
import { cn } from '@/lib/utils'
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { TableItem, GroupedData } from '../types'
import { useSearchParams } from 'next/navigation'

interface PresupuestoContentProps {
  presupuestoData: Record<string, TableItem[]>;
  allElements: TableItem[];
}

export function PresupuestoContent({
  presupuestoData = {},
  allElements = []
}: PresupuestoContentProps) {
  const searchParams = useSearchParams()
  const idsParam = searchParams.get('selectedIds') ?? ''
  const ids = React.useMemo(() => idsParam.split(',').filter(Boolean), [idsParam])

  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [data, setData] = useState<Record<string, TableItem[]>>(presupuestoData)
  const [newSections, setNewSections] = useState<Set<string>>(new Set())
  const [storedElements, setStoredElements] = useState<TableItem[]>(allElements)
  const [previewVersion, setPreviewVersion] = useState<string | boolean>('false')
  const [isGlobalSearchOpen, setIsGlobalSearchOpen] = useState(false)
  const [newSectionName, setNewSectionName] = useState('')
  const [isAddSectionOpen, setIsAddSectionOpen] = useState(false)
  const [isScrolled, setIsScrolled] = useState(false)

  // Handle global element selection
  const handleGlobalElementSelect = (elements: TableItem[]) => {
    elements.forEach(element => {
      if (!element.targetSection) {
        setError('Por favor seleccione una sección para todos los elementos')
        return
      }
      addElementToSection(element.targetSection, element)
    })
    setIsGlobalSearchOpen(false)
  }

  // Handle adding new section
  const handleAddSection = (e: React.FormEvent) => {
    e.preventDefault()
    if (newSectionName.trim()) {
      addNewSection(newSectionName.trim())
      setNewSectionName('')
      setIsAddSectionOpen(false)
    }
  }

  // -----------------------------
  //   Update Data in state
  // -----------------------------
  const updateData = (
    tag: string,
    itemId: string | number,
    key: keyof TableItem,
    newValue: string
  ) => {
    setData(prev => {
      const newData = { ...prev }
      const arr = newData[tag] || []
      const itemIndex = arr.findIndex(it => String(it.id) === String(itemId))
      if (itemIndex > -1) {
        const oldItem = arr[itemIndex]
        newData[tag] = [
          ...arr.slice(0, itemIndex),
          { ...oldItem, [key]: newValue },
          ...arr.slice(itemIndex + 1),
        ]
      }
      return newData
    })
  }

  // Add element to a section
  const addElementToSection = (tag: string, element: any) => {
    setData(prev => {
      const newData = { ...prev }
      if (!newData[tag]) {
        newData[tag] = []
      }
      newData[tag] = [
        ...newData[tag],
        {
          id: element.id,
          name: element.nombre || element.name || 'Sin descripción',
          unit: element.unidad || element.unit || '',
          quantity: element.cantidad || 0,
          unitPrice: element.precio || element.price || 0,
          totalPrice: (element.cantidad || 0) * (element.precio || 0),
          price: element.precio || element.price || 0,
          category: element.category || 'Sin categoría',
          parcial: 0,
          rubro: 0,
          accumulated: 0,
        },
      ]
      return newData
    })
  }

  // -----------------------------
  //   Delete row from a tag
  // -----------------------------
  const handleDeleteRow = (tag: string, itemId: string | number) => {
    setData(prev => {
      const newData = { ...prev }
      newData[tag] = newData[tag]?.filter(item => String(item.id) !== String(itemId)) || []
      return newData
    })
  }

  // -----------------------------
  //   Handle Form Submit
  // -----------------------------
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // First, check if we have a valid obra
      const obraResponse = await fetch('/api/obras');
      if (!obraResponse.ok) {
        throw new Error('Error al obtener la obra');
      }
      const obras = await obraResponse.json();

      // Get the first obra or throw an error
      if (!obras || obras.length === 0) {
        throw new Error('No hay obras disponibles. Por favor, cree una obra primero.');
      }
      const obra = obras[0]; // Use the first obra for now

      // Calculate total amount from all sections
      const total = Object.entries(data).reduce((acc, [_, items]) => {
        if (!Array.isArray(items)) return acc;
        return acc + (items as TableItem[]).reduce((sectionTotal, item) =>
          sectionTotal + ((item.quantity || 0) * (item.unitPrice || 0)), 0
        );
      }, 0);

      // Transform the data into the expected format for JSONB
      const formattedData = {
        secciones: Object.entries(data).map(([nombre, items]) => ({
          nombre,
          items: (items as TableItem[]).map(item => ({
            id: item.id,
            nombre: item.name,
            unidad: item.unit,
            cantidad: parseFloat(item.quantity?.toString() || "0"),
            precioUnitario: parseFloat(item.unitPrice?.toString() || "0"),
            total: (item.quantity || 0) * (item.unitPrice || 0)
          }))
        }))
      };

      const requestData = {
        obraId: obra.id,
        nombre: "Presupuesto " + new Date().toLocaleDateString(),
        total: Number(total.toFixed(2)),
        data: formattedData
      };

      console.log('Saving presupuesto:', requestData);

      const response = await fetch('/api/presupuestos', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Error al guardar los datos.');
      }

      const result = await response.json();
      console.log('Save successful:', result);
      alert('Presupuesto guardado exitosamente!');
    } catch (error) {
      console.error('Error saving data:', error);
      setError(error instanceof Error ? error.message : 'Error al guardar los datos.');
      alert(error instanceof Error ? error.message : 'Error al guardar los datos.');
    } finally {
      setLoading(false);
    }
  };

  const addNewSection = (sectionName: string) => {
    // Create new section
    const newData = { ...data }
    newData[sectionName] = []

    // Sort sections alphabetically
    const sortedData = Object.fromEntries(
      Object.entries(newData).sort(([a], [b]) => a.localeCompare(b))
    )

    setData(sortedData)
    setNewSections(prev => new Set(prev).add(sectionName))

    // Scroll to new section after a brief delay to ensure render
    setTimeout(() => {
      const sectionElement = document.getElementById(`section-${sectionName}`)
      if (sectionElement) {
        sectionElement.scrollIntoView({ behavior: 'smooth', block: 'start' })
      } else {
        console.error(`Section with id section-${sectionName} not found`)
      }
    }, 100)
  }

  // Calculate grand total and section rubros together for better accuracy
  const { grandTotal, sectionRubros } = React.useMemo(() => {
    const total = Object.entries(data).reduce((total, [_, items]) => {
      if (!Array.isArray(items)) return total;
      return total + (items as TableItem[]).reduce((sectionTotal, item) =>
        sectionTotal + ((item.quantity || 0) * (item.unitPrice || 0)), 0
      );
    }, 0);

    const rubros = Object.entries(data).map(([_, items]) => {
      if (!Array.isArray(items)) return 0;

      const sectionTotal = (items as TableItem[]).reduce((sum, item) => {
        const itemTotal = (item.quantity || 0) * (item.unitPrice || 0);
        return sum + (itemTotal || 0);
      }, 0);

      return total > 0 ? (sectionTotal * 100 / total) : 0;
    });

    return { grandTotal: total, sectionRubros: rubros };
  }, [data]);

  // Calculate running total (IACUM) for each section
  const sectionIacums = React.useMemo(() => {
    let runningTotal = 0;
    return sectionRubros.map(rubro => {
      runningTotal += (rubro || 0); // Ensure we handle null/undefined values
      return Number(runningTotal.toFixed(2)); // Round to 2 decimal places
    });
  }, [sectionRubros]);

  // Update the scroll detection useEffect
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0);
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Check initial scroll position

    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  console.log('data', data)

  // -----------------------------
  //   Render
  // -----------------------------
  return (
    <div className='flex items-start justify-center gap-8 relative'>
      <div className='flex flex-col gap-2 mb-16'>
        <AnimatePresence mode="wait">
          <Tabs defaultValue="tab-1" className={cn("sticky top-0 z-10 p-3 pt-5 -mt-5", isScrolled ? "-ml-20" : "w-1/2")}>
            {!isScrolled ? (
              <TabsList>
                <motion.div
                  key="expanded"
                  className="bg-muted rounded-lg flex"
                >
                  <span className='w-full'>
                    <TabsTrigger value="tab-1" className="py-2 w-full justify-start" asChild onClick={() => setPreviewVersion('false')}>
                      <motion.button
                        className={cn(
                          "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                          "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                          "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                          "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                          // custom
                          "gap-1.5 group relative",
                        )}>
                        <motion.div layoutId="icon-1" className="flex-shrink-0">
                          <FilePenLine size={16} strokeWidth={2} aria-hidden="true" />
                        </motion.div>
                        <motion.div layoutId="text-1" className="flex-shrink-0">
                          <motion.span
                            initial={{ opacity: 1 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.15 }}
                            className="ml-1.5"
                          >
                            Modo Editable
                          </motion.span>
                        </motion.div>
                      </motion.button>
                    </TabsTrigger>
                  </span>
                  <span className='w-full'>
                    <TabsTrigger value="tab-2" className="py-2 w-full justify-start" asChild onClick={() => setPreviewVersion('true')}>
                      <motion.button
                        className={cn(
                          "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                          "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                          "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                          "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                          // custom
                          "gap-1.5 group relative",
                        )}>
                        <motion.div layoutId="icon-2" className="flex-shrink-0">
                          <BookIcon size={16} strokeWidth={2} aria-hidden="true" />
                        </motion.div>
                        <motion.div layoutId="text-2" className="flex-shrink-0">
                          <motion.span
                            initial={{ opacity: 1 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.15 }}
                            className="ml-1.5"
                          >
                            Vista Previa (Total)
                          </motion.span>
                        </motion.div>
                      </motion.button>
                    </TabsTrigger>
                  </span>
                  <span className='w-full'>
                    <TabsTrigger value="tab-3" className="py-2 w-full justify-start" asChild onClick={() => setPreviewVersion('parcial')}>
                      <motion.button
                        className={cn(
                          "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                          "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                          "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                          "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                          // custom
                          "gap-1.5 group relative",
                        )}>
                        <motion.div layoutId="icon-3" className="flex-shrink-0">
                          <BookLockIcon size={16} strokeWidth={2} aria-hidden="true" />
                        </motion.div>
                        <motion.div layoutId="text-3" className="flex-shrink-0">
                          <motion.span
                            initial={{ opacity: 1 }}
                            animate={{ opacity: 1 }}
                            exit={{ opacity: 0 }}
                            transition={{ duration: 0.15 }}
                            className="ml-1.5"
                          >
                            Vista Previa (Parcial)
                          </motion.span>
                        </motion.div>
                      </motion.button>
                    </TabsTrigger>
                  </span>
                  <span className='w-full'>

                  </span>
                </motion.div>
              </TabsList>
            ) : (
              <TabsList className="flex-col">
                <motion.div
                  key="collapsed"
                  layoutId="tabs-list"
                  transition={{
                    duration: 0.3,
                    width: { duration: 0.2, ease: "easeInOut" },
                    height: { duration: 0.2, ease: "easeInOut", delay: 0.1 }
                  }}
                  className='bg-muted rounded-lg flex flex-col'
                >
                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="tab-1" className="py-3" asChild onClick={() => setPreviewVersion('false')}>
                            <motion.button
                              className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                                "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                                "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                                "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                                // custom
                                "gap-1.5 group relative",
                              )}>
                              <motion.div layoutId="icon-1" className="flex-shrink-0">
                                <FilePenLine size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                              <motion.div layoutId="text-1" className="flex-shrink-0 -mr-1.5">
                                <motion.span
                                  initial={{ opacity: 0, width: 0 }}
                                  animate={{ opacity: 0, width: 0 }}
                                  transition={{ duration: 0.15 }}
                                  className="hidden"
                                />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Modo Editable
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="tab-2" className="py-3" asChild onClick={() => setPreviewVersion('true')}>
                            <motion.button
                              className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                                "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                                "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                                "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                                // custom
                                "gap-1.5 group relative",
                              )}>
                              <motion.div layoutId="icon-2" className="flex-shrink-0">
                                <BookIcon size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                              <motion.div layoutId="text-2" className="flex-shrink-0 -mr-1.5">
                                <motion.span
                                  initial={{ opacity: 0, width: 0 }}
                                  animate={{ opacity: 0, width: 0 }}
                                  transition={{ duration: 0.15 }}
                                  className="hidden"
                                />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Vista Previa (Total)
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="tab-3" className="py-3" asChild onClick={() => setPreviewVersion('parcial')}>
                            <motion.button
                              className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                                "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                                "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                                "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                                // custom
                                "gap-1.5 group relative",
                              )}>
                              <motion.div layoutId="icon-3" className="flex-shrink-0">
                                <BookLockIcon size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                              <motion.div layoutId="text-3" className="flex-shrink-0 -mr-1.5">
                                <motion.span
                                  initial={{ opacity: 0, width: 0 }}
                                  transition={{ duration: 0.15 }}
                                  animate={{ opacity: 0, width: 0 }}
                                  className="hidden"
                                />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Vista Previa (Parcial)
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider delayDuration={0}>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <span>
                          <TabsTrigger value="tab-4" className="py-3" asChild onClick={() => setPreviewVersion('medicion')}>
                            <motion.button
                              className={cn(
                                "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
                                "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
                                "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                                "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                                // custom
                                "gap-1.5 group relative",
                              )}>
                              <motion.div layoutId="icon-4" className="flex-shrink-0">
                                <FilePenLine size={16} strokeWidth={2} aria-hidden="true" />
                              </motion.div>
                              <motion.div layoutId="text-4" className="flex-shrink-0 -mr-1.5">
                                <motion.span
                                  initial={{ opacity: 0, width: 0 }}
                                  transition={{ duration: 0.15 }}
                                  animate={{ opacity: 0, width: 0 }}
                                  className="hidden"
                                />
                              </motion.div>
                            </motion.button>
                          </TabsTrigger>
                        </span>
                      </TooltipTrigger>
                      <TooltipContent side="right" className="px-2 py-1 text-xs">
                        Medición
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </motion.div>
              </TabsList>
            )}
          </Tabs>
        </AnimatePresence>

        {/* Global Search Dialog */}
        <SearchDialog
          isOpen={isGlobalSearchOpen}
          onOpenChange={setIsGlobalSearchOpen}
          onElementSelect={handleGlobalElementSelect}
          sections={Object.keys(data)}
          elements={storedElements}
        />

        <form className="max-w-[1000px] min-w-[1000px] p-6 bg-white rounded-xl shadow-lg relative border">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-2xl font-bold text-gray-800 mb-4">
              Ministerio de Obras y Servicios Públicos
            </h1>
            <Card className="text-gray-600 flex flex-col justify-center items-start p-2 px-4">
              <p className="mb-2">{`Obra: `}
                <b>
                  COMISARIA LAGUNA BRAVA - Obra Nueva 1226
                </b>
              </p>
              <p>{`Ubicacion: `}
                <b>
                  CORRIENTES CAPITAL
                </b>
              </p>
            </Card>

            <h2 className="mt-4 text-lg font-bold uppercase underline">
              Planilla de Presupuesto e Incidencias
            </h2>
          </div>

          {loading && <p className="text-center text-gray-600">Cargando...</p>}
          {error && <p className="text-center text-red-600">{error}</p>}

          {/* The main table */}
          {!loading && !error && (
            <div className="rounded-lg border-none border-gray-200 space-y-8">
              {Object.entries(data).map(([tag, items], tagIndex) => (
                <PresupuestoSection
                  key={tag}
                  tag={tag}
                  tagIndex={tagIndex}
                  items={items}
                  previewVersion={previewVersion}
                  grandTotal={grandTotal}
                  sectionRubros={sectionRubros}
                  sectionIacums={sectionIacums}
                  addElementToSection={addElementToSection}
                  updateData={updateData}
                  handleDeleteRow={handleDeleteRow}
                  isNewSection={newSections.has(tag)}
                  allElements={storedElements}
                />
              ))}
            </div>
          )}

          {/* Footer */}
          <div className="text-sm text-center mt-2">
            <p>Página 1 de 1</p>
          </div>
        </form>
      </div>

      <div className='flex flex-col justify-between gap-8 mt-16 sticky top-5 z-10'>
        <div className='flex flex-col gap-2'>

          <Dialog>
            <DialogTrigger asChild>
              <Button
                type="button"
                variant="secondary"
                className="h-9 w-full justify-start px-3"
              >
                <FolderOpen className="w-4 h-4" />
                Seleccionar Obra
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Seleccionar Obra</DialogTitle>
              </DialogHeader>

              <DialogFooter>
                <Button type="button">
                  Confirmar
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
          <Button
            type="button"
            variant="secondary"
            className="h-9 w-full justify-start px-3"
            onClick={() => setIsGlobalSearchOpen(true)}
          >
            <Plus className="w-4 h-4" />
            Agregar Elemento
          </Button>
          <Dialog open={isAddSectionOpen} onOpenChange={setIsAddSectionOpen}>
            <DialogTrigger asChild>
              <Button
                type="button"
                variant="secondary"
                className="h-9 w-full justify-start px-3"
              >
                <FolderPlus className="w-4 h-4" />
                Agregar Sección
              </Button>
            </DialogTrigger>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>Agregar Nueva Sección</DialogTitle>
              </DialogHeader>
              <form onSubmit={handleAddSection} className="space-y-4">
                <Input
                  placeholder="Nombre de la sección"
                  value={newSectionName}
                  onChange={(e) => setNewSectionName(e.target.value)}
                  autoFocus
                />
                <Button type="submit" className="w-full">
                  Agregar Sección
                </Button>
              </form>
            </DialogContent>
          </Dialog>
        </div>

        <Button
          type="submit"
          variant="default"
          className="h-9 w-full justify-start px-3"
          onClick={handleSubmit}
        >
          <Save className="w-4 h-4" />
          Guardar Presupuesto
        </Button>
      </div>
    </div>
  )
}

================
File: app/presupuesto/components/SearchDialog.tsx
================
'use client'

import React from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { TableItem } from '../types'

interface SearchDialogProps {
  isOpen: boolean
  onOpenChange: (open: boolean) => void
  onElementSelect: (elements: TableItem[]) => void
  sections: string[]
  elements: TableItem[]
}

export function SearchDialog({
  isOpen,
  onOpenChange,
  onElementSelect,
  sections,
  elements
}: SearchDialogProps) {
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Buscar Elementos</DialogTitle>
        </DialogHeader>
        {/* Add your search implementation here */}
      </DialogContent>
    </Dialog>
  )
}

================
File: app/presupuesto/page.tsx
================
'use client'

import React, { useEffect, useState, useCallback, Suspense, memo } from 'react'
import { useSearchParams } from 'next/navigation'
import { Plus, House, PanelsTopLeft, Box, FolderPlus, Save, FilePenLine, BookLock, BookIcon, BookLockIcon, FolderOpen, Calculator } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Card } from '@/components/ui/card'
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { PresupuestoSection } from '@/components/presupuesto/PresupuestoSection'
import { debounce } from 'lodash'
import { motion, AnimatePresence } from 'framer-motion'
import { cn } from '@/lib/utils'
import { useSelectedItems } from '@/hooks/useQueries'
import { useObras } from '@/hooks/useObras'
import { usePresupuestos } from '@/hooks/usePresupuestos'
import { usePresupuestoData } from '@/hooks/usePresupuestoData'
import { MedicionesContent } from './components/MedicionesContent'
import { PresupuestoContent } from './components/PresupuestoContent'
import { Skeleton } from '@/components/ui/skeleton'

interface AddSectionDialogProps {
  onAdd: (sectionName: string) => void;
}

function AddSectionDialog({ onAdd }: AddSectionDialogProps) {
  const [open, setOpen] = useState(false)
  const [sectionName, setSectionName] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (sectionName.trim()) {
      onAdd(sectionName.trim())
      setSectionName('')
      setOpen(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button
          type="button"
          variant="outline"
          size="icon"
          className="h-8 w-full"
        >
          <Plus className="w-4 h-4" />
          Agregar Sección
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Agregar Nueva Sección</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <Input
            placeholder="Nombre de la sección"
            value={sectionName}
            onChange={(e) => setSectionName(e.target.value)}
            autoFocus
          />
          <Button type="submit" className="w-full">
            Agregar Sección
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  )
}

export default function PresupuestoPage() {
  const searchParams = useSearchParams();
  const [isScrolled, setIsScrolled] = useState(false)
  const [activeView, setActiveView] = useState<'presupuesto' | 'mediciones'>('presupuesto')

  // Get the first obra
  const { data: obras, isLoading: isLoadingObras } = useObras();
  const obraId = obras?.[0]?.id;

  // Get presupuestos for the obra
  const { data: presupuestos, isLoading: isLoadingPresupuestos } = usePresupuestos(obraId ?? 0);
  const presupuestoId = presupuestos?.[0]?.id;

  // Get detailed presupuesto data
  const { presupuesto, items, isLoading: isLoadingPresupuesto } =
    usePresupuestoData(presupuestoId?.toString());

  // Get selected items data
  const selectedIds = searchParams.get('selectedIds')?.split(',') || [];
  const { data: selectedItemsData, isLoading: isLoadingSelected } = useSelectedItems(selectedIds);

  const isLoading = isLoadingObras || isLoadingPresupuestos || isLoadingPresupuesto || isLoadingSelected;

  // Add scroll detection
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0)
    }

    window.addEventListener('scroll', handleScroll)
    handleScroll() // Check initial scroll position

    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

  if (isLoading) {
    return (
      <div className="container mx-auto p-4 space-y-4">
        <Skeleton className="h-10 w-full" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Skeleton className="h-[200px]" />
          <Skeleton className="h-[200px]" />
        </div>
      </div>
    );
  }

  if (!obras?.length) {
    return (
      <div className="container mx-auto p-4">
        <p>No obra available. Please create an obra first.</p>
      </div>
    );
  }

  if (!selectedItemsData && selectedIds.length > 0) {
    return (
      <div className="container mx-auto p-4">
        <p>No data available for the selected items.</p>
      </div>
    );
  }

  const pageData = selectedItemsData || {
    presupuestoData: {},
    allElements: [],
    mediciones: []
  };

  return (
    <div className="container mx-auto p-4">
      <Tabs
        defaultValue="presupuesto"
        className={cn("sticky top-0 z-10 p-3 pt-5 -mt-5", isScrolled ? "-ml-20" : "w-1/2")}
        onValueChange={(value: any) => setActiveView(value as 'presupuesto' | 'mediciones')}
      >
        {!isScrolled ? (
          <TabsList>
            <motion.div
              key="expanded"
              className="bg-muted rounded-lg flex"
            >
              <span className='w-full'>
                <TabsTrigger value="presupuesto" className="py-2 w-full justify-start" asChild>
                  <motion.button className={cn(
                    "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                    "transition-all hover:text-muted-foreground",
                    "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                    "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                    "gap-1.5 group relative",
                  )}>
                    <motion.div layoutId="icon-1" className="flex-shrink-0">
                      <Calculator size={16} strokeWidth={2} aria-hidden="true" />
                    </motion.div>
                    <motion.div layoutId="text-1" className="flex-shrink-0">
                      Presupuesto
                    </motion.div>
                  </motion.button>
                </TabsTrigger>
              </span>
              <span className='w-full'>
                <TabsTrigger value="mediciones" className="py-2 w-full justify-start" asChild>
                  <motion.button className={cn(
                    "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                    "transition-all hover:text-muted-foreground",
                    "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                    "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                    "gap-1.5 group relative",
                  )}>
                    <motion.div layoutId="icon-2" className="flex-shrink-0">
                      <PanelsTopLeft size={16} strokeWidth={2} aria-hidden="true" />
                    </motion.div>
                    <motion.div layoutId="text-2" className="flex-shrink-0">
                      Mediciones
                    </motion.div>
                  </motion.button>
                </TabsTrigger>
              </span>
            </motion.div>
          </TabsList>
        ) : (
          <TabsList>
            <motion.div
              key="collapsed"
              className="bg-muted rounded-lg flex"
            >
              <TabsTrigger value="presupuesto" className="py-2" asChild>
                <motion.button className={cn(
                  "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                  "transition-all hover:text-muted-foreground",
                  "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                  "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                  "gap-1.5 group relative",
                )}>
                  <motion.div layoutId="icon-1" className="flex-shrink-0">
                    <Calculator size={16} strokeWidth={2} aria-hidden="true" />
                  </motion.div>
                </motion.button>
              </TabsTrigger>
              <TabsTrigger value="mediciones" className="py-2" asChild>
                <motion.button className={cn(
                  "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                  "transition-all hover:text-muted-foreground",
                  "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                  "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                  "gap-1.5 group relative",
                )}>
                  <motion.div layoutId="icon-2" className="flex-shrink-0">
                    <PanelsTopLeft size={16} strokeWidth={2} aria-hidden="true" />
                  </motion.div>
                </motion.button>
              </TabsTrigger>
            </motion.div>
          </TabsList>
        )}
      </Tabs>

      <AnimatePresence mode="wait">
        {activeView === 'presupuesto' ? (
          <PresupuestoContent
            key="presupuesto"
            presupuestoData={pageData.presupuestoData}
            allElements={pageData.allElements}
          />
        ) : (
          <MedicionesContent
            key="mediciones"
            initialMediciones={pageData.mediciones}
            presupuestoData={pageData.presupuestoData}
            obraId={obraId!}
            presupuestoId={presupuestoId?.toString() || '1'}
          />
        )}
      </AnimatePresence>
    </div>
  );
}

function EditableInput({
  value: initialValue,
  onChange,
  suffix = "",
  prefix = "",
  highlightChange = true,
}: {
  value: string | number;
  onChange: (val: string) => void;
  suffix?: string;
  prefix?: string;
  highlightChange?: boolean;
}) {
  const [value, setValue] = useState(String(initialValue));

  // Determine if the field was edited (only check if highlighting is enabled)
  const isEdited = highlightChange && String(initialValue) !== value;

  useEffect(() => {
    setValue(String(initialValue));
  }, [initialValue]);

  const handleBlur = () => {
    onChange(value);
  };

  const inputElement = (
    <input
      className={`border-b border-transparent group-hover:border-gray-300 group-focus:border-gray-300 focus:outline-none bg-transparent w-[50px] text-right focus-within:border-gray-300 ${isEdited ? "bg-yellow-100" : ""
        }`}
      value={value}
      onKeyDown={(e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          (e.target as HTMLInputElement).blur();
        }
      }}
      onChange={(e) => setValue(e.target.value)}
      onBlur={handleBlur}
    />
  );

  if (highlightChange && isEdited) {
    return (
      <div className="flex items-center justify-center gap-1">
        {prefix && <span className="text-sm text-gray-700">{prefix}</span>}
        <TooltipProvider delayDuration={0}>
          <Tooltip>
            <TooltipTrigger asChild>{inputElement}</TooltipTrigger>
            <TooltipContent side="top" className="px-2 py-1 text-xs">
              Original: {initialValue}
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
        {suffix && <span className="text-sm text-gray-700">{suffix}</span>}
      </div>
    );
  }

  return (
    <div className="flex items-center justify-center gap-1">
      {prefix && <span className="text-sm text-gray-700">{prefix}</span>}
      {inputElement}
      {suffix && <span className="text-sm text-gray-700">{suffix}</span>}
    </div>
  );
}

================
File: app/presupuesto/types.ts
================
export interface TagObject {
	tags: {
		name: string;
	};
}

export interface Measurement {
	monthlyProgress: number;
	cumulativePrevious: number;
	cumulativeCurrent: number;
}

export interface Measurements {
	[itemId: string]: Measurement;
}

export interface Medicion {
	id: number;
	month: string;
	measurements: {
		[key: string]: {
			monthlyProgress: number;
			cumulativePrevious: number;
			cumulativeCurrent: number;
		};
	};
}

export interface TableItem {
	id: string;
	name: string;
	unit: string;
	quantity: number;
	unitPrice: number;
	totalPrice: number;
	price: number;
	category: string;
	parcial: number;
	rubro: number;
	accumulated: number;
	element_tags?: { tags: { name: string } }[];
	originalUnit?: string;
	originalQuantity?: number;
	originalUnitPrice?: number;
	targetSection?: string;
	nombre?: string;
}

export interface GroupedData {
	[key: string]: TableItem[];
}

================
File: app/protected/page.tsx
================
import FetchDataSteps from "@/components/tutorial/fetch-data-steps";
import { createClient } from "@/utils/supabase/server";
import { InfoIcon } from "lucide-react";
import { redirect } from "next/navigation";

export default async function ProtectedPage() {
  const supabase = await createClient();

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!user) {
    return redirect("/sign-in");
  }

  return (
    <div className="flex-1 w-full flex flex-col gap-12">
      <div className="w-full">
        <div className="bg-accent text-sm p-3 px-5 rounded-md text-foreground flex gap-3 items-center">
          <InfoIcon size="16" strokeWidth={2} />
          This is a protected page that you can only see as an authenticated
          user
        </div>
      </div>
      <div className="flex flex-col gap-2 items-start">
        <h2 className="font-bold text-2xl mb-4">Your user details</h2>
        <pre className="text-xs font-mono p-3 rounded border max-h-32 overflow-auto">
          {JSON.stringify(user, null, 2)}
        </pre>
      </div>
      <div>
        <h2 className="font-bold text-2xl mb-4">Next steps</h2>
        <FetchDataSteps />
      </div>
    </div>
  );
}

================
File: app/protected/reset-password/page.tsx
================
import { resetPasswordAction } from "@/app/actions";
import { FormMessage, Message } from "@/components/form-message";
import { SubmitButton } from "@/components/submit-button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

export default async function ResetPassword(props: {
  searchParams: Promise<Message>;
}) {
  const searchParams = await props.searchParams;
  return (
    <form className="flex flex-col w-full max-w-md p-4 gap-2 [&>input]:mb-4">
      <h1 className="text-2xl font-medium">Reset password</h1>
      <p className="text-sm text-foreground/60">
        Please enter your new password below.
      </p>
      <Label htmlFor="password">New password</Label>
      <Input
        type="password"
        name="password"
        placeholder="New password"
        required
      />
      <Label htmlFor="confirmPassword">Confirm password</Label>
      <Input
        type="password"
        name="confirmPassword"
        placeholder="Confirm password"
        required
      />
      <SubmitButton formAction={resetPasswordAction}>
        Reset password
      </SubmitButton>
      <FormMessage message={searchParams} />
    </form>
  );
}

================
File: app/providers.tsx
================
// QueryProvider.tsx
"use client";

import React, { useState, useEffect } from "react";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { persistQueryClient } from "@tanstack/react-query-persist-client";
import { createSyncStoragePersister } from "@tanstack/query-sync-storage-persister";

const Providers = React.memo(function Providers({ children }: { children: React.ReactNode }) {
  // Create a single QueryClient instance for your app.
  const [queryClient] = useState(() => new QueryClient());

  useEffect(() => {
    // Create a persister that uses localStorage.
    const persister = createSyncStoragePersister({
      storage: window.localStorage,
    });

    // Persist the query cache.
    persistQueryClient({
      queryClient,
      persister,
      // Optionally specify how long the cache remains valid (here, 1 hour)
      maxAge: 1000 * 60 * 60,
    });
  }, [queryClient]);

  return (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
});

export default Providers;

================
File: app/reactScanWrapper.tsx
================
'use client'
import { scan } from 'react-scan'; // import this BEFORE react
import { ReactNode } from 'react';

if (typeof window !== 'undefined') {
  scan({
    enabled: true,
    // log: true, // logs render info to console (default: false)
    // playSound: true,
    showToolbar: true,
    animationSpeed: 'slow',
  });
}

interface ReactScanWrapperProps {
  children: ReactNode;
}

const ReactScanWrapper = ({ children }: ReactScanWrapperProps) => {
  return (
    <>
      {children}
    </>
  );
};

export default ReactScanWrapper;

================
File: app/upload/page.tsx
================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table";
import { useToast } from "@/components/ui/use-toast";
import { format } from "date-fns";
import { CalendarIcon, Upload, FileSpreadsheet } from "lucide-react";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import Papa from "papaparse";
import { Calendar } from "@/components/ui/calendar";
import { Card } from "@/components/ui/card";

interface ParsedItem {
  nombre: string;
  unidad: string;
  precio: number;
  categoria: string;
  codigo?: string;
}

export default function UploadPage() {
  const [file, setFile] = useState<File | null>(null);
  const [parsedData, setParsedData] = useState<ParsedItem[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [date, setDate] = useState<Date>(new Date());
  const { toast } = useToast();

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files.length > 0) {
      setFile(event.target.files[0]);
      setParsedData([]); // Reset parsed data when new file is selected
    }
  };

  const decodeWindows1252 = (arrayBuffer: ArrayBuffer) => {
    const decoder = new TextDecoder('windows-1252');
    return decoder.decode(arrayBuffer);
  };

  const handleParse = () => {
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      if (!e.target?.result) return;

      // Convert ArrayBuffer to text using Windows-1252 encoding
      const text = decodeWindows1252(e.target.result as ArrayBuffer);

      Papa.parse(text, {
        delimiter: ";",
        complete: (result: any) => {
          console.log('Raw parsed data:', result.data); // Debug log
          const data = result.data
            .filter((row: any[]) => row.length >= 4) // Ensure row has all required fields
            .map((row: any) => {
              const item = {
                nombre: row[1]?.trim() || '', // INSUMOS PARA LA CONSTRUCCION
                unidad: row[2]?.trim() || '', // UN
                precio: parseFloat((row[3]?.toString() || "0").replace(",", ".")) || 0, // PRECIO
                categoria: row[4]?.trim() || '', // Categoria
              };
              console.log('Processed row:', item); // Debug log
              return item;
            })
            .filter((item: any) => item.nombre && item.unidad && !isNaN(item.precio)); // Filter out invalid entries

          setParsedData(data);
          toast({
            title: "CSV Parsed Successfully",
            description: `Found ${data.length} valid entries`,
          });
        },
        error: (error: any) => {
          console.error('Error parsing CSV:', error);
          toast({
            variant: "destructive",
            title: "Error parsing CSV",
            description: error.message,
          });
        },
        skipEmptyLines: true,
      });
    };

    reader.readAsArrayBuffer(file); // Read as ArrayBuffer instead of text
  };

  const handleUpload = async () => {
    if (parsedData.length === 0) return;

    try {
      setIsLoading(true);
      const response = await fetch("/api/upload", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          items: parsedData,
          priceDate: date.toISOString()
        }),
      });

      const data = await response.json();

      if (response.ok) {
        toast({
          title: "Success",
          description: `Successfully uploaded ${data.count} items to the database!`,
        });
        // Reset the form
        setFile(null);
        setParsedData([]);
      } else {
        throw new Error(data.error || "Failed to upload data");
      }
    } catch (error: any) {
      console.error('Upload error:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to upload data",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <Card className="p-6">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl font-bold">Upload Materials and Prices</h1>
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" className="w-[180px]">
                <CalendarIcon className="mr-2 h-4 w-4" />
                {format(date, "MMMM yyyy")}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-auto p-0" align="end">
              <Calendar
                mode="single"
                selected={date}
                onSelect={(newDate: Date | undefined) => newDate && setDate(newDate)}
                initialFocus
                disabled={(date) => {
                  // Only allow selecting the first day of each month
                  return date.getDate() !== 1;
                }}
              />
            </PopoverContent>
          </Popover>
        </div>

        <div className="flex flex-col gap-4">
          <div className="flex gap-4">
            <div className="flex-1">
              <Input
                type="file"
                accept=".csv"
                onChange={handleFileChange}
                className="flex-1"
              />
            </div>
            <Button
              onClick={handleParse}
              disabled={!file || isLoading}
              variant="secondary"
            >
              <FileSpreadsheet className="mr-2 h-4 w-4" />
              Parse CSV
            </Button>
          </div>

          {parsedData.length > 0 && (
            <div className="mt-6">
              <div className="mb-4 flex items-center justify-between">
                <div className="text-sm text-muted-foreground">
                  Price date: {format(date, "MMMM yyyy")}
                </div>
                <div className="text-sm text-muted-foreground">
                  {parsedData.length} items found
                </div>
              </div>

              <div className="rounded-md border">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Nombre</TableHead>
                      <TableHead>Unidad</TableHead>
                      <TableHead className="text-right">Precio</TableHead>
                      <TableHead>Categoría</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {parsedData.map((item, index) => (
                      <TableRow key={index}>
                        <TableCell className="font-medium">{item.nombre}</TableCell>
                        <TableCell>{item.unidad}</TableCell>
                        <TableCell className="text-right">${item.precio.toFixed(2)}</TableCell>
                        <TableCell>{item.categoria}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>

              <div className="mt-4 flex justify-end">
                <Button
                  onClick={handleUpload}
                  disabled={isLoading}
                >
                  <Upload className="mr-2 h-4 w-4" />
                  {isLoading ? "Uploading..." : "Upload to Database"}
                </Button>
              </div>
            </div>
          )}
        </div>
      </Card>
    </div>
  );
}

================
File: components.json
================
{
	"$schema": "https://ui.shadcn.com/schema.json",
	"style": "default",
	"rsc": true,
	"tsx": true,
	"tailwind": {
		"config": "tailwind.config.ts",
		"css": "app/globals.css",
		"baseColor": "neutral",
		"cssVariables": true,
		"prefix": ""
	},
	"aliases": {
		"components": "@/components",
		"utils": "@/utils"
	}
}

================
File: components/BudgetForm.tsx
================
"use client";

import React, { useState } from "react";
import { Input } from "./ui/input";
import { Button } from "./ui/button";
import { Label } from "./ui/label";

// Example type of what's being captured. Adjust as needed.
interface BudgetFormData {
  projectName: string;
  client: string;
  // Example data structures for associated items.
  // Each item can represent material, construction item, or specialized labor.
  associatedItems: Array<{
    id: number;
    description: string;
    quantity: number;
    cost: number;
  }>;
}

// Props for BudgetForm
interface BudgetFormProps {
  onSave: (data: BudgetFormData) => void; // Called when "Save" is clicked
}

export default function BudgetForm({ onSave }: BudgetFormProps) {
  const [projectName, setProjectName] = useState("");
  const [client, setClient] = useState("");
  const [associatedItems, setAssociatedItems] = useState<
    BudgetFormData["associatedItems"]
  >([
    {
      id: Date.now(),
      description: "",
      quantity: 0,
      cost: 0,
    },
  ]);

  // Handle addition of a new optional row
  const handleAddItem = () => {
    setAssociatedItems((prev) => [
      ...prev,
      {
        id: Date.now(),
        description: "",
        quantity: 0,
        cost: 0,
      },
    ]);
  };

  // Update an associated item by index
  const handleUpdateItem = (
    index: number,
    field: "description" | "quantity" | "cost",
    value: string | number
  ) => {
    const updatedItems = [...associatedItems];
    // Ensure numeric fields are converted
    (updatedItems[index][field] as string | number) =
      field === "quantity" || field === "cost" ? Number(value) : value;
    setAssociatedItems(updatedItems);
  };

  // Validate and submit form
  const handleSave = () => {
    if (!projectName.trim() || !client.trim()) {
      // Basic required field check
      alert("Please fill in the required fields.");
      return;
    }

    const data: BudgetFormData = {
      projectName,
      client,
      associatedItems,
    };
    onSave(data);
  };

  return (
    <div className="max-w-xl mx-auto p-4 space-y-4">
      <h2 className="text-xl font-bold">Budget Form</h2>

      {/* Project Name */}
      <div className="space-y-2">
        <Label htmlFor="projectName">Project Name*</Label>
        <Input
          id="projectName"
          placeholder="Enter project name"
          value={projectName}
          onChange={(e) => setProjectName(e.target.value)}
        />
      </div>

      {/* Client */}
      <div className="space-y-2">
        <Label htmlFor="client">Client*</Label>
        <Input
          id="client"
          placeholder="Enter client name"
          value={client}
          onChange={(e) => setClient(e.target.value)}
        />
      </div>

      {/* Associated Items */}
      <div className="space-y-2">
        <Label>Associated Items (materials, labor, etc.)</Label>
        {associatedItems.map((item, index) => (
          <div
            key={item.id}
            className="grid grid-cols-4 gap-2 items-center mb-2"
          >
            <Input
              placeholder="Description"
              value={item.description}
              onChange={(e) =>
                handleUpdateItem(index, "description", e.target.value)
              }
            />
            <Input
              placeholder="Quantity"
              type="number"
              value={item.quantity}
              onChange={(e) =>
                handleUpdateItem(index, "quantity", e.target.value)
              }
            />
            <Input
              placeholder="Cost"
              type="number"
              value={item.cost}
              onChange={(e) => handleUpdateItem(index, "cost", e.target.value)}
            />
          </div>
        ))}

        <Button variant="secondary" onClick={handleAddItem}>
          Add Another Row
        </Button>
      </div>

      {/* Save Button */}
      <div>
        <Button onClick={handleSave}>Save</Button>
      </div>
    </div>
  );
}

================
File: components/BudgetTable.tsx
================
"use client";

import React from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"; // Adjust import to your ShadCN setup
import { Button } from "./ui/button";

// Example data structure for a budget record
interface BudgetRecord {
  id: number;
  projectName: string;
  client: string;
  status: "draft" | "submitted" | "approved" | "rejected";
}

interface BudgetTableProps {
  budgets: BudgetRecord[];
  onEdit: (id: number) => void;
  onDelete: (id: number) => void;
}

export default function BudgetTable({
  budgets,
  onEdit,
  onDelete,
}: BudgetTableProps) {
  return (
    <div className="w-full p-4">
      <h2 className="text-xl font-bold mb-4">Existing Budgets</h2>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Project Name</TableHead>
            <TableHead>Client</TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {budgets.map((budget) => (
            <TableRow key={budget.id}>
              <TableCell>{budget.projectName}</TableCell>
              <TableCell>{budget.client}</TableCell>
              <TableCell>{budget.status}</TableCell>
              <TableCell className="flex gap-2">
                <Button variant="outline" onClick={() => onEdit(budget.id)}>
                  Edit
                </Button>
                <Button variant="destructive" onClick={() => onDelete(budget.id)}>
                  Delete
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}

================
File: components/CertificateForm.tsx
================
"use client";

import React, { useState } from "react";
import { Label } from "./ui/label";
import { Input } from "./ui/input";
import { Button } from "./ui/button";

interface CategoryProgress {
  id: number;
  category: string;
  percentage: number; // 0-100
  amount: number; // Calculated based on percentage
}

interface CertificateFormData {
  progressItems: CategoryProgress[];
}

// Example props
interface CertificateFormProps {
  onSave: (data: CertificateFormData) => void; // Called to generate monthly certificate
  // If you need to know cost per category, you can supply that as props:
  baseAmounts?: { [category: string]: number };
}

export default function CertificateForm({
  onSave,
  baseAmounts = {
    Excavation: 10000,
    Foundation: 20000,
    Framing: 30000,
  },
}: CertificateFormProps) {
  // Convert baseAmounts object into an array for easier mapping
  const initialItems = Object.entries(baseAmounts).map(([cat, base]) => ({
    id: Date.now() + Math.random(), // unique ID
    category: cat,
    percentage: 0,
    amount: 0,
  }));

  const [progressItems, setProgressItems] = useState<CategoryProgress[]>(
    initialItems
  );

  // Update progress percentage and recalc amount
  const handleChangePercentage = (
    index: number,
    newValue: string
  ) => {
    let valueNum = parseFloat(newValue);
    if (isNaN(valueNum)) valueNum = 0;
    if (valueNum > 100) valueNum = 100;

    setProgressItems((prev) => {
      const updated = [...prev];
      updated[index].percentage = valueNum;
      const baseCost = baseAmounts[updated[index].category] ?? 0;
      updated[index].amount = (baseCost * valueNum) / 100;
      return updated;
    });
  };

  // Sum all amounts
  const totalAmount = progressItems.reduce((acc, item) => acc + item.amount, 0);

  const handleSave = () => {
    onSave({ progressItems });
  };

  return (
    <div className="max-w-xl mx-auto p-4 space-y-4">
      <h2 className="text-xl font-bold">Certificate Form</h2>

      {progressItems.map((item, index) => (
        <div key={item.id} className="flex items-center gap-4 mb-2">
          <Label className="w-1/4">{item.category}</Label>
          <Input
            type="number"
            className="w-1/4"
            min={0}
            max={100}
            value={item.percentage}
            onChange={(e) => handleChangePercentage(index, e.target.value)}
          />
          <div className="w-1/4">
            {item.amount.toFixed(2)}
          </div>
        </div>
      ))}

      <div className="flex justify-between font-semibold">
        <span>Total Amount:</span>
        <span>${totalAmount.toFixed(2)}</span>
      </div>

      <Button onClick={handleSave}>Generate Certificate</Button>
    </div>
  );
}

================
File: components/CertificateTable.tsx
================
"use client";

import React, { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"; // Adjust import to your ShadCN setup
import { Label } from "./ui/label";
import { Input } from "./ui/input";
import { Button } from "./ui/button";

// Example type for certificate
interface CertificateRecord {
  id: number;
  project: string;
  period: string; // e.g. "Jan 2024"
  status: "pending" | "generated" | "approved";
  totalAmount: number;
}

interface CertificateTableProps {
  certificates: CertificateRecord[];
  onView: (id: number) => void;
  onGenerate: (id: number) => void;
}

export default function CertificateTable({
  certificates,
  onView,
  onGenerate,
}: CertificateTableProps) {
  const [projectFilter, setProjectFilter] = useState("");
  const [statusFilter, setStatusFilter] = useState("");

  // Filter logic
  const filteredCertificates = certificates.filter((cert) => {
    const matchesProject =
      !projectFilter || cert.project.toLowerCase().includes(projectFilter.toLowerCase());
    const matchesStatus = !statusFilter || cert.status === statusFilter;
    return matchesProject && matchesStatus;
  });

  return (
    <div className="w-full p-4">
      <h2 className="text-xl font-bold mb-4">Certificates</h2>

      {/* Filtering */}
      <div className="flex gap-4 mb-4">
        <div className="flex flex-col">
          <Label htmlFor="projectFilter">Filter by Project</Label>
          <Input
            id="projectFilter"
            placeholder="Project name..."
            value={projectFilter}
            onChange={(e) => setProjectFilter(e.target.value)}
          />
        </div>
        <div className="flex flex-col">
          <Label htmlFor="statusFilter">Filter by Status</Label>
          <select
            id="statusFilter"
            className="border border-gray-300 rounded px-2 py-1"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">All</option>
            <option value="pending">Pending</option>
            <option value="generated">Generated</option>
            <option value="approved">Approved</option>
          </select>
        </div>
      </div>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>Project</TableHead>
            <TableHead>Period</TableHead>
            <TableHead>Status</TableHead>
            <TableHead>Total Amount</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {filteredCertificates.map((cert) => (
            <TableRow key={cert.id}>
              <TableCell>{cert.project}</TableCell>
              <TableCell>{cert.period}</TableCell>
              <TableCell>{cert.status}</TableCell>
              <TableCell>${cert.totalAmount.toFixed(2)}</TableCell>
              <TableCell className="flex gap-2">
                <Button variant="outline" onClick={() => onView(cert.id)}>
                  View
                </Button>
                <Button onClick={() => onGenerate(cert.id)}>Generate</Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}

================
File: components/deploy-button.tsx
================
import Link from "next/link";
import { Button } from "./ui/button";

export default function DeployButton() {
  return (
    <>
      <Link
        href="https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&project-name=nextjs-with-supabase&repository-name=nextjs-with-supabase&demo-title=nextjs-with-supabase&demo-description=This+starter+configures+Supabase+Auth+to+use+cookies%2C+making+the+user%27s+session+available+throughout+the+entire+Next.js+app+-+Client+Components%2C+Server+Components%2C+Route+Handlers%2C+Server+Actions+and+Middleware.&demo-url=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2F&external-id=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&demo-image=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2Fopengraph-image.png"
        target="_blank"
      >
        <Button className="flex items-center gap-2" size={"sm"}>
          <svg
            className="h-3 w-3"
            viewBox="0 0 76 65"
            fill="hsl(var(--background)/1)"
            xmlns="http://www.w3.org/2000/svg"
          >
            <path d="M37.5274 0L75.0548 65H0L37.5274 0Z" fill="inherit" />
          </svg>
          <span>Deploy to Vercel</span>
        </Button>
      </Link>
    </>
  );
}

================
File: components/DraggableRow.tsx
================
import React, { CSSProperties } from 'react'
import { Row } from '@tanstack/react-table' // if using TanStack's Row type
import { useSortable } from '@dnd-kit/sortable'
import { CSS } from '@dnd-kit/utilities'

/**
 * DraggableRow wraps each top-level "Item" row in a Sortable component.
 * We pass the row's ID as the `id`.
 */
export function DraggableRow<TData extends { id: string }>({
  row,
  children,
}: {
  row: Row<TData>
  children: React.ReactNode
}) {
  const { attributes, listeners, setNodeRef, transform, transition, isDragging } =
    useSortable({ id: row.original.id })

  const style: CSSProperties = {
    transform: CSS.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.8 : 1,
    zIndex: isDragging ? 1 : undefined,
    position: isDragging ? 'relative' : undefined,
  }

  return (
    <tr
      ref={setNodeRef}
      style={style}
      className='bolas'
    // We place the drag handle props on a dedicated cell or button,
    // but if you want to drag the entire row, you can do:
    // {...attributes} {...listeners}
    >
      {children}
    </tr>
  )
}

/**
 * A small button or handle for the user to click and drag.
 * Typically goes in the first cell of each row.
 */
export function RowDragHandle({ rowId }: { rowId: string }) {
  const { attributes, listeners } = useSortable({ id: rowId })
  return (
    <button
      {...attributes}
      {...listeners}
      style={{ cursor: 'grab' }}
      aria-label="Drag handle"
    >
      🟰
    </button>
  )
}

================
File: components/editable-cell.tsx
================
import React, { useEffect, useRef, useState } from 'react'
import { Input } from '@/components/ui/input'
import { cn } from '@/lib/utils'

export interface EditableCellProps {
  value: string
  onChange: (newVal: string) => void
  className?: string
  onClick?: () => void
  /**
   * Optional: Use this if you want to display something else in read mode
   * (e.g., highlighted text) instead of the raw value.
   */
  displayValue?: React.ReactNode
}


export const EditableCell: React.FC<EditableCellProps> = ({
  value,
  onChange,
  displayValue,  // new optional prop
  className,
  onClick,
}) => {
  const [isEditing, setIsEditing] = useState(false)
  const [editValue, setEditValue] = useState(value)
  const inputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus()
    }
  }, [isEditing])

  const handleDoubleClick = () => {
    setIsEditing(true)
  }

  const handleBlur = () => {
    setIsEditing(false)
    onChange(editValue)
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      setIsEditing(false)
      onChange(editValue)
    } else if (e.key === 'Escape') {
      setIsEditing(false)
      setEditValue(value) // revert changes
    }
  }

  if (isEditing) {
    return (
      <Input
        ref={inputRef}
        value={editValue}
        className={cn("border border-gray-300 rounded px-2 py-1 w-full h-full", className)}
        onChange={(e) => setEditValue(e.target.value)}
        onBlur={handleBlur}
        onKeyDown={handleKeyDown}
      />
    )
  }

  /**
   * If a "displayValue" is provided, we render that in read-mode.
   * Otherwise, render the original "value".
   */
  return (
    <div
      className={cn("h-9 flex justify-start items-center", className)}
      onClick={onClick}
      onDoubleClick={handleDoubleClick} >
      {displayValue !== undefined ? displayValue : value}
    </div>
  )
}

================
File: components/env-var-warning.tsx
================
import Link from "next/link";
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";

export function EnvVarWarning() {
  return (
    <div className="flex gap-4 items-center">
      <Badge variant={"outline"} className="font-normal">
        Supabase environment variables required
      </Badge>
      <div className="flex gap-2">
        <Button
          asChild
          size="sm"
          variant={"outline"}
          disabled
          className="opacity-75 cursor-none pointer-events-none"
        >
          <Link href="/sign-in">Sign in</Link>
        </Button>
        <Button
          asChild
          size="sm"
          variant={"default"}
          disabled
          className="opacity-75 cursor-none pointer-events-none"
        >
          <Link href="/sign-up">Sign up</Link>
        </Button>
      </div>
    </div>
  );
}

================
File: components/expandable-table.tsx
================
'use client'

import React, { useState, useMemo, useEffect } from 'react'
import {
  ChevronDown,
  ChevronRight,
  ChevronUp,
  ArrowUpDown,
} from 'lucide-react'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import { EditableCell } from './editable-cell'
import { SortDirection } from '../types/table-types'
import { highlightText, sortData } from '../utils/table-utils'
import { Card } from './ui/card'

// ─────────────────────────────────────────────────────
// 1) TanStack React Table Imports
// ─────────────────────────────────────────────────────
import {
  useReactTable,
  getCoreRowModel,
  getExpandedRowModel,
  ColumnDef,
  ExpandedState,
  flexRender,
} from '@tanstack/react-table'

/** 
 * We'll not use "initialData" for production fetch, but let's keep a fallback.
 */
interface Item {
  id: string
  insumos: string
  unidad: string
  precio: string
  subItems?: Item[]
}

const initialData: Item[] = []

/**
 * Convert your fetched "tags" data structure into an Item[] shape.
 */
function adaptTagsToItems(tags: any[]): Item[] {
  // Each tag => one top-level Item
  // Each element => one subItem
  return tags.map((tag) => {
    const subItems = tag.element_tags?.map((et: any) => {
      const el = et.elements
      // If you want the last or the first price, adapt accordingly:
      let priceString = '0.00'
      if (el.prices?.length > 0) {
        const lastPrice = el.prices[el.prices.length - 1].price
        priceString = String(lastPrice)
      }
      return {
        id: String(el.id),
        insumos: el.name,
        unidad: el.unit,
        precio: priceString,
      } as Item
    }) ?? []

    return {
      id: String(tag.id),
      insumos: tag.name,
      unidad: '',
      precio: '',
      subItems,
    } as Item
  })
}

/**
 * A helper to gather all IDs (item + all subItems) recursively.
 */
function collectAllIdsRecursive(item: Item): string[] {
  const result = [item.id]
  if (item.subItems) {
    for (const sub of item.subItems) {
      result.push(...collectAllIdsRecursive(sub))
    }
  }
  return result
}

/**
 * Remove all items (and sub-items) whose IDs exist in `idsToRemove`.
 */
function removeIdsFromData(data: Item[], idsToRemove: Set<string>): Item[] {
  return data
    .filter((it) => !idsToRemove.has(it.id))
    .map((it) => {
      if (it.subItems) {
        return { ...it, subItems: removeIdsFromData(it.subItems, idsToRemove) }
      }
      return it
    })
}

/**
 * Duplicate items that are selected (along with sub-items). 
 * Returns a new array with duplicates appended at the top level.
 */
function duplicateSelected(data: Item[], selectedIds: Set<string>): Item[] {
  const newData = [...data]

  const cloneItem = (item: Item): Item => {
    const newId = `${item.id}-copy-${Math.floor(Math.random() * 1000)}`
    return {
      ...item,
      id: newId,
      subItems: item.subItems?.map(cloneItem) ?? [],
    }
  }

  const traverse = (items: Item[]) => {
    items.forEach((it) => {
      if (selectedIds.has(it.id)) {
        newData.push(cloneItem(it))
      }
      if (it.subItems) {
        traverse(it.subItems)
      }
    })
  }

  traverse(data)
  return newData
}

export default function ExpandableTable() {
  const [data, setData] = useState<Item[]>(initialData)

  // Use a TanStack 'expanded' state instead of manual expandedRows
  const [expanded, setExpanded] = useState<ExpandedState>({})

  const [searchTerm, setSearchTerm] = useState('')
  const [sortColumn, setSortColumn] = useState<keyof Item>('id')
  const [sortDirection, setSortDirection] = useState<SortDirection>('asc')
  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set())

  /**
   * Fetch data from /api/tagsWithElements
   */
  useEffect(() => {
    fetch('/api/tagsWithElements')
      .then((res) => res.json())
      .then((tags: any[]) => {
        const adapted = adaptTagsToItems(tags)
        setData(adapted)
      })
      .catch((err) => console.error('Error fetching elements:', err))
  }, [])

  /**
   * Sort data
   */
  const handleSort = (column: keyof Item) => {
    setSortColumn(column)
    setSortDirection((prev) => (prev === 'asc' ? 'desc' : 'asc'))
  }

  /**
   * Update an item or subItem with a new value for the specified field.
   */
  const handleEdit = (id: string, field: keyof Item, value: string) => {
    function updateItem(items: Item[]): Item[] {
      return items.map((item) => {
        if (item.id === id) {
          return { ...item, [field]: value }
        }
        if (item.subItems) {
          return { ...item, subItems: updateItem(item.subItems) }
        }
        return item
      })
    }
    setData((old) => updateItem(old))
  }

  /**
   * Toggle selection for this item + its children.
   */
  const handleToggleSelect = (item: Item) => {
    const allIds = collectAllIdsRecursive(item)
    const newSelectedIds = new Set(selectedIds)
    const newExpanded = { ...expanded as any }

    // If any child is not selected, select them all. Otherwise, unselect them all.
    const shouldSelect = allIds.some((id) => !newSelectedIds.has(id))

    if (shouldSelect) {
      allIds.forEach((id) => {
        newSelectedIds.add(id)
        newExpanded[id] = true // auto-expand
      })
    } else {
      allIds.forEach((id) => {
        newSelectedIds.delete(id)
        delete newExpanded[id]
      })
    }

    setSelectedIds(newSelectedIds)
    setExpanded(newExpanded)
  }

  /**
   * Filter + sort data for display
   */
  const filteredAndSortedData = useMemo(() => {
    let result = data
    if (searchTerm) {
      const searchLower = searchTerm.toLowerCase()
      // Filter parent items if they match or have subItems that match
      result = result
        .map((item) => {
          const filteredSubItems = item.subItems?.filter((subItem) =>
            Object.values(subItem).some((value) =>
              value.toLowerCase().includes(searchLower)
            )
          )
          return { ...item, subItems: filteredSubItems }
        })
        .filter(
          (item) =>
            (item.subItems && item.subItems.length > 0) ||
            Object.values(item).some(
              (value) =>
                typeof value === 'string' &&
                value.toLowerCase().includes(searchLower)
            )
        )
    }
    // Sort
    return sortData(result, sortColumn, sortDirection)
  }, [data, searchTerm, sortColumn, sortDirection])

  /**
   * Auto-expand rows that contain search text
   */
  useEffect(() => {
    if (!searchTerm) {
      setExpanded({})
      return
    }
    const newExpanded: ExpandedState = { ...expanded as any }
    const searchLower = searchTerm.toLowerCase()

    data.forEach((item) => {
      const itemMatches = Object.values(item).some(
        (val) => typeof val === 'string' && val.toLowerCase().includes(searchLower)
      )
      const subItemMatches = item.subItems?.some((subItem) =>
        Object.values(subItem).some(
          (val) => typeof val === 'string' && val.toLowerCase().includes(searchLower)
        )
      )
      if (itemMatches || subItemMatches) {
        (newExpanded as Record<string, boolean>)[item.id] = true;
      }
    })

    setExpanded(newExpanded)
  }, [searchTerm, data])

  // ─────────────────────────────────────────────────────
  // Define columns for TanStack React Table
  // ─────────────────────────────────────────────────────
  const columns = useMemo<ColumnDef<Item>[]>(
    () => [
      {
        // Checkbox column for selection
        id: 'selection',
        header: () => null, // empty
        cell: ({ row }) => {
          const item = row.original
          return (
            <input
              type="checkbox"
              checked={selectedIds.has(item.id)}
              onChange={() => handleToggleSelect(item)}
              className="cursor-pointer"
            />
          )
        },
      },
      {
        // ID
        accessorKey: 'id',
        header: () => (
          <Button
            variant="ghost"
            size="sm"
            onClick={() => handleSort('id')}
            className="flex items-center space-x-1"
          >
            <span>ID</span>
            {sortColumn === 'id' ? (
              sortDirection === 'asc' ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )
            ) : (
              <ArrowUpDown className="h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row, getValue }) => {
          return (
            <div className="flex items-center justify-center">
              <EditableCell
                value={getValue<string>()}
                onChange={(val) => handleEdit(row.original.id, 'id', val)}
              />
            </div>
          )
        },
      },
      {
        // Insumos
        accessorKey: 'insumos',
        header: () => (
          <Button
            variant="ghost"
            onClick={() => handleSort('insumos')}
            className="flex items-center space-x-1"
          >
            <span>Insumos</span>
            {sortColumn === 'insumos' ? (
              sortDirection === 'asc' ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )
            ) : (
              <ArrowUpDown className="h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row, getValue }) => {
          const item = row.original
          const depth = row.depth
          const hasSubRows = row.getCanExpand()
          const isExpanded = row.getIsExpanded()

          return (
            <div
              // Indent sub-rows based on depth, plus fade/height transitions
              className="flex items-center transition-all duration-300"
              style={{
                paddingLeft: `${depth * 20}px`,
              }}
            >
              {/* Expand button if there are subItems */}
              {hasSubRows && (
                <Button
                  variant="ghost"
                  size="icon"
                  onClick={row.getToggleExpandedHandler()}
                  className="mr-2"
                >
                  {isExpanded ? (
                    <ChevronDown className="h-4 w-4" />
                  ) : (
                    <ChevronRight className="h-4 w-4" />
                  )}
                </Button>
              )}
              <EditableCell
                className={depth === 0 ? 'font-bold' : ''}
                value={item.insumos}
                onChange={(val) => handleEdit(item.id, 'insumos', val)}
                displayValue={highlightText(getValue<string>(), searchTerm)}
              />
            </div>
          )
        },
      },
      {
        // Unidad
        accessorKey: 'unidad',
        header: () => (
          <Button
            variant="ghost"
            onClick={() => handleSort('unidad')}
            className="flex items-center space-x-1"
          >
            <span>Unidad</span>
            {sortColumn === 'unidad' ? (
              sortDirection === 'asc' ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )
            ) : (
              <ArrowUpDown className="h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row, getValue }) => {
          return (
            <EditableCell
              value={getValue<string>()}
              onChange={(val) => handleEdit(row.original.id, 'unidad', val)}
            />
          )
        },
      },
      {
        // Precio
        accessorKey: 'precio',
        header: () => (
          <Button
            variant="ghost"
            onClick={() => handleSort('precio')}
            className="flex items-center space-x-1"
          >
            <span>Precio</span>
            {sortColumn === 'precio' ? (
              sortDirection === 'asc' ? (
                <ChevronUp className="h-4 w-4" />
              ) : (
                <ChevronDown className="h-4 w-4" />
              )
            ) : (
              <ArrowUpDown className="h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row, getValue }) => {
          return (
            <EditableCell
              value={getValue<string>()}
              onChange={(val) => handleEdit(row.original.id, 'precio', val)}
            />
          )
        },
      },
    ],
    [selectedIds, sortColumn, sortDirection, searchTerm]
  )

  // ─────────────────────────────────────────────────────
  // Create the TanStack table
  // ─────────────────────────────────────────────────────
  const table = useReactTable({
    data: filteredAndSortedData,
    columns,
    state: {
      expanded,
    },
    getSubRows: (row) => row.subItems,
    onExpandedChange: setExpanded,
    getCoreRowModel: getCoreRowModel(),
    getExpandedRowModel: getExpandedRowModel(),
  })

  // Bulk Actions
  const handleDeleteSelected = () => {
    setData((old) => removeIdsFromData(old, selectedIds))
    setSelectedIds(new Set())
  }

  const handleDuplicateSelected = () => {
    setData((old) => duplicateSelected(old, selectedIds))
    setSelectedIds(new Set())
  }

  const handleExecuteSelected = () => {
    console.log('execute')
    // Additional logic if needed
    setSelectedIds(new Set())
  }

  console.log(data)

  return (
    <div className="container p-4">
      {/* Search */}
      <Input
        placeholder="Buscar..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="mb-4"
      />

      {/* Bulk actions if anything is selected */}
      {selectedIds.size > 0 && (
        <div className="mb-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline">Actions ({selectedIds.size})</Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuLabel>Bulk Actions</DropdownMenuLabel>
              <DropdownMenuItem onClick={handleDeleteSelected}>
                Delete
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleDuplicateSelected}>
                Duplicate
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleExecuteSelected}>
                Execute
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      )}

      {/* Table */}
      <Card className="max-h-[80vh] overflow-y-scroll">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id} colSpan={header.colSpan}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                        header.column.columnDef.header,
                        header.getContext()
                      )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>

          <TableBody>
            {table.getRowModel().rows.map((row) => {
              const rowClasses = [
                'overflow-hidden',          // hide content that would otherwise overflow
                'transition-all',           // animate changes
                'duration-300',            // 300ms
                row.depth === 0 && 'bg-muted/30', // highlight top-level row
              ]
                .filter(Boolean)
                .join(' ')

              return (
                <TableRow
                  key={row.id}
                  className={rowClasses}
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              )
            })}
          </TableBody>
        </Table>
      </Card>
    </div>
  )
}

================
File: components/form-message.tsx
================
export type Message =
  | { success: string }
  | { error: string }
  | { message: string };

export function FormMessage({ message }: { message: Message }) {
  return (
    <div className="flex flex-col gap-2 w-full max-w-md text-sm">
      {"success" in message && (
        <div className="text-foreground border-l-2 border-foreground px-4">
          {message.success}
        </div>
      )}
      {"error" in message && (
        <div className="text-destructive-foreground border-l-2 border-destructive-foreground px-4">
          {message.error}
        </div>
      )}
      {"message" in message && (
        <div className="text-foreground border-l-2 px-4">{message.message}</div>
      )}
    </div>
  );
}

================
File: components/header-auth.tsx
================
import { signOutAction } from "@/app/actions";
import { hasEnvVars } from "@/utils/supabase/check-env-vars";
import Link from "next/link";
import { Badge } from "./ui/badge";
import { Button } from "./ui/button";
import { createClient } from "@/utils/supabase/server";

export default async function AuthButton() {
  const supabase = await createClient();

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (!hasEnvVars) {
    return (
      <>
        <div className="flex gap-4 items-center">
          <div>
            <Badge
              variant={"default"}
              className="font-normal pointer-events-none"
            >
              Please update .env.local file with anon key and url
            </Badge>
          </div>
          <div className="flex gap-2">
            <Button
              asChild
              size="sm"
              variant={"outline"}
              disabled
              className="opacity-75 cursor-none pointer-events-none"
            >
              <Link href="/sign-in">Sign in</Link>
            </Button>
            <Button
              asChild
              size="sm"
              variant={"default"}
              disabled
              className="opacity-75 cursor-none pointer-events-none"
            >
              <Link href="/sign-up">Sign up</Link>
            </Button>
          </div>
        </div>
      </>
    );
  }
  return user ? (
    <div className="flex items-center gap-4">
      Hey, {user.email}!
      <form action={signOutAction}>
        <Button type="submit" variant={"outline"}>
          Sign out
        </Button>
      </form>
    </div>
  ) : (
    <div className="flex gap-2">
      <Button asChild size="sm" variant={"outline"}>
        <Link href="/sign-in">Sign in</Link>
      </Button>
      <Button asChild size="sm" variant={"default"}>
        <Link href="/sign-up">Sign up</Link>
      </Button>
    </div>
  );
}

================
File: components/hero.tsx
================
import NextLogo from "./next-logo";
import SupabaseLogo from "./supabase-logo";

export default function Header() {
  return (
    <div className="flex flex-col gap-16 items-center">
      <div className="flex gap-8 justify-center items-center">
        <a
          href="https://supabase.com/?utm_source=create-next-app&utm_medium=template&utm_term=nextjs"
          target="_blank"
          rel="noreferrer"
        >
          <SupabaseLogo />
        </a>
        <span className="border-l rotate-45 h-6" />
        <a href="https://nextjs.org/" target="_blank" rel="noreferrer">
          <NextLogo />
        </a>
      </div>
      <h1 className="sr-only">Supabase and Next.js Starter Template</h1>
      <p className="text-3xl lg:text-4xl !leading-tight mx-auto max-w-xl text-center">
        The fastest way to build apps with{" "}
        <a
          href="https://supabase.com/?utm_source=create-next-app&utm_medium=template&utm_term=nextjs"
          target="_blank"
          className="font-bold hover:underline"
          rel="noreferrer"
        >
          Supabase
        </a>{" "}
        and{" "}
        <a
          href="https://nextjs.org/"
          target="_blank"
          className="font-bold hover:underline"
          rel="noreferrer"
        >
          Next.js
        </a>
      </p>
      <div className="w-full p-[1px] bg-gradient-to-r from-transparent via-foreground/10 to-transparent my-8" />
    </div>
  );
}

================
File: components/next-logo.tsx
================
export default function NextLogo() {
  return (
    <svg
      aria-label="Next.js logotype"
      height="68"
      role="img"
      viewBox="0 0 394 79"
      width="100"
    >
      <path
        d="M261.919 0.0330722H330.547V12.7H303.323V79.339H289.71V12.7H261.919V0.0330722Z"
        fill="currentColor"
      />
      <path
        d="M149.052 0.0330722V12.7H94.0421V33.0772H138.281V45.7441H94.0421V66.6721H149.052V79.339H80.43V12.7H80.4243V0.0330722H149.052Z"
        fill="currentColor"
      />
      <path
        d="M183.32 0.0661486H165.506L229.312 79.3721H247.178L215.271 39.7464L247.127 0.126654L229.312 0.154184L206.352 28.6697L183.32 0.0661486Z"
        fill="currentColor"
      />
      <path
        d="M201.6 56.7148L192.679 45.6229L165.455 79.4326H183.32L201.6 56.7148Z"
        fill="currentColor"
      />
      <path
        clipRule="evenodd"
        d="M80.907 79.339L17.0151 0H0V79.3059H13.6121V16.9516L63.8067 79.339H80.907Z"
        fill="currentColor"
        fillRule="evenodd"
      />
      <path
        d="M333.607 78.8546C332.61 78.8546 331.762 78.5093 331.052 77.8186C330.342 77.1279 329.991 76.2917 330 75.3011C329.991 74.3377 330.342 73.5106 331.052 72.8199C331.762 72.1292 332.61 71.7838 333.607 71.7838C334.566 71.7838 335.405 72.1292 336.115 72.8199C336.835 73.5106 337.194 74.3377 337.204 75.3011C337.194 75.9554 337.028 76.5552 336.696 77.0914C336.355 77.6368 335.922 78.064 335.377 78.373C334.842 78.6911 334.252 78.8546 333.607 78.8546Z"
        fill="currentColor"
      />
      <path
        d="M356.84 45.4453H362.872V68.6846C362.863 70.8204 362.401 72.6472 361.498 74.1832C360.585 75.7191 359.321 76.8914 357.698 77.7185C356.084 78.5364 354.193 78.9546 352.044 78.9546C350.079 78.9546 348.318 78.6001 346.75 77.9094C345.182 77.2187 343.937 76.1826 343.024 74.8193C342.101 73.456 341.649 71.7565 341.649 69.7207H347.691C347.7 70.6114 347.903 71.3838 348.29 72.0291C348.677 72.6744 349.212 73.1651 349.895 73.5105C350.586 73.8559 351.38 74.0286 352.274 74.0286C353.243 74.0286 354.073 73.8286 354.746 73.4196C355.419 73.0197 355.936 72.4199 356.296 71.6201C356.646 70.8295 356.831 69.8479 356.84 68.6846V45.4453Z"
        fill="currentColor"
      />
      <path
        d="M387.691 54.5338C387.544 53.1251 386.898 52.0254 385.773 51.2438C384.638 50.4531 383.172 50.0623 381.373 50.0623C380.11 50.0623 379.022 50.2532 378.118 50.6258C377.214 51.0075 376.513 51.5164 376.033 52.1617C375.554 52.807 375.314 53.5432 375.295 54.3703C375.295 55.061 375.461 55.6608 375.784 56.1607C376.107 56.6696 376.54 57.0968 377.103 57.4422C377.656 57.7966 378.274 58.0874 378.948 58.3237C379.63 58.56 380.313 58.76 380.995 58.9236L384.14 59.6961C385.404 59.9869 386.631 60.3778 387.802 60.8776C388.973 61.3684 390.034 61.9955 390.965 62.7498C391.897 63.5042 392.635 64.413 393.179 65.4764C393.723 66.5397 394 67.7848 394 69.2208C394 71.1566 393.502 72.8562 392.496 74.3285C391.491 75.7917 390.043 76.9369 388.143 77.764C386.252 78.582 383.965 79 381.272 79C378.671 79 376.402 78.6002 374.493 77.8004C372.575 77.0097 371.08 75.8463 370.001 74.3194C368.922 72.7926 368.341 70.9294 368.258 68.7391H374.235C374.318 69.8842 374.687 70.8386 375.314 71.6111C375.95 72.3745 376.78 72.938 377.795 73.3197C378.819 73.6923 379.962 73.8832 381.226 73.8832C382.545 73.8832 383.707 73.6832 384.712 73.2924C385.708 72.9016 386.492 72.3564 387.055 71.6475C387.627 70.9476 387.913 70.1206 387.922 69.1754C387.913 68.312 387.654 67.5939 387.156 67.0304C386.649 66.467 385.948 65.9944 385.053 65.6127C384.15 65.231 383.098 64.8856 381.899 64.5857L378.081 63.6223C375.323 62.9225 373.137 61.8592 371.541 60.4323C369.937 59.0054 369.143 57.115 369.143 54.7429C369.143 52.798 369.678 51.0894 370.758 49.6261C371.827 48.1629 373.294 47.0268 375.148 46.2179C377.011 45.4 379.114 45 381.456 45C383.836 45 385.92 45.4 387.719 46.2179C389.517 47.0268 390.929 48.1538 391.952 49.5897C392.976 51.0257 393.511 52.6707 393.539 54.5338H387.691Z"
        fill="currentColor"
      />
    </svg>
  );
}

================
File: components/presupuesto/PresupuestoSection.tsx
================
import React from 'react'
import { motion, useInView } from 'framer-motion'
import { Package, Plus, Check, Trash2 } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { debounce } from 'lodash'

interface TableItem {
  id: string | number
  name: string
  unit: string
  quantity: number
  unitPrice: number
  totalPrice: number
  price: number
  category: string
  accumulated?: string | number
  parcial?: string | number
  rubro?: string | number
  element_tags?: { tags: { name: string } }[]
}

interface PresupuestoSectionProps {
  tag: string
  tagIndex: number
  items: TableItem[]
  previewVersion: string | boolean
  grandTotal: number
  sectionRubros: number[]
  sectionIacums: number[]
  addElementToSection: (tag: string, element: any) => void
  updateData: (tag: string, itemId: string | number, key: keyof TableItem, value: string) => void
  handleDeleteRow: (tag: string, itemId: string | number) => void
  isNewSection?: boolean
  allElements: any[]
  forDisplay?: boolean
}

function EditableInput({
  value: initialValue,
  onChange,
  suffix = "",
  prefix = "",
}: {
  value: string | number
  onChange: (val: string) => void
  suffix?: string
  prefix?: string
}) {
  const [value, setValue] = React.useState(String(initialValue))

  React.useEffect(() => {
    setValue(String(initialValue))
  }, [initialValue])

  const handleBlur = () => {
    onChange(value)
  }

  return (
    <div className="flex items-center justify-center gap-1">
      {prefix && <span className="text-sm text-gray-700">{prefix}</span>}
      <input
        className="border-b border-transparent group-hover:border-gray-300 group-focus:border-gray-300 focus:outline-none bg-transparent w-[50px] text-right focus-within:border-gray-300"
        value={value}
        onKeyDown={(e) => {
          if (e.key === 'Enter') {
            e.preventDefault();
            (e.target as HTMLInputElement).blur();
          }
        }}
        onChange={(e) => setValue(e.target.value)}
        onBlur={handleBlur}
      />
      {suffix && <span className="text-sm text-gray-700">{suffix}</span>}
    </div>
  )
}

export function PresupuestoSection({
  tag,
  tagIndex,
  items,
  previewVersion,
  grandTotal,
  sectionRubros,
  sectionIacums,
  addElementToSection,
  updateData,
  handleDeleteRow,
  isNewSection = false,
  allElements,
  forDisplay = false
}: PresupuestoSectionProps) {
  // Local states
  const [isSearchOpen, setIsSearchOpen] = React.useState(false)
  const [searchValue, setSearchValue] = React.useState('')
  const [filteredElements, setFilteredElements] = React.useState<any[]>([])

  // Remove allElements state and fetch
  const ref = React.useRef(null)
  const isInView = useInView(ref, { once: true })

  // Animation variants
  const containerVariants = {
    hidden: { scale: 1.1, opacity: 0 },
    visible: { scale: 1, opacity: 1 }
  }

  const borderVariants = {
    hidden: { borderColor: 'rgba(59, 130, 246, 0.75)' },
    visible: { borderColor: 'rgba(59, 130, 246, 0)' }
  }

  // Debounced search function
  const debouncedSearch = React.useCallback(
    debounce((searchTerm: string) => {
      if (searchTerm.length >= 4) {
        const filtered = allElements.filter(element => {
          // Name matching - case insensitive
          const searchLower = searchTerm.toLowerCase();
          const nameLower = (element.nombre || element.name || '').toLowerCase();
          const nameMatch = nameLower.includes(searchLower);

          // For custom sections, don't filter by tag
          const isCustomSection = !element.element_tags?.some((tagObj: any) =>
            (tagObj.tags?.name || tagObj.name || '').toLowerCase() === tag.toLowerCase()
          );

          return nameMatch && (isCustomSection || element.category?.toLowerCase() === tag.toLowerCase());
        });

        setFilteredElements(filtered);
      } else {
        setFilteredElements([]);
      }
    }, 300),
    [allElements, tag]
  )

  // Handle search input change
  const handleSearch = (value: string) => {
    setSearchValue(value);
    debouncedSearch(value);
  }

  // Handle element selection
  const handleElementSelect = (element: any) => {
    addElementToSection(tag, element);
    setIsSearchOpen(false);
    setSearchValue('');
    setFilteredElements([]);
  }

  // Handle custom element creation
  const handleCreateCustomElement = () => {
    const customElement = {
      id: `custom-${Date.now()}`,
      nombre: searchValue,
      name: searchValue,
      unidad: '',
      unit: '',
      cantidad: 0,
      quantity: 0,
      precio: 0,
      price: 0,
      category: tag,
    };
    handleElementSelect(customElement);
  }

  // console.log('tag', tag)
  // console.log('isNewSection', isNewSection)
  // console.log('isInView', isInView)
  // console.log('filteredElements', filteredElements)

  return (
    <motion.div
      ref={ref}
      key={tag}
      id={`section-${tag}`}
      initial={isNewSection ? "hidden" : "visible"}
      animate={isNewSection && isInView ? "visible" : "visible"}
      variants={containerVariants}
      transition={{ duration: 1 }}
      className="relative scroll-mt-10"
    >
      <motion.div
        initial={isNewSection ? "hidden" : "visible"}
        animate={isNewSection && isInView ? "visible" : "visible"}
        variants={borderVariants}
        transition={{ duration: 1.5, delay: 0.2 }}
        className={cn(
          "border-2 rounded-lg",
          (!Array.isArray(items) || items.length === 0) && "border-dashed border-muted-foreground/50 bg-muted/50"
        )}
      >
        {/* Section Header */}
        <h3 className={cn(
          "text-[14px] font-bold bg-input/20 rounded-lg p-2 pl-4 flex items-center justify-between gap-2",
          (!Array.isArray(items) || items.length === 0) && "text-muted-foreground"
        )}>
          <span className="flex items-center gap-2">
            <Package size={16} strokeWidth={2} aria-hidden="true" />
            {tagIndex + 1}. {tag.toUpperCase()}
          </span>
          <div className="relative">
            {previewVersion === 'false' && (
              <Popover
                open={isSearchOpen}
                onOpenChange={setIsSearchOpen}
              >
                <PopoverTrigger asChild>
                  <Button
                    type="button"
                    variant="secondary"
                    className={cn(
                      "w-7 h-7 p-0 -my-1"
                    )}
                    onClick={() => setIsSearchOpen(!isSearchOpen)}
                  >
                    <Plus className="w-4 h-4 text-blue-500" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-full p-0">
                  {/* @ts-ignore */}
                  <Command>
                    {/* @ts-ignore */}
                    <CommandInput
                      // @ts-ignore
                      placeholder="Buscar elementos (mínimo 4 caracteres)..."
                      value={searchValue}
                      onValueChange={handleSearch}
                      onKeyDown={(e: React.KeyboardEvent) => {
                        if (e.key === 'Enter') {
                          e.preventDefault()
                        }
                      }}
                    />
                    {/* @ts-ignore */}
                    <CommandEmpty>
                      {/* @ts-ignore */}
                      {(!searchValue || searchValue.length < 4) ? (
                        "Ingrese al menos 4 caracteres para buscar"
                      ) : (
                        <div className="flex flex-col items-center justify-center py-6 gap-2">
                          <span className="text-sm text-muted-foreground">No se encontraron elementos</span>
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            onClick={handleCreateCustomElement}
                            className="mt-2"
                          >
                            <Plus className="w-4 h-4 mr-2" />
                            Crear "{searchValue}"
                          </Button>
                        </div>
                      )}
                    </CommandEmpty>
                    {/* @ts-ignore */}
                    <CommandGroup>
                      {/* @ts-ignore */}
                      <CommandList>
                        {filteredElements.map((element, idx) => (
                          // @ts-ignore
                          <CommandItem
                            key={element.id}
                            value={element.nombre}
                            onSelect={() => handleElementSelect(element)}
                          >
                            <Check className={cn("mr-2 h-4 w-4", "opacity-0")} />
                            {element.nombre}
                          </CommandItem>
                        ))}
                      </CommandList>
                    </CommandGroup>
                  </Command>
                </PopoverContent>
              </Popover>
            )}
          </div>
        </h3>

        <Table className="bg-white border-l-none">
          {(!Array.isArray(items) || items.length > 0) && (
            <TableHeader>
              <TableRow className="bg-white border-l-none">
                <TableHead className="w-[50px] bg-white">N°</TableHead>
                <TableHead className="text-left bg-white">Nombre</TableHead>
                <TableHead className="text-left bg-white">Unidad</TableHead>
                <TableHead className="text-center bg-white">Cantidad</TableHead>
                <TableHead className="text-center bg-white" colSpan={2}>Precio Unit.</TableHead>
                <TableHead className="text-center bg-white" colSpan={2}>Precio Total</TableHead>
                <TableHead className="text-center bg-white">Parcial</TableHead>
                {previewVersion === 'false' && (
                  <TableHead className="text-center bg-white">Acciones</TableHead>
                )}
              </TableRow>
            </TableHeader>
          )}

          <TableBody>
            {/* Empty state */}
            {(!Array.isArray(items) || items.length === 0) && previewVersion === 'false' && (
              <TableRow>
                <TableCell colSpan={10} className="h-24 text-center">
                  <div className="flex flex-col items-center justify-center gap-2 text-muted-foreground">
                    <Package className="h-8 w-8 opacity-50" />
                    <span className="text-sm">No hay elementos en esta sección</span>
                  </div>
                </TableCell>
              </TableRow>
            )}

            {/* Rows for this tag */}
            {Array.isArray(items) && items.map((item, rowIndex) => {
              const rowNumber = `${tagIndex + 1}.${rowIndex + 1}`
              const itemTotal = (item.quantity || 0) * (item.unitPrice || 0);
              const parcialPercentage = grandTotal ? (itemTotal * 100 / grandTotal) : 0;

              return (
                <TableRow key={item.id}>
                  {/* N° */}
                  <TableCell className="text-gray-600 border-r ">
                    {rowNumber}
                  </TableCell>
                  {/* Nombre */}
                  <TableCell className='border-r'>
                    {item.name}
                  </TableCell>
                  {/* Unidad */}
                  <TableCell className='border-r'>
                    <EditableInput
                      value={String(item.unit ?? '')}
                      onChange={(val) => updateData(tag, item.id, 'unit', val)}
                      suffix=""
                    />
                  </TableCell>
                  <TableCell className="text-center border-r group cursor-text hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]">
                    <EditableInput
                      value={String(item.quantity ?? '')}
                      onChange={(val) => updateData(tag, item.id, 'quantity', val)}
                      suffix=""
                    />
                  </TableCell>
                  <TableCell className="text-center border-r group cursor-text hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]" colSpan={2}>
                    <EditableInput
                      value={String(item.unitPrice ?? '')}
                      onChange={(val) => updateData(tag, item.id, 'unitPrice', val)}
                      prefix="$"
                    />
                  </TableCell>
                  <TableCell className="text-center border-r" colSpan={2}>
                    ${itemTotal.toFixed(2)}
                  </TableCell>
                  {/* Parcial */}
                  <TableCell className="text-center">
                    {parcialPercentage.toFixed(2)}%
                  </TableCell>
                  {/* Rubro */}
                  {previewVersion === 'false' && (
                    <TableCell className="text-center border-r">
                      <Button
                        variant="destructive"
                        className="flex items-center gap-1 h-6 w-7 p-0 mx-auto"
                        onClick={() => handleDeleteRow(tag, item.id)}
                      >
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </TableCell>
                  )}
                </TableRow>
              )
            })}

            {/* Section totals header */}
            {(!Array.isArray(items) || items.length > 0) && (
              <TableRow className="relative hover:bg-white border-none">
                <TableCell colSpan={10} className="p-0">
                </TableCell>
                <TableCell className="p-0 relative h-[100px]">
                  <div className={cn(" right-0 w-[300px] max-w-[300px] absolute top-0 my-4 mr-2 rounded-lg overflow-hidden border border-gray-200 shadow-md")}>
                    <Table >
                      <TableRow className="bg-black text-white hover:bg-black/80 border-r-none">
                        <TableCell className="text-center font-bold border-r">
                          Total ($)
                        </TableCell>
                        {(previewVersion === 'parcial' || previewVersion === 'false') && (
                          <>
                            <TableCell className="text-center font-bold border-r" colSpan={3}>
                              Rubro (%)
                            </TableCell>
                            <TableCell className="text-center font-bold border-r-none" colSpan={4}>
                              IACUMUL (%)
                            </TableCell>
                          </>
                        )}
                      </TableRow>

                      {/* Section totals values */}
                      <TableRow className="bg-black/50 hover:bg-black/35">
                        <TableCell className="text-center font-bold border-r">
                          ${Array.isArray(items) ? items.reduce((sum, item) => sum + ((item.quantity || 0) * (item.unitPrice || 0)), 0).toFixed(2) : '0.00'}
                        </TableCell>
                        {(previewVersion === 'parcial' || previewVersion === 'false') && (
                          <>
                            <TableCell className="text-center font-bold border-r" colSpan={3}>
                              {sectionRubros[tagIndex].toFixed(2)}%
                            </TableCell>
                            <TableCell className="text-center font-bold border-r-none" colSpan={2}>
                              {sectionIacums[tagIndex].toFixed(2)}%
                            </TableCell>
                          </>
                        )}
                      </TableRow>
                    </Table>
                  </div>
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </motion.div>
    </motion.div>
  )
}

================
File: components/presupuesto/SearchDialog.tsx
================
import { Dialog, DialogContent } from "@/components/ui/dialog"

interface SearchDialogProps {
  isOpen: boolean
  onOpenChange: (open: boolean) => void
  onElementSelect: (element: any) => void
  sections: string[]
  elements: any[]
}

export function SearchDialog({
  isOpen,
  onOpenChange,
  onElementSelect,
  sections,
  elements
}: SearchDialogProps) {
  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent>
        {/* Add search dialog content */}
      </DialogContent>
    </Dialog>
  )
}

================
File: components/sidebar/app-sidebar.tsx
================
"use client";

import * as React from "react";
import {
  AudioWaveform,
  Bot,
  BrainCogIcon,
  Coins,
  Command,
  DatabaseZapIcon,
  FilePlus,
  FlaskConicalIcon,
  FolderSearch2,
  Frame,
  GalleryVerticalEnd,
  HardHatIcon,
  House,
  LayoutTemplateIcon,
  Map,
  PieChart,
} from "lucide-react";

import { NavMain } from "@/components/sidebar/nav-main";
import { NavProjects } from "@/components/sidebar/nav-projects";
import { NavUser } from "@/components/sidebar/nav-user";
import { TeamSwitcher } from "@/components/sidebar/team-switcher";
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarRail,
} from "@/components/ui/sidebar";

// Modify the transform function to store icon keys
const transformDirectoryToNav = (
  structure: Record<string, any>,
  basePath: string = ""
): any[] => {
  const result: any[] = [];

  const findIconKey = (key: string) => {
    switch (key.toLowerCase()) {
      case "create":
        return "FilePlus";
      case "main":
        return "House";
      case "explore":
        return "FolderSearch2";
      case "api":
        return "BrainCogIcon";
      case "dashboard":
        return "LayoutTemplateIcon";
      case "db":
        return "DatabaseZapIcon";
      case "obras":
        return "HardHatIcon";
      case "presupuesto":
        return "Coins";
      case "uitest":
        return "FlaskConicalIcon";
      default:
        return "Bot"; // Default icon key
    }
  };

  for (const key in structure) {
    if (key === "files") continue;

    const folder = structure[key];
    const files = folder.files || [];
    const hasPageFile = files.includes("page.tsx");
    const subfolders = Object.keys(folder).filter(k => k !== "files");

    if (hasPageFile) {
      const iconKey = findIconKey(key);

      const items = transformDirectoryToNav(folder, `${basePath}/${key}`);
      result.push({
        title: capitalizeFirstLetter(key),
        url: `${basePath}/${key}`.replace(/\/+/g, "/"),
        iconKey: iconKey, // Store icon key
        items: [
          {
            title: "Main",
            url: `${basePath}/${key}`.replace(/\/+/g, "/"),
            iconKey: "House", // Use the Main icon key for the "Main" page
          },
          ...items
        ]
      });
    } else if (typeof folder === "object") {
      const iconKey = findIconKey(key);

      result.push({
        title: capitalizeFirstLetter(key),
        url: `${basePath}/${key}`.replace(/\/+/g, "/"),
        iconKey: iconKey, // Store icon key
        items: transformDirectoryToNav(folder, `${basePath}/${key}`)
      });
    }
  }

  return result;
}

// Map icon keys back to components
const iconMap = {
  FilePlus,
  House,
  FolderSearch2,
  BrainCogIcon,
  LayoutTemplateIcon,
  DatabaseZapIcon,
  HardHatIcon,
  Coins,
  FlaskConicalIcon,
  Bot
};
// Function to map icon keys back to components
const mapIconsToComponents = (navItems: { iconKey: keyof typeof iconMap; items: { iconKey: keyof typeof iconMap }[] }[]) => {
  return navItems.map(item => ({
    ...item,
    icon: iconMap[item.iconKey],
    items: item.items.map(subItem => ({
      ...subItem,
      icon: iconMap[subItem.iconKey]
    }))
  }));
};

const capitalizeFirstLetter = (string: string) => {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

export function AppSidebar({ mappedData }: { mappedData: { iconKey: keyof typeof iconMap; items: { iconKey: keyof typeof iconMap }[] }[] }) {

  const teams = [
    {
      name: "Acme Inc",
      logo: GalleryVerticalEnd,
      plan: "Enterprise",
    },
    {
      name: "Acme Corp.",
      logo: AudioWaveform,
      plan: "Startup",
    },
    {
      name: "Evil Corp.",
      logo: Command,
      plan: "Free",
    },
  ]

  const projects = [
    {
      name: "Design Engineering",
      url: "#",
      icon: Frame,
    },
    {
      name: "Sales & Marketing",
      url: "#",
      icon: PieChart,
    },
    {
      name: "Travel",
      url: "#",
      icon: Map,
    },
  ]

  const itemsWithIcons = mapIconsToComponents(mappedData)

  if (!mappedData) {
    return <Sidebar collapsible="icon" />;
  }

  return (
    <Sidebar collapsible="icon">
      <SidebarHeader>
        <TeamSwitcher teams={teams} />
      </SidebarHeader>
      <SidebarContent>
        <NavMain items={itemsWithIcons} />
        <NavProjects projects={projects} /> {/* Add projects if applicable */}
      </SidebarContent>
      <SidebarFooter>
        <NavUser user={{ name: "User", email: "user@example.com", avatar: "" }} />
      </SidebarFooter>
      <SidebarRail />
    </Sidebar>
  );
}

================
File: components/sidebar/nav-main.tsx
================
"use client";

import { ChevronRight, type LucideIcon } from "lucide-react";
import { usePathname } from "next/navigation";
import Link from "next/link";

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
} from "@/components/ui/sidebar";
import React from "react";

type SubItem = {
  title: string;
  url: string;
};

type NavItem = {
  title: string;
  url: string;
  icon?: LucideIcon;
  isActive?: boolean;
  items?: SubItem[];
};

export function NavMain({
  items,
}: {
  items: any;
}) {
  // Next.js client-side path
  const pathname = usePathname();

  // Check if a subitem is active
  const isSubItemActive = (subItems?: SubItem[]) =>
    subItems?.some((subItem) => subItem.url === pathname);

  return (
    <SidebarGroup>
      <SidebarGroupLabel>Platform</SidebarGroupLabel>
      <SidebarMenu>
        {items.map((item: any) => {
          const hasActiveSubItem = isSubItemActive(item.items);

          return item.items.length > 0 ? (
            <Collapsible
              key={item.title}
              asChild
              defaultOpen={item.isActive || hasActiveSubItem}
              className="group/collapsible"
            >
              <SidebarMenuItem>
                <CollapsibleTrigger asChild>
                  <SidebarMenuButton
                    tooltip={item.title}
                    className={
                      item.isActive || hasActiveSubItem
                        ? "bg-primary text-white"
                        : ""
                    }
                  >
                    {item.icon && Object.keys(item.icon).length !== 0 && (
                      <item.icon />
                    )}
                    <span>{item.title}</span>
                    <ChevronRight className="ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90" />
                  </SidebarMenuButton>
                </CollapsibleTrigger>
                <CollapsibleContent>
                  <SidebarMenuSub>
                    {item.items.map((subItem: any) => (
                      <SidebarMenuSubItem key={subItem.title}>
                        <SidebarMenuSubButton
                          asChild
                          className={
                            subItem.url === pathname
                              ? "bg-muted text-primary"
                              : ""
                          }
                        >
                          <Link href={subItem.url}>
                            <span>{subItem.title}</span>
                          </Link>
                        </SidebarMenuSubButton>
                      </SidebarMenuSubItem>
                    ))}
                  </SidebarMenuSub>
                </CollapsibleContent>
              </SidebarMenuItem>
            </Collapsible>
          ) : (
            <SidebarMenuItem key={item.title}>
              <SidebarMenuButton
                asChild
                className={
                  item.url === pathname
                    ? "bg-primary text-white"
                    : ""
                }
              >
                <Link href={item.url}>
                  {item.icon && Object.keys(item.icon).length !== 0 && (
                    <item.icon />
                  )}
                  <span>{item.title}</span>
                </Link>
              </SidebarMenuButton>
            </SidebarMenuItem>
          );
        })}
      </SidebarMenu>
    </SidebarGroup>
  );
}

================
File: components/sidebar/nav-projects.tsx
================
"use client"

import {
  Folder,
  Forward,
  MoreHorizontal,
  Trash2,
  type LucideIcon,
} from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"

export function NavProjects({
  projects,
}: {
  projects: {
    name: string
    url: string
    icon: LucideIcon
  }[]
}) {
  const { isMobile } = useSidebar()

  return (
    <SidebarGroup className="group-data-[collapsible=icon]:hidden">
      <SidebarGroupLabel>Projects</SidebarGroupLabel>
      <SidebarMenu>
        {projects.map((item) => (
          <SidebarMenuItem key={item.name}>
            <SidebarMenuButton asChild>
              <a href={item.url}>
                <item.icon />
                <span>{item.name}</span>
              </a>
            </SidebarMenuButton>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <SidebarMenuAction showOnHover>
                  <MoreHorizontal />
                  <span className="sr-only">More</span>
                </SidebarMenuAction>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                className="w-48 rounded-lg"
                side={isMobile ? "bottom" : "right"}
                align={isMobile ? "end" : "start"}
              >
                <DropdownMenuItem>
                  <Folder className="text-muted-foreground" />
                  <span>View Project</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <Forward className="text-muted-foreground" />
                  <span>Share Project</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Trash2 className="text-muted-foreground" />
                  <span>Delete Project</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </SidebarMenuItem>
        ))}
        <SidebarMenuItem>
          <SidebarMenuButton className="text-sidebar-foreground/70">
            <MoreHorizontal className="text-sidebar-foreground/70" />
            <span>More</span>
          </SidebarMenuButton>
        </SidebarMenuItem>
      </SidebarMenu>
    </SidebarGroup>
  )
}

================
File: components/sidebar/nav-user.tsx
================
"use client"

import {
  BadgeCheck,
  Bell,
  ChevronsUpDown,
  CreditCard,
  LogOut,
  Sparkles,
} from "lucide-react"

import {
  Avatar,
  AvatarFallback,
  AvatarImage,
} from "@/components/ui/avatar"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"

export function NavUser({
  user,
}: {
  user: {
    name: string
    email: string
    avatar: string
  }
}) {
  const { isMobile } = useSidebar()

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <Avatar className="h-8 w-8 rounded-lg">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback className="rounded-lg">CN</AvatarFallback>
              </Avatar>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">{user.name}</span>
                <span className="truncate text-xs">{user.email}</span>
              </div>
              <ChevronsUpDown className="ml-auto size-4" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            side={isMobile ? "bottom" : "right"}
            align="end"
            sideOffset={4}
          >
            <DropdownMenuLabel className="p-0 font-normal">
              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">CN</AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-semibold">{user.name}</span>
                  <span className="truncate text-xs">{user.email}</span>
                </div>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <Sparkles />
                Upgrade to Pro
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <BadgeCheck />
                Account
              </DropdownMenuItem>
              <DropdownMenuItem>
                <CreditCard />
                Billing
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Bell />
                Notifications
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuItem>
              <LogOut />
              Log out
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}

================
File: components/sidebar/team-switcher.tsx
================
"use client"

import * as React from "react"
import { ChevronsUpDown, Plus } from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"

export function TeamSwitcher({
  teams,
}: {
  teams: {
    name: string
    logo: React.ElementType
    plan: string
  }[]
}) {
  const { isMobile } = useSidebar()
  const [activeTeam, setActiveTeam] = React.useState(teams[0])

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <div className="flex aspect-square size-8 items-center justify-center rounded-lg bg1-sidebar-primary bg-primary text-sidebar-primary-foreground">
                <activeTeam.logo className="size-4" />
              </div>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-semibold">
                  {activeTeam.name}
                </span>
                <span className="truncate text-xs">{activeTeam.plan}</span>
              </div>
              <ChevronsUpDown className="ml-auto" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg"
            align="start"
            side={isMobile ? "bottom" : "right"}
            sideOffset={4}
          >
            <DropdownMenuLabel className="text-xs text-muted-foreground">
              Teams
            </DropdownMenuLabel>
            {teams.map((team, index) => (
              <DropdownMenuItem
                key={team.name}
                onClick={() => setActiveTeam(team)}
                className="gap-2 p-2"
              >
                <div className="flex size-6 items-center justify-center rounded-sm border">
                  <team.logo className="size-4 shrink-0" />
                </div>
                {team.name}
                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>
              </DropdownMenuItem>
            ))}
            <DropdownMenuSeparator />
            <DropdownMenuItem className="gap-2 p-2">
              <div className="flex size-6 items-center justify-center rounded-md border bg-background">
                <Plus className="size-4" />
              </div>
              <div className="font-medium text-muted-foreground">Add team</div>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}

================
File: components/submit-button.tsx
================
"use client";

import { Button } from "@/components/ui/button";
import { type ComponentProps } from "react";
import { useFormStatus } from "react-dom";

type Props = ComponentProps<typeof Button> & {
  pendingText?: string;
};

export function SubmitButton({
  children,
  pendingText = "Submitting...",
  ...props
}: Props) {
  const { pending } = useFormStatus();

  return (
    <Button type="submit" aria-disabled={pending} {...props}>
      {pending ? pendingText : children}
    </Button>
  );
}

================
File: components/supabase-logo.tsx
================
export default function SupabaseLogo() {
  return (
    <svg
      aria-label="Supabase logo"
      width="140"
      height="30"
      viewBox="0 0 115 23"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_4671_51136)">
        <g clipPath="url(#clip1_4671_51136)">
          <path
            d="M13.4028 21.8652C12.8424 22.5629 11.7063 22.1806 11.6928 21.2898L11.4954 8.25948H20.3564C21.9614 8.25948 22.8565 10.0924 21.8585 11.3353L13.4028 21.8652Z"
            fill="url(#paint0_linear_4671_51136)"
          />
          <path
            d="M13.4028 21.8652C12.8424 22.5629 11.7063 22.1806 11.6928 21.2898L11.4954 8.25948H20.3564C21.9614 8.25948 22.8565 10.0924 21.8585 11.3353L13.4028 21.8652Z"
            fill="url(#paint1_linear_4671_51136)"
            fillOpacity="0.2"
          />
          <path
            d="M9.79895 0.89838C10.3593 0.200591 11.4954 0.582929 11.5089 1.47383L11.5955 14.5041H2.84528C1.24026 14.5041 0.345103 12.6711 1.34316 11.4283L9.79895 0.89838Z"
            fill="#3ECF8E"
          />
        </g>
        <path
          d="M30.5894 13.3913C30.7068 14.4766 31.7052 16.3371 34.6026 16.3371C37.1279 16.3371 38.3418 14.7479 38.3418 13.1976C38.3418 11.8022 37.3824 10.6588 35.4836 10.2712L34.1131 9.98049C33.5846 9.88359 33.2323 9.5929 33.2323 9.12777C33.2323 8.58512 33.7804 8.17818 34.4656 8.17818C35.5618 8.17818 35.9729 8.89521 36.0513 9.45725L38.2243 8.97275C38.1069 7.94561 37.1867 6.22083 34.446 6.22083C32.3709 6.22083 30.844 7.63555 30.844 9.34094C30.844 10.6781 31.6856 11.7828 33.5454 12.1898L34.8179 12.4805C35.5618 12.6355 35.8555 12.9844 35.8555 13.4107C35.8555 13.9146 35.4444 14.3603 34.583 14.3603C33.4476 14.3603 32.8797 13.6626 32.8212 12.9068L30.5894 13.3913Z"
          fill="currentColor"
        />
        <path
          d="M46.6623 16.0464H49.1486C49.1094 15.717 49.0506 15.0581 49.0506 14.3216V6.51154H46.4468V12.0542C46.4468 13.1588 45.7813 13.934 44.6263 13.934C43.4126 13.934 42.8643 13.0813 42.8643 12.0154V6.51154H40.2606V12.5387C40.2606 14.6123 41.5918 16.2984 43.9215 16.2984C44.9393 16.2984 46.0556 15.9108 46.5841 15.0193C46.5841 15.4069 46.6231 15.8526 46.6623 16.0464Z"
          fill="currentColor"
        />
        <path
          d="M54.433 19.7286V15.1162C54.9027 15.7558 55.8817 16.279 57.213 16.279C59.9341 16.279 61.7545 14.1472 61.7545 11.2596C61.7545 8.43021 60.1298 6.29842 57.3108 6.29842C55.8623 6.29842 54.7855 6.93792 54.3548 7.67439V6.51159H51.8295V19.7286H54.433ZM59.19 11.279C59.19 12.9845 58.133 13.9728 56.8017 13.9728C55.4708 13.9728 54.394 12.9651 54.394 11.279C54.394 9.59299 55.4708 8.6046 56.8017 8.6046C58.133 8.6046 59.19 9.59299 59.19 11.279Z"
          fill="currentColor"
        />
        <path
          d="M63.229 13.4495C63.229 14.9417 64.4818 16.3177 66.5375 16.3177C67.9662 16.3177 68.8865 15.6588 69.3758 14.9029C69.3758 15.2712 69.4149 15.7944 69.4737 16.0464H71.862C71.8033 15.7169 71.7449 15.0386 71.7449 14.5348V9.84482C71.7449 7.92622 70.6093 6.22083 67.5555 6.22083C64.9713 6.22083 63.5811 7.86807 63.4248 9.36033L65.7347 9.84482C65.8131 9.0115 66.4395 8.29445 67.5747 8.29445C68.6713 8.29445 69.1998 8.85646 69.1998 9.53475C69.1998 9.86421 69.0238 10.1355 68.4755 10.2131L66.1068 10.5619C64.5015 10.7945 63.229 11.744 63.229 13.4495ZM67.0854 14.3991C66.2438 14.3991 65.8325 13.8565 65.8325 13.2945C65.8325 12.558 66.361 12.1898 67.0268 12.0929L69.1998 11.7634V12.1898C69.1998 13.8759 68.1818 14.3991 67.0854 14.3991Z"
          fill="currentColor"
        />
        <path
          d="M76.895 16.0465V14.8837C77.4038 15.6976 78.4217 16.279 79.7531 16.279C82.4941 16.279 84.2951 14.1278 84.2951 11.2403C84.2951 8.4108 82.6701 6.25965 79.851 6.25965C78.4217 6.25965 77.3648 6.8798 76.934 7.55806V2.01546H74.3696V16.0465H76.895ZM81.6911 11.2596C81.6911 13.0038 80.6341 13.9728 79.3028 13.9728C77.9912 13.9728 76.895 12.9845 76.895 11.2596C76.895 9.51543 77.9912 8.56584 79.3028 8.56584C80.6341 8.56584 81.6911 9.51543 81.6911 11.2596Z"
          fill="currentColor"
        />
        <path
          d="M85.7692 13.4495C85.7692 14.9417 87.022 16.3177 89.0776 16.3177C90.5065 16.3177 91.4269 15.6588 91.916 14.9029C91.916 15.2712 91.9554 15.7944 92.014 16.0464H94.4023C94.3439 15.7169 94.2851 15.0386 94.2851 14.5348V9.84482C94.2851 7.92622 93.1495 6.22083 90.0955 6.22083C87.5115 6.22083 86.1216 7.86807 85.965 9.36033L88.2747 9.84482C88.3533 9.0115 88.9798 8.29445 90.1149 8.29445C91.2115 8.29445 91.74 8.85646 91.74 9.53475C91.74 9.86421 91.5638 10.1355 91.0156 10.2131L88.647 10.5619C87.0418 10.7945 85.7692 11.744 85.7692 13.4495ZM89.6258 14.3991C88.784 14.3991 88.3727 13.8565 88.3727 13.2945C88.3727 12.558 88.9012 12.1898 89.5671 12.0929L91.74 11.7634V12.1898C91.74 13.8759 90.722 14.3991 89.6258 14.3991Z"
          fill="currentColor"
        />
        <path
          d="M96.087 13.3913C96.2042 14.4766 97.2028 16.3371 100.1 16.3371C102.626 16.3371 103.839 14.7479 103.839 13.1976C103.839 11.8022 102.88 10.6588 100.981 10.2712L99.6105 9.98049C99.082 9.88359 98.7299 9.5929 98.7299 9.12777C98.7299 8.58512 99.2778 8.17818 99.963 8.17818C101.06 8.17818 101.471 8.89521 101.549 9.45725L103.722 8.97275C103.604 7.94561 102.684 6.22083 99.9436 6.22083C97.8683 6.22083 96.3416 7.63555 96.3416 9.34094C96.3416 10.6781 97.183 11.7828 99.043 12.1898L100.316 12.4805C101.06 12.6355 101.353 12.9844 101.353 13.4107C101.353 13.9146 100.942 14.3603 100.081 14.3603C98.9451 14.3603 98.3776 13.6626 98.3188 12.9068L96.087 13.3913Z"
          fill="currentColor"
        />
        <path
          d="M107.794 10.1937C107.852 9.32158 108.596 8.31381 109.947 8.31381C111.435 8.31381 112.062 9.24406 112.101 10.1937H107.794ZM112.355 12.6743C112.042 13.527 111.376 14.1278 110.163 14.1278C108.87 14.1278 107.794 13.2169 107.735 11.9573H114.626C114.626 11.9184 114.665 11.5309 114.665 11.1626C114.665 8.10064 112.884 6.22083 109.908 6.22083C107.441 6.22083 105.17 8.19753 105.17 11.2402C105.17 14.4572 107.5 16.3371 110.143 16.3371C112.512 16.3371 114.039 14.9611 114.528 13.3138L112.355 12.6743Z"
          fill="currentColor"
        />
      </g>
      <defs>
        <linearGradient
          id="paint0_linear_4671_51136"
          x1="11.4954"
          y1="11.1486"
          x2="19.3439"
          y2="14.4777"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="#249361" />
          <stop offset="1" stopColor="#3ECF8E" />
        </linearGradient>
        <linearGradient
          id="paint1_linear_4671_51136"
          x1="8.00382"
          y1="6.42177"
          x2="11.5325"
          y2="13.1398"
          gradientUnits="userSpaceOnUse"
        >
          <stop />
          <stop offset="1" stopOpacity="0" />
        </linearGradient>
        <clipPath id="clip0_4671_51136">
          <rect
            width="113.85"
            height="21.8943"
            fill="currentColor"
            transform="translate(0.922119 0.456161)"
          />
        </clipPath>
        <clipPath id="clip1_4671_51136">
          <rect
            width="21.3592"
            height="21.8943"
            fill="currentColor"
            transform="translate(0.919006 0.497101)"
          />
        </clipPath>
      </defs>
    </svg>
  );
}

================
File: components/Table/custom-table.tsx
================
"use client";

import React, { useState, useEffect, useMemo } from "react";
import {
  ChevronUp,
  ChevronDown,
  ArrowUpDown,
  DollarSign,
  Tag,
  Ruler,
  HammerIcon,
  FilterIcon,
} from "lucide-react";
import { useRouter, useSearchParams } from "next/navigation";
import {
  useReactTable,
  getCoreRowModel,
  ColumnDef,
  SortingState,
  getSortedRowModel,
  getFilteredRowModel,
  Column,
} from "@tanstack/react-table";
import { motion } from "framer-motion";

import { Table, TableHeader, TableHead, TableRow, TableBody, TableCell } from "@/components/ui/table";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

import { DataTablePagination } from "./DataTablePagination";
import { DataTableFloatingToolbar } from "./DataTableFloatingToolbar";
import { Tooltip, TooltipContent, TooltipTrigger } from "../ui/tooltip";
import { useQuery } from "@tanstack/react-query";

// ─────────────────────────────────────────────────────
// Types
// ─────────────────────────────────────────────────────
export interface ElementRow {
  id: string;
  nombre: string;
  unidad: string;
  precio: number;
  fecha: string;
  categoria: string;
}

// ─────────────────────────────────────────────────────
// Helper: highlight text
// ─────────────────────────────────────────────────────
function highlightText(text: string, searchTerm: string): React.ReactNode {
  if (!searchTerm) return text;
  const regex = new RegExp(`(${searchTerm})`, "gi");
  const parts = text.split(regex);
  return parts.map((part, index) =>
    regex.test(part) ? (
      <span key={index} className="bg-yellow-200 font-bold">
        {part}
      </span>
    ) : (
      part
    )
  );
}

function highlightPlainString(text: string, searchTerm: string) {
  return String(highlightText(text, searchTerm));
}

// ─────────────────────────────────────────────────────
// Reusable sorted-column header with icon + up/down
// ─────────────────────────────────────────────────────
interface HeaderWithSortProps {
  label: string;
  column: Column<any, any>;
  icon?: React.ComponentType<any>;
}
const HeaderWithSort: React.FC<HeaderWithSortProps> = ({ label, column, icon: Icon }) => {
  const canSort = column.getCanSort();
  const sorted = column.getIsSorted();

  return (
    <Button
      variant="ghost"
      onClick={column.getToggleSortingHandler()}
      className="flex items-center space-x-1 -ml-3 px-3"
      disabled={!canSort}
    >
      <div className="flex items-center space-x-2">
        {Icon && <Icon className="h-4 w-4 text-gray-500" />}
        <span>{label}</span>
        {canSort &&
          (sorted === "asc" ? (
            <ChevronUp className="h-4 w-4" />
          ) : sorted === "desc" ? (
            <ChevronDown className="h-4 w-4" />
          ) : (
            <ArrowUpDown className="h-4 w-4" />
          ))}
      </div>
    </Button>
  );
};

// ─────────────────────────────────────────────────────
// Animated wrapper for TableCells
// ─────────────────────────────────────────────────────
interface AnimatedTableCellProps {
  children: React.ReactNode;
  className?: string;
}
const AnimatedTableCell: React.FC<AnimatedTableCellProps> = ({ children, className }) => {
  return (
    <motion.div
      layout
      initial={{ width: 0 }}
      animate={{ width: "auto" }}
      exit={{ width: 0 }}
      transition={{ duration: 0.2 }}
      className={className}
    >
      {children}
    </motion.div>
  );
};

// ─────────────────────────────────────────────────────
// The Main Table Component
// ─────────────────────────────────────────────────────
export default function CustomTable() {
  const router = useRouter();
  const searchParams = useSearchParams();

  const obraParam = searchParams.get("obra");

  // 1) Table Data & Local States
  const [tableData, setTableData] = useState<ElementRow[]>([]);
  const [totalRows, setTotalRows] = useState(0);

  // 2) Sorting, Filtering & Pagination (initialized from URL if needed)
  const [sorting, setSorting] = useState<SortingState>([]);
  const [globalFilter, setGlobalFilter] = useState("");
  const [pagination, setPagination] = useState({
    pageIndex: parseInt(searchParams.get("page") ?? "0") || 0,
    pageSize: parseInt(searchParams.get("size") ?? "10") || 10,
  });

  // 3) Build a "cache key" for the current combination of parameters.
  const cacheKey = useMemo(() => {
    const sortKey = sorting.map((s) => s.id + ":" + (s.desc ? "desc" : "asc")).join(",");
    return `${globalFilter}__${sortKey}__size:${pagination.pageSize}`;
  }, [globalFilter, sorting, pagination.pageSize]);

  // 4) Row Selection
  const [selectedIds, setSelectedIds] = useState<Set<string>>(new Set());

  // 5) Define Table Columns
  const columns = useMemo<ColumnDef<ElementRow>[]>(() => [
    {
      id: "select",
      header: ({ table }) => (
        <Checkbox
          checked={table.getIsAllPageRowsSelected()}
          onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
          aria-label="Select all"
          className="translate-y-[2px]"
        />
      ),
      cell: ({ row }) => (
        <Checkbox
          checked={row.getIsSelected()}
          onCheckedChange={(value) => row.toggleSelected(!!value)}
          aria-label="Select row"
          className="translate-y-[2px]"
        />
      ),
      enableSorting: false,
      enableHiding: false,
    },
    {
      accessorKey: "nombre",
      header: ({ column }) => (
        <HeaderWithSort label="Name" column={column} icon={Tag} />
      ),
      cell: ({ getValue }) => {
        const value = getValue() as string;
        return <div className="flex items-center"><span className="truncate">{value}</span></div>;
      },
    },
    {
      accessorKey: "unidad",
      header: ({ column }) => (
        <HeaderWithSort label="Unit" column={column} icon={Ruler} />
      ),
    },
    {
      accessorKey: "precio",
      header: ({ column }) => (
        <HeaderWithSort label="Price" column={column} icon={DollarSign} />
      ),
      cell: ({ getValue }) => {
        const value = getValue() as number;
        return new Intl.NumberFormat("es-AR", {
          style: "currency",
          currency: "ARS",
        }).format(value);
      },
    },
    {
      accessorKey: "categoria",
      header: ({ column }) => (
        <HeaderWithSort label="Category" column={column} icon={HammerIcon} />
      ),
    },
    {
      accessorKey: "fecha",
      header: ({ column }) => (
        <HeaderWithSort label="Price Date" column={column} />
      ),
      cell: ({ getValue }) => {
        const value = getValue() as string;
        return value ? new Date(value).toLocaleDateString() : "-";
      },
    },
  ], []);

  const table = useReactTable({
    data: tableData,
    columns,
    pageCount: Math.ceil(totalRows / pagination.pageSize),
    state: {
      sorting,
      globalFilter,
      pagination,
      rowSelection: Object.fromEntries([...selectedIds].map((id) => [id, true])),
    },
    onSortingChange: setSorting,
    onGlobalFilterChange: setGlobalFilter,
    onPaginationChange: setPagination,
    globalFilterFn,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getSortedRowModel: getSortedRowModel(),
    manualPagination: true,
    manualSorting: true,
    manualFiltering: true,
    enableRowSelection: true,
    getRowId: (row) => row.id,
    onRowSelectionChange: (updater) => {
      const newSelection =
        typeof updater === "function"
          ? updater(Object.fromEntries([...selectedIds].map((id) => [id, true])))
          : updater;
      setSelectedIds(new Set(Object.keys(newSelection)));
    },
  });

  // 6) Data Fetching with React Query using the object syntax.
  const { data: queryData, isLoading, error } = useQuery({
    queryKey: ["items", pagination.pageIndex, pagination.pageSize, sorting, globalFilter],
    queryFn: async () => {
      const sortParam = sorting
        .map((sort) => `${sort.id}:${sort.desc ? "desc" : "asc"}`)
        .join(",");
      const url = `/api/items?page=${pagination.pageIndex}&limit=${pagination.pageSize}&search=${globalFilter}&sort=${sortParam}`;
      const res = await fetch(url);
      if (!res.ok) {
        throw new Error(`Failed to fetch data: ${res.statusText}`);
      }
      const data = await res.json();
      const items = data.items || [];
      const rows = items.map((item: any) => ({
        id: item.id.toString(),
        nombre: item.nombre,
        unidad: item.unidad,
        precio: item.precios?.[0]?.precio || 0,
        fecha: item.precios?.[0]?.fecha || "",
        categoria: item.categoria,
      }));
      return { rows, total: data.total || 0 };
    },
    keepPreviousData: true,
  });

  useEffect(() => {
    if (queryData) {
      setTableData(queryData.rows);
      setTotalRows(queryData.total);
    }
  }, [queryData]);

  // Update URL parameters when pagination changes.
  useEffect(() => {
    if (searchParams) {
      const currentPage = searchParams.get("page");
      const currentSize = searchParams.get("size");
      if (
        currentPage !== pagination.pageIndex.toString() ||
        currentSize !== pagination.pageSize.toString()
      ) {
        const params = new URLSearchParams(searchParams.toString());
        params.set("page", pagination.pageIndex.toString());
        params.set("size", pagination.pageSize.toString());
        router.replace(`?${params.toString()}`, { scroll: false });
      }
    }
  }, [pagination.pageIndex, pagination.pageSize]);

  // 7) Handlers for Row Actions
  function handleToggleSelect(id: string) {
    setSelectedIds((prev) => {
      const newSet = new Set(prev);
      if (newSet.has(id)) newSet.delete(id);
      else newSet.add(id);
      return newSet;
    });
  }

  function handleEdit(itemId: string, field: keyof ElementRow, value: string) {
    setTableData((prev) =>
      prev.map((row) => (row.id === itemId ? { ...row, [field]: value } : row))
    );
  }

  function handleDeleteSelected() {
    setTableData((prev) => prev.filter((row) => !selectedIds.has(row.id)));
    setSelectedIds(new Set());
  }

  function handleDuplicateSelected() {
    const newRows: ElementRow[] = [];
    for (const row of tableData) {
      if (selectedIds.has(row.id)) {
        const newId = `${row.id}-copy-${Math.floor(Math.random() * 1000)}`;
        newRows.push({ ...row, id: newId });
      }
    }
    setTableData((prev) => [...prev, ...newRows]);
  }

  function handleExecuteSelected() {
    console.log("Execute action for selected:", [...selectedIds]);
    router.push(`/presupuesto?selectedIds=${[...selectedIds].join(",")}`);
  }

  // 8) Render
  return (
    <div className="container max-w-full p-4 flex flex-col gap-4 relative">
      {obraParam && (
        <div className="mb-4">
          <Card className="p-4">
            <h2 className="text-xl font-semibold flex items-center gap-2">
              <HammerIcon className="h-5 w-5" />
              Obra: {decodeURIComponent(obraParam)}
            </h2>
          </Card>
        </div>
      )}

      <div className="flex justify-between items-center">
        <div className="flex gap-3">
          <Input
            placeholder="Buscar..."
            value={globalFilter ?? ""}
            onChange={(e) => setGlobalFilter(e.target.value)}
          />
          {selectedIds.size > 0 && (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="secondary" className="h-10">
                  Actions ({selectedIds.size})
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent>
                <DropdownMenuLabel>Bulk Actions</DropdownMenuLabel>
                <DropdownMenuItem onClick={handleDeleteSelected}>Delete</DropdownMenuItem>
                <DropdownMenuItem onClick={handleDuplicateSelected}>Duplicate</DropdownMenuItem>
                <DropdownMenuItem onClick={handleExecuteSelected}>Execute</DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          )}
        </div>

        <div className="flex gap-2">
          <Button variant="secondary">
            <FilterIcon />
          </Button>
          <Button variant="secondary">Actions ({selectedIds.size})</Button>
          <Button variant="default">Actions</Button>
        </div>
      </div>

      <Card className="max-h-[80vh] overflow-auto rounded-lg border shadow-3sm">
        <Table className="w-full">
          <TableHeader className="shadow-2sm">
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead
                    key={header.id}
                    colSpan={header.colSpan}
                    className={`py-0 px-4 ${header.column.id === "id" ? "w-2 p-0" : ""
                      } ${header.column.id === "selection"
                        ? "flex items-center justify-center pl-2"
                        : ""
                      }`}
                  >
                    {header.isPlaceholder
                      ? null
                      : typeof header.column.columnDef.header === "function"
                        ? header.column.columnDef.header(header.getContext())
                        : header.column.columnDef.header}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody className="text-foreground-dim">
            {table.getRowModel().rows.map((row) => (
              <TableRow key={row.id} className="h-10">
                {row.getVisibleCells().map((cell) => (
                  <TableCell
                    key={cell.id}
                    className={`py-0 px-4 ${cell.column.id === "id" || cell.column.id === "selection"
                        ? "text-center align-middle"
                        : ""
                      }`}
                  >
                    <AnimatedTableCell>
                      {typeof cell.column.columnDef.cell === "function"
                        ? cell.column.columnDef.cell(cell.getContext())
                        : cell.getValue()}
                    </AnimatedTableCell>
                  </TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </Card>

      <DataTableFloatingToolbar table={table} data={tableData} columnsConfig={table.getAllColumns()} />

      <DataTablePagination
        table={table}
        isLoading={isLoading}
        totalPages={Math.ceil(totalRows / pagination.pageSize)}
      />
    </div>
  );
}

function globalFilterFn(row: any, columnId: string, filterValue: string) {
  const cellValue = row.getValue(columnId);
  if (cellValue == null) return false;
  const lower = filterValue.toLowerCase();
  if (typeof cellValue === "string") {
    return cellValue.toLowerCase().includes(lower);
  }
  if (typeof cellValue === "number") {
    return cellValue.toString().includes(lower);
  }
  if (Array.isArray(cellValue)) {
    return cellValue.some((tag: string) => tag.toLowerCase().includes(lower));
  }
  return false;
}

function isTextTruncated(text: string, maxLength: number): boolean {
  return text.length > maxLength;
}

================
File: components/Table/DataTableFacetedFilter.tsx
================
// tableComponent/Components/DataTableFacetedFilter.tsx
import * as React from "react"
import { Column } from "@tanstack/react-table"
import { Label } from "../ui/label.tsx"
import { CheckIcon, PlusCircleIcon } from "lucide-react"
import { Button } from "../ui/button.tsx"
import { Badge } from "../ui/badge.tsx"
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from "../ui/command.tsx"
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover.tsx"
import { RadioGroup, RadioGroupItem } from "../ui/radio-group.tsx"
import { Separator } from "../ui/separator.tsx"
import { cn } from "@/lib/utils.ts"

interface DataTableFacetedFilterProps<TData, TValue> {
  column?: Column<TData, TValue>
  title?: string
  options: {
    label: string
    value: string
    icon?: React.ComponentType<{ className?: string }>
  }[]
  onResetFilters: () => void // Add this new prop

}

export default function DataTableFacetedFilter<TData, TValue>({
  column,
  title,
  options,
  onResetFilters, // Add this new prop

}: DataTableFacetedFilterProps<TData, TValue>) {
  const facets = column?.getFacetedUniqueValues()
  // const selectedValues = new Set(column?.getFilterValue() as string[])
  const [selectedValues, setSelectedValues] = React.useState(new Set());

  React.useEffect(() => {
    // Initialize selectedValues based on column's filter value
    const initialFilterValue = column?.getFilterValue() as string[] | undefined;
    if (initialFilterValue && Array.isArray(initialFilterValue)) {
      setSelectedValues(new Set(initialFilterValue));
    }
  }, [column]);

  const handleSelect = (value: string) => {
    const newSelectedValues = new Set(selectedValues);
    if (newSelectedValues.has(value)) {
      newSelectedValues.delete(value);
    } else {
      if (options.length === 2) {
        // If there are only two options, clear the previous selection
        newSelectedValues.clear();
      }
      newSelectedValues.add(value);
    }
    setSelectedValues(newSelectedValues);
    const filterValues = Array.from(newSelectedValues);
    column?.setFilterValue(filterValues.length ? filterValues : undefined);
  };

  // Add this effect to listen for filter resets
  React.useEffect(() => {
    const handleReset = () => {
      setSelectedValues(new Set());
    };

    // Call handleReset directly when onResetFilters is called
    onResetFilters();

    return () => {
      // No cleanup needed since we're not registering a callback
    };
  }, [onResetFilters]);

  const renderCheckbox = () => (
    // @ts-ignore
    <CommandList>
      {/* @ts-ignore */}
      <CommandEmpty>No results found.</CommandEmpty>
      {/* @ts-ignore */}
      <CommandGroup>
        {/* @ts-ignore */}
        <CommandInput placeholder={title} />

        {options.map((option) => {
          const isSelected = selectedValues.has(option.value);
          return (
            // @ts-ignore
            <CommandItem
              key={option.value}
              onSelect={() => handleSelect(option.value)}
            >
              <div
                className={cn(
                  "tw-mr-2 tw-flex tw-h-4 tw-w-4 tw-items-center tw-justify-center tw-rounded-sm tw-border tw-border-primary",
                  isSelected
                    ? "tw-bg-primary tw-text-primary-foreground"
                    : "tw-opacity-50 [&_svg]:tw-invisible"
                )}
              >
                <CheckIcon className={cn("tw-h-4 tw-w-4")} />
              </div>
              {option.icon && (
                <option.icon className="tw-mr-2 tw-h-4 tw-w-4 tw-text-muted-foreground" />
              )}
              <span>{option.label}</span>
              {facets?.get(option.value) && (
                <span className="tw-ml-auto tw-flex tw-h-4 tw-w-4 tw-items-center tw-justify-center tw-font-mono tw-text-xs">
                  {facets.get(option.value)}
                </span>
              )}
            </CommandItem>
          );
        })}
      </CommandGroup>
    </CommandList>
  );

  const renderRadioGroup = ({ options, selectedValues, handleSelect }: { options: any, selectedValues: any, handleSelect: any }) => {
    return (
      <RadioGroup className="tw-flex tw-flex-col tw-py-2" value={[...selectedValues].length > 0 ? [...selectedValues][0] : ''}>
        {options.map((option: any) => (
          <div key={option.value} className="tw-flex tw-items-center tw-space-x-2 tw-px-3 tw-py-2">
            <RadioGroupItem onClick={() => handleSelect(option.value)} value={option.value} id={`radio-${option.value}`} />
            {option.icon && (
              <option.icon className="tw-mr-2 tw-h-4 tw-w-4 tw-text-muted-foreground" />
            )}
            <Label className="tw-flex tw-flex-1" htmlFor={`radio-${option.value}`}>{option.label}</Label>
          </div>
        ))}
      </RadioGroup>
    )
  }

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm" className="tw-h-8 tw-border-dashed">
          <PlusCircleIcon className="lg:tw-mr-2 lg:tw-h-4 lg:tw-w-4 tw-h-5 tw-w-5" />
          <span className="tw-hidden lg:tw-flex">
            {title}
          </span>
          {selectedValues?.size > 0 && (
            <>
              <Separator orientation="vertical" className="tw-mx-2 tw-h-4" />
              <Badge
                variant="secondary"
                className="tw-rounded-sm tw-px-1 tw-font-normal lg:tw-hidden"
              >
                {selectedValues.size}
              </Badge>
              <div className="tw-hidden tw-space-x-1 lg:tw-flex">
                {selectedValues.size > 2 ? (
                  <Badge
                    variant="secondary"
                    className="tw-rounded-sm tw-px-1 tw-font-normal"
                  >
                    {selectedValues.size} selected
                  </Badge>
                ) : (
                  options
                    .filter((option) => selectedValues.has(option.value))
                    .map((option) => (
                      <Badge
                        variant="secondary"
                        key={option.value}
                        className="tw-rounded-sm tw-px-1 tw-font-normal"
                      >
                        {option.label}
                      </Badge>
                    ))
                )}
              </div>
            </>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="tw-w-[200px] tw-p-0 tw-bg-background" align="start">
        {/* @ts-ignore */}
        <Command>
          {options.length === 2 ? renderRadioGroup({ options, selectedValues, handleSelect }) : renderCheckbox()}

        </Command>
      </PopoverContent>
    </Popover>
  )
}

================
File: components/Table/DataTableFloatingToolbar.tsx
================
"use client";

import * as React from "react"
import { Table } from "@tanstack/react-table";
import { CheckCircle, CrossIcon, Download, PlusCircle, Trash2Icon, XIcon } from "lucide-react";
import { Input } from "../ui/input";
import { Button } from "../ui/button";
import { DropdownMenu, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "../ui/dropdown-menu";
import { useToast } from "../../hooks/use-toast";
import DataTableFacetedFilter from "./DataTableFacetedFilter";
import { motion, AnimatePresence } from "framer-motion";
import { Separator } from "@radix-ui/react-dropdown-menu";

interface DataTableToolbarProps<TData> {
  table: Table<TData>;
  data: any;
  columnsConfig: any;
}

export function DataTableFloatingToolbar<TData>({
  table,
  data,
  columnsConfig,
}: DataTableToolbarProps<TData>) {
  const selectedRows = table.getSelectedRowModel().rows.map(row => row.original);

  return (
    <AnimatePresence>
      {selectedRows.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 10 }}
          exit={{ opacity: 0, y: 30 }}
          className="flex flex-col justify-center items-center gap-2 absolute h-10 w-[450px] rounded-lg shadow-simple bg-black -bottom-10 left-[35%]"
        >
          <div className="flex items-center justify-between p-2">
            <div className="flex items-center gap-2">
              <span className="text-sm text-white">
                {table.getFilteredSelectedRowModel().rows.length} selected
              </span>
              <Separator className="bg-[#ffffff40] h-8 w-[1px]" />
            </div>
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => { }}
                className="text-white hover:text-white/60"
              >
                <PlusCircle className="h-4 w-4 mr-2" />
                Duplicate
              </Button>

              <Separator className="bg-[#ffffff40] h-8 w-[1px]" />

              <Button
                variant="ghost"
                size="sm"
                onClick={() => { }}
                className="text-[hsl(var(--red-400))] hover:text-[hsl(var(--red-600))]"
              >
                <Trash2Icon className="h-4 w-4 mr-2" />
                Delete
              </Button>

              <Separator className="bg-[#ffffff40] h-8 w-[1px]" />

              <Button
                variant="ghost"
                size="sm"
                onClick={() => { }}
                className="text-white hover:text-white/60"
              >
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

================
File: components/Table/DataTablePagination.tsx
================
// tableComponent/Components/DataTablePagination.tsx

"use client";
import * as React from "react"

import { Table } from "@tanstack/react-table";
import { ChevronLeft, ChevronLeftIcon, ChevronRight, ChevronRightIcon, ChevronsLeft, ChevronsRight } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { Button } from "../ui/button";

interface DataTablePaginationProps<TData> {
  table: Table<TData>;
  isLoading?: boolean;
  totalPages: number;
}

export function DataTablePagination<TData>({
  table,
  isLoading = false,
  totalPages,
}: DataTablePaginationProps<TData>) {
  return (
    <div className="flex items-center justify-between px-2">
      <div className="hidden lg:flex flex-1 text-sm text-muted-foreground">
        {table.getFilteredSelectedRowModel().rows.length} de{" "}
        {table.getFilteredRowModel().rows.length} fila(s) seleccionadas.
      </div>
      <div className="flex items-center md:space-x-6 lg:space-x-8">
        <div className="hidden lg:flex items-center space-x-2 flex flex-1">
          {/* Texto para traducir */}
          {/* <p className="text-sm font-medium whitespace-nowrap">Filas por página</p> */}
          <Select
            value={`${table.getState().pagination.pageSize}`}
            onValueChange={(value) => {
              table.setPageSize(Number(value));
            }}
          >
            <SelectTrigger className="h-8 w-[70px]">
              <SelectValue placeholder={table.getState().pagination.pageSize} />
            </SelectTrigger>
            <SelectContent side="top">
              {[10, 20, 30, 40, 50].map((pageSize) => (
                <SelectItem key={pageSize} value={`${pageSize}`}>
                  {pageSize}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="flex max-w-[150px] items-center justify-center text-sm font-medium pr-3 lg:pr-none">
          Página {table.getState().pagination.pageIndex + 1} de {totalPages}
        </div>
        <div className="flex items-center lg:space-x-2">
          <Button
            variant="ghost"
            size="icon"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(0)}
            disabled={!table.getCanPreviousPage() || isLoading}
          >
            <span className="sr-only">Go to first page</span>
            <ChevronsLeft className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 p-0"
            onClick={() => table.previousPage()}
            disabled={!table.getCanPreviousPage() || isLoading}
          >
            <span className="sr-only">Go to previous page</span>
            <ChevronLeft className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8 p-0"
            onClick={() => table.nextPage()}
            disabled={!table.getCanNextPage() || isLoading}
          >
            <span className="sr-only">Go to next page</span>
            <ChevronRight className="h-4 w-4" />
          </Button>
          <Button
            variant="ghost"
            size="icon"
            className="hidden h-8 w-8 p-0 lg:flex"
            onClick={() => table.setPageIndex(totalPages - 1)}
            disabled={!table.getCanNextPage() || isLoading}
          >
            <span className="sr-only">Go to last page</span>
            <ChevronsRight className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  );
}

================
File: components/Table/DataTableToolbar.tsx
================
// tableComponent/Components/DataTableToolbar.tsx

"use client";

import * as React from "react"
import { Table } from "@tanstack/react-table";
import { CheckCircle, CrossIcon, Download, PlusCircle } from "lucide-react";
import { Input } from "../ui/input.tsx";
import { Button } from "../ui/button.tsx";
import { DropdownMenu, DropdownMenuContent, DropdownMenuGroup, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from "../ui/dropdown-menu.tsx";
import { useToast } from "../../hooks/use-toast.ts";
import DataTableFacetedFilter from "./DataTableFacetedFilter";

interface DataTableToolbarProps<TData> {
  table: Table<TData>;
  data: any;
  columnsConfig: any;
  globalFilter: string | null;
  setGlobalFilter: (filterValue: string) => void;
}
export function DataTableToolbar<TData>({
  table,
  data,
  columnsConfig,
  globalFilter,
  setGlobalFilter,
}: DataTableToolbarProps<TData>) {
  const isFiltered = table.getState().columnFilters.length > 0;
  const selectedRows = table.getSelectedRowModel().rows.map(row => row.original);
  const filterColumn = columnsConfig?.config?.textInputFilter || "id"; // Use the first column as the default filter column
  const { toast } = useToast()

  // Add this state to manage filter reset callbacks
  const [resetCallbacks, setResetCallbacks] = React.useState<(() => void)[]>([]);

  // Add this function to register reset callbacks
  const registerResetCallback = React.useCallback((callback: () => void) => {
    setResetCallbacks(prev => [...prev, callback]);
  }, []);

  const handleResetFilters = () => {
    table.resetColumnFilters();
    setGlobalFilter("");
    // Call all registered reset callbacks
    resetCallbacks.forEach(callback => callback());
  };

  const isValidDate = (value: any) => {
    return (
      (value instanceof Date && !isNaN(value as any)) ||
      (typeof value === 'string' &&
        /\d{2,4}-\d{1,2}-\d{1,2}|\d{1,2}\/\d{1,2}\/\d{2,4}/.test(value) &&
        !isNaN(new Date(value).getTime()))
    );
  };

  const handleAction = (action: any) => {
    if (action.value === 'export') {
      // handleExport();
    } else if (action.value === 'delete') {
      // Placeholder for delete action
      console.log("Delete action triggered");
    }
  };

  const actions = [
    { value: 'export', label: 'Export CSV' },
    // { value: 'delete', label: 'Delete' }
  ];

  const handleFilterChange = (event: any) => {
    if (filterColumn === "global") return setGlobalFilter(event.target.value);
    else return table.getColumn(filterColumn)?.setFilterValue(event.target.value);
  };


  return (
    <div className="tw-flex tw-flex-col tw-justify-center tw-items-start tw-gap-2">
      <div className="tw-flex tw-flex-col lg:tw-flex-row lg:tw-items-center tw-items-start tw-justify-between tw-w-full tw-gap-3 lg:tw-gap-none">
        <div className="tw-flex tw-flex-1 tw-items-center  tw-space-x-2 tw-text-sm">
          {/* Texto para traducir */}
          <Input
            placeholder={filterColumn !== "global" ? `Filtrar ${table.getColumn(filterColumn)?.columnDef.header} ...` : 'Buscar ...'}
            value={globalFilter ? globalFilter : (table.getColumn(filterColumn)?.getFilterValue() as string)}
            onChange={handleFilterChange}
            className="tw-h-8 tw-w-[150px] lg:tw-w-[250px]"
          />
          {columnsConfig.columns?.map((col: any) => (
            col.filterType && table.getColumn(col.accessorKey) && col.filterOptions && (
              <DataTableFacetedFilter
                key={col.accessorKey}
                column={table.getColumn(col.accessorKey)}
                title={col.header}
                options={col.filterOptions}
                onResetFilters={() => registerResetCallback(() => { })}
              />
            )
          ))}
          {isFiltered && (
            <Button
              variant="ghost"
              onClick={handleResetFilters} // Use the new handleResetFilters function
              className="tw-h-8 tw-px-2 lg:tw-px-3"
            >
              {/* Texto para traducir */}
              <span className="tw-hidden lg:tw-flex">
                Resetear
              </span>
              <CrossIcon className="lg:tw-ml-2 lg:tw-h-4 lg:tw-w-4 tw-h-5 tw-w-5" />
            </Button>
          )}
        </div>
        <div className="tw-flex tw-items-center lg:tw-space-x-2">
          {/* <DataTableViewOptions table={table} /> */}
        </div>
      </div>
      <div
        className={`tw-transition-all tw-transform ${selectedRows.length > 0 ? 'tw-max-h-screen' : 'tw-max-h-0'} tw-overflow-hidden tw-duration-500 tw-ease-in-out`}
      >
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            {/* Texto para traducir */}
            <Button variant="outline">Acciones</Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="tw-w-56">
            {/* Texto para traducir */}
            <DropdownMenuLabel>Acciones Disponibles</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              {/* <DropdownMenuItem className="tw-cursor-pointer" onClick={(e) => {
                handleAction(e);
                toast({
                  title: <div className="tw-flex tw-gap-3"><CheckCircle />"Row Deleted"</div>,
                  description: "All the selected rows data has been deleted.",
                })
              }}>
                <LogOut className="tw-mr-2 tw-h-4 tw-w-4" />
                <span>Delete</span>
              </DropdownMenuItem> */}
            </DropdownMenuGroup>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

    </div>
  );
}

================
File: components/testDocument/page.tsx
================
'use client'

import React, { useEffect, useState, useCallback } from 'react'
import { useParams, useSearchParams } from 'next/navigation'
import { Check, ChevronsUpDown, Plus, Trash2 } from "lucide-react"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableFooter,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { debounce } from 'lodash'
import { Card } from '@/components/ui/card'

import { Tabs } from "@/components/ui/tabs";

interface TableItem {
  id: string | number
  name: string
  unit: string
  price: number
  category: string
  accumulated?: string | number
  parcial?: string | number
  rubro?: string | number
}

interface GroupedData {
  [tag: string]: TableItem[]
}

const testData = {
  "MATERIALES ELECTRICOS": [
    {
      "id": 1,
      "name": "VIGUETAS Y LADRILLOS ",
      "unit": "NULL",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Viguetas pretensadas serie 1 (SERIE ASTER 2 ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Viguetas pretensadas serie 2 (SERIE ASTER 3 ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 5,
      "name": "Viguetas pretensadas serie 5 (SERIE \"C\" 5 ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "Viguetas pretensadas serie 7 (SERIE \"D\" 6ml)",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "Ladrillos cer?micos de 9,5 x 25 x 40 cm",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "Ladrillos cer?micos de 12,5 x 25 x 40 cm",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "Ladrillos de poliest. expandido de 12 x 100 x 40 cm",
      "unit": "C/U",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "Disyuntores diferenciales": [
    {
      "id": 16,
      "name": "Arrancador para corriente alterna de 20 w",
      "unit": "c/u",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 17,
      "name": "Arrancador para corriente alterna de 40 w",
      "unit": "c/u",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "MATERIALES CA├æERIA CLOACAL Y AGUA": [
    {
      "id": 1,
      "name": "DEMOLICION Y RETIROS",
      "unit": "NULL",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Demolici?n techo F?C? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Demolici?n techo H?G? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 5,
      "name": "Demolici?n de pavimentos",
      "unit": "m3",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "Demolici?n tabique esp. 0,10",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "Demolici?n de piso de mosaicos",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "Demolici?n contrapiso de Hormig?n de cemento",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "Retiro de aberturas hasta 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "INSTALACION DE AIRE ACONDICIONADO": [
    {
      "id": 16,
      "name": "Retiro de aberturas > 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 17,
      "name": "Picado de mamposteria ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "ampliacion aula",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "escuela nueva",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "NULL",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "refaccion max",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "CA├æO DE P.V.C. P/CLOACA Y VENTILACION": [
    {
      "id": 1,
      "name": "DEMOLICION Y RETIROS",
      "unit": "NULL",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Demolici?n techo F?C? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "510",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Demolici?n techo H?G? ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 5,
      "name": "Demolici?n de pavimentos",
      "unit": "m3",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 6,
      "name": "Demolici?n tabique esp. 0,10",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "310",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 8,
      "name": "Demolici?n de piso de mosaicos",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 9,
      "name": "Demolici?n contrapiso de Hormig?n de cemento",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 10,
      "name": "Retiro de aberturas hasta 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 16,
      "name": "Retiro de aberturas > 2.50 m2",
      "unit": "un",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "10",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 17,
      "name": "Picado de mamposteria ",
      "unit": "m2",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ],
  "REVOQUES": [
    {
      "id": 5,
      "name": "caps",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": "120",
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 3,
      "name": "Medio Oficial",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 2,
      "name": "Oficial",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    },
    {
      "id": 1,
      "name": "Oficial Especializado",
      "unit": "",
      "price": 0,
      "category": "Sin categoría",
      "parcial": 0,
      "rubro": "",
      "accumulated": ""
    }
  ]
}

export default function ExampleDocument({ defaultData }: { defaultData?: GroupedData }) {
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  console.log('defaultData', defaultData)
  console.log('rerender')

  // Extract the id from the URL
  const params = useParams();
  const id = params.id;

  // Initialize state for data
  const [data, setData] = useState<GroupedData>(defaultData ? defaultData : testData);

  useEffect(() => {
    if (defaultData) {
      setData(defaultData);
    }
  }, [defaultData]);

  // For searching & adding new items
  const [searchOpen, setSearchOpen] = useState<{ [key: string]: boolean }>({})
  const [generalSearchOpen, setGeneralSearchOpen] = useState(false)
  const [allElements, setAllElements] = useState<any[]>([])
  const [filteredElements, setFilteredElements] = useState<any[]>([])
  const [searchValue, setSearchValue] = useState("")

  const serializeDataToJson = () => {
    return JSON.stringify(data);
  };

  // -----------------------------
  //   Debounced Search Setup
  // -----------------------------
  const debouncedSearch = useCallback(
    debounce((searchTerm: string) => {
      if (searchTerm.length >= 4) {
        const filtered = allElements.filter(element =>
          element.name?.toLowerCase().includes(searchTerm.toLowerCase())
        )
        setFilteredElements(filtered)
      } else {
        setFilteredElements([])
      }
    }, 300),
    [allElements]
  )

  const handleSearch = (value: string) => {
    setSearchValue(value)
    debouncedSearch(value)
  }

  // -----------------------------
  //   Update Data in state
  // -----------------------------
  const updateData = (
    tag: string,
    itemId: string | number,
    key: keyof TableItem,
    newValue: string
  ) => {
    setData(prev => {
      const newData = { ...prev }
      const arr = newData[tag] || []
      const itemIndex = arr.findIndex(it => String(it.id) === String(itemId))
      if (itemIndex > -1) {
        const oldItem = arr[itemIndex]
        newData[tag] = [
          ...arr.slice(0, itemIndex),
          { ...oldItem, [key]: newValue },
          ...arr.slice(itemIndex + 1),
        ]
      }
      return newData
    })
  }

  // -----------------------------
  //   Add item to a section
  // -----------------------------
  const addElementToSection = (tag: string, element: any) => {
    setData(prev => {
      const newData = { ...prev }
      if (!newData[tag]) {
        newData[tag] = []
      }
      newData[tag] = [
        ...newData[tag],
        {
          id: element.id,
          name: element.name || 'Sin descripción',
          unit: element.unit || '',
          price: element.prices?.[0]?.price || 0,
          category: element.categories?.name || 'Sin categoría',
          parcial: element.prices?.[0]?.price || 0,
          rubro: '',
          accumulated: '',
        },
      ]
      return newData
    })
  }

  // For the "Agregar nuevo elemento" combobox
  const addGeneralElement = (element: any) => {
    const tag = element.element_tags?.[0]?.tags?.name || 'Sin Etiqueta'
    addElementToSection(tag, element)
    setGeneralSearchOpen(false)
    setSearchValue("")
    setFilteredElements([])
  }

  // -----------------------------
  //   Delete row from a tag
  // -----------------------------
  const handleDeleteRow = (tag: string, itemId: string | number) => {
    setData(prev => {
      const newData = { ...prev }
      newData[tag] = newData[tag]?.filter(item => String(item.id) !== String(itemId)) || []
      return newData
    })
  }

  // -----------------------------
  //   Handle Form Submit
  // -----------------------------
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Final data:', data);
    const jsonData = serializeDataToJson();
    console.log('Serialized JSON:', jsonData);
    // Additional logic ...
  };

  const [previewVersion, setPreviewVersion] = useState<string | boolean>(false)

  console.log(previewVersion)

  // -----------------------------
  //   Render
  // -----------------------------
  return (
    <div className='flex items-start justify-center gap-4'>
      <Tabs defaultValue="tab-1" orientation="vertical" className="flex gap-2 mt-4">

      </Tabs>
      <form onSubmit={handleSubmit} className="max-w-[1000px] min-w-[860px] p-6 bg-white rounded-xl shadow-lg relative">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-2xl font-bold text-gray-800 mb-4">
            Ministerio de Obras y Servicios Públicos
          </h1>
          <Card className="text-gray-600 flex flex-col justify-center items-start p-2 px-4">
            <p className="mb-2">{`Obra: `}
              <b>
                COMISARIA LAGUNA BRAVA - Obra Nueva 1226
              </b>
            </p>
            <p>{`Ubicacion: `}
              <b>
                CORRIENTES CAPITAL
              </b>
            </p>
          </Card>
          <h2 className="mt-4 text-lg font-bold uppercase underline">
            Planilla de Presupuesto e Incidencias
          </h2>
        </div>

        {loading && <p className="text-center text-gray-600">Cargando...</p>}
        {error && <p className="text-center text-red-600">{error}</p>}

        {/* The main table */}
        {!loading && !error && (
          <div className="rounded-lg border border-gray-200">
            <Table>
              {/* <TableCaption className='hidden'>Elementos agrupados por sección (tag).</TableCaption> */}

              <TableHeader >
                <TableRow>
                  <TableHead className="w-[50px]">N°</TableHead>
                  <TableHead className="text-left">Nombre</TableHead>
                  <TableHead className="text-left">Unidad </TableHead>
                  <TableHead className="text-center">Parcial</TableHead>
                  {(previewVersion == 'parcial' || previewVersion == 'false') && (
                    <>
                      <TableHead className="text-center">Rubro</TableHead>
                      <TableHead className="text-center">IACUMUL</TableHead>
                    </>
                  )}

                  {previewVersion === 'false' && (
                    <TableHead className="text-center">Acciones</TableHead>
                  )}
                </TableRow>
              </TableHeader>

              <TableBody>
                {/* If no data */}
                {Object.keys(data).length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={7} className="text-center">
                      No hay datos disponibles.
                    </TableCell>
                  </TableRow>
                ) : (
                  /* For each tag, create a section header + items */
                  Object.entries(data).map(([tag, items], tagIndex) => (
                    <React.Fragment key={tag}>
                      {/* Section Header */}
                      <TableRow className="bg-stone-100 border-r border-l">
                        {/* 
                        We can style it however you like. 
                        colSpan = total number of columns in the table
                      */}
                        <TableCell colSpan={7} className="font-bold ">
                          {tagIndex + 1}. {tag.toUpperCase()}
                        </TableCell>
                      </TableRow>

                      {/* Rows for this tag */}
                      {items.map((item, rowIndex) => {
                        const rowNumber = `${tagIndex + 1}.${rowIndex + 1}`
                        return (
                          <TableRow key={item.id}>
                            {/* N° */}
                            <TableCell className="text-gray-600 border-r border-l">
                              {rowNumber}
                            </TableCell>
                            {/* Nombre */}
                            <TableCell className='border-r'>
                              {item.name}
                            </TableCell>
                            {/* Unidad */}
                            <TableCell className='border-r'>
                              {item.unit}
                            </TableCell>
                            {/* Parcial */}
                            <TableCell className="text-center border-r  group  cursor-text hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]  focus:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] focus-within:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]">
                              <EditableInput
                                value={String(item.parcial ?? '')}
                                onChange={(val) => updateData(tag, item.id, 'parcial', val)}
                                suffix="%"
                              />
                            </TableCell>
                            {(previewVersion === 'parcial' || previewVersion === 'false') && (
                              <>
                                <TableCell className="text-center border-r  group  cursor-text hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]  focus:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] focus-within:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]">
                                  <EditableInput
                                    value={String(item.rubro ?? '')}
                                    onChange={(val) => updateData(tag, item.id, 'rubro', val)}
                                    suffix="%"
                                  />
                                </TableCell>
                                {/* IACUMUL */}
                                <TableCell className="text-center border-r group cursor-text box-border hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]  focus:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] focus-within:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)]">
                                  <EditableInput
                                    value={String(item.accumulated ?? '')}
                                    onChange={(val) => updateData(tag, item.id, 'accumulated', val)}
                                    suffix="%"
                                  />
                                </TableCell>
                              </>
                            )}
                            {/* Rubro */}
                            {/* Delete Action */}
                            {previewVersion === 'false' && (

                              <TableCell className="text-center border-r">
                                <Button
                                  variant="destructive"
                                  className="flex items-center gap-1 h-6 w-7 p-0 mx-auto"
                                  onClick={() => handleDeleteRow(tag, item.id)}
                                >
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </TableCell>
                            )}
                          </TableRow>
                        )
                      })}

                      {/* Add new element to this tag */}
                      {previewVersion === 'false' && (
                        <TableRow className='group'>
                          <TableCell colSpan={7} className='group-hover:bg-white'>
                            <div className="relative">
                              <button
                                onClick={() =>
                                  setSearchOpen(prev => ({ ...prev, [tag]: !prev[tag] }))
                                }
                                className="w-full px-4 py-2 text-left text-gray-600 border-2 border-dashed 
                                       border-gray-300 rounded-lg hover:bg-slate-50 transition-colors 
                                       duration-200 flex items-center gap-2"
                              >
                                <Plus className="w-4 h-4 text-blue-500" />
                                <span>Agregar elemento a {tag}</span>
                              </button>

                              {searchOpen[tag] && (
                                <Popover
                                  open={searchOpen[tag]}
                                  onOpenChange={(open) => {
                                    setSearchOpen(prev => ({ ...prev, [tag]: open }))
                                  }}
                                >
                                  <PopoverTrigger asChild>
                                    <></>
                                  </PopoverTrigger>
                                  <PopoverContent className="w-full p-0 mt-1">
                                    {/*  @ts-ignore */}
                                    <Command>
                                      {/*  @ts-ignore */}
                                      <CommandInput
                                        // @ts-ignore
                                        placeholder="Buscar elementos (mínimo 4 caracteres)..."
                                        value={searchValue}
                                        onValueChange={handleSearch}
                                      />
                                      {/*  @ts-ignore */}
                                      <CommandEmpty>
                                        {searchValue.length < 4
                                          ? "Ingrese al menos 4 caracteres para buscar"
                                          : "No se encontraron elementos"}
                                      </CommandEmpty>
                                      {/*  @ts-ignore */}
                                      <CommandGroup>
                                        {/*  @ts-ignore */}
                                        <CommandList>
                                          {filteredElements
                                            .filter(
                                              element =>
                                                Array.isArray(element.element_tags) &&
                                                element.element_tags.some(
                                                  (tagObj: any) => tagObj.tags?.name === tag
                                                ) &&
                                                !items.some(
                                                  existing => existing.id === element.id
                                                )
                                            )
                                            .map((element, idx) => (
                                              // @ts-ignore
                                              <CommandItem
                                                key={`${element.id}-${idx}`}
                                                value={element.name}
                                                onSelect={() => {
                                                  addElementToSection(tag, element)
                                                  setSearchOpen(prev => ({ ...prev, [tag]: false }))
                                                  setSearchValue("")
                                                  setFilteredElements([])
                                                }}
                                              >
                                                <Check className={cn("mr-2 h-4 w-4", "opacity-0")} />
                                                {element.name}
                                              </CommandItem>
                                            ))}
                                        </CommandList>
                                      </CommandGroup>
                                    </Command>
                                  </PopoverContent>
                                </Popover>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      )}
                    </React.Fragment>
                  ))
                )}
              </TableBody>

              {/* <TableFooter>
              <TableRow>
                <TableCell colSpan={7} className="text-right">
                  If you want a summary or total, put it here
                </TableCell>
              </TableRow>
            </TableFooter> */}
            </Table>
          </div>
        )}

        {/* General Add Element Button */}
        {!loading && !error && previewVersion === false && (
          <div className="mt-6">
            <Popover open={generalSearchOpen} onOpenChange={setGeneralSearchOpen}>
              <PopoverTrigger asChild>
                <Button
                  variant="secondary"
                  role="combobox"
                  aria-expanded={generalSearchOpen}
                  className="w-full justify-between"
                >
                  <span>Agregar nuevo elemento</span>
                  <Plus className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-full p-0">
                {/*  @ts-ignore */}
                <Command>
                  {/*  @ts-ignore */}
                  <CommandInput
                    // @ts-ignore
                    placeholder="Buscar elementos (mínimo 4 caracteres)..."
                    value={searchValue}
                    onValueChange={handleSearch}
                  />
                  {/*  @ts-ignore */}
                  <CommandEmpty>
                    {searchValue.length < 4
                      ? "Ingrese al menos 4 caracteres para buscar"
                      : "No se encontraron elementos"}
                  </CommandEmpty>
                  {/*  @ts-ignore */}
                  <CommandGroup>
                    {/*  @ts-ignore */}
                    <CommandList>
                      {filteredElements.map((element, index) => (
                        // @ts-ignore
                        <CommandItem
                          key={`${element.id}-${index}`}
                          value={element.name}
                          onSelect={() => addGeneralElement(element)}
                        >
                          <Check className={cn("mr-2 h-4 w-4", "opacity-0")} />
                          {element.name}
                        </CommandItem>
                      ))}
                    </CommandList>
                  </CommandGroup>
                </Command>
              </PopoverContent>
            </Popover>
          </div>
        )}

        {/* Submit Button */}
        {!loading && !error && (
          <div className="mt-6">
            <Button
              type="submit"
              className="w-full bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-lg
                       transition-all duration-200 transform hover:scale-[1.02] active:scale-[0.98]"
            >
              Guardar Cambios
            </Button>
          </div>
        )}

        {/* Footer */}
        <div className="text-sm text-center mt-2">
          <p>Página 1 de 1</p>
        </div>
      </form>
    </div>

  )
}

/**
 * A simple inline-edit <input> cell
 */
function EditableInput({
  value: initialValue,
  onChange,
  suffix = "",
}: {
  value: string | number
  onChange: (val: string) => void
  suffix?: string
}) {
  const [value, setValue] = useState(String(initialValue))

  // Keep local state in sync if value changes externally
  useEffect(() => {
    setValue(String(initialValue))
  }, [initialValue])

  const handleBlur = () => {
    // Call parent onChange
    onChange(value)
  }

  return (
    <div className="flex items-center justify-center gap-1">
      <input
        className="border-b border-transparent group-hover:border-gray-300 group-focus:border-gray-300 focus:outline-none bg-transparent w-[50px] text-right focus-within:border-gray-300"
        value={value}
        onChange={(e) => setValue(e.target.value)}
        onBlur={handleBlur}
      />
      {suffix && <span className="text-sm text-gray-700 peer">{suffix}</span>}
    </div>
  )
}

================
File: components/theme-switcher.tsx
================
"use client";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Laptop, Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";
import { useEffect, useState } from "react";

const ThemeSwitcher = () => {
  const [mounted, setMounted] = useState(false);
  const { theme, setTheme } = useTheme();

  // useEffect only runs on the client, so now we can safely show the UI
  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null;
  }

  const ICON_SIZE = 16;

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size={"sm"}>
          {theme === "light" ? (
            <Sun
              key="light"
              size={ICON_SIZE}
              className={"text-muted-foreground"}
            />
          ) : theme === "dark" ? (
            <Moon
              key="dark"
              size={ICON_SIZE}
              className={"text-muted-foreground"}
            />
          ) : (
            <Laptop
              key="system"
              size={ICON_SIZE}
              className={"text-muted-foreground"}
            />
          )}
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-content" align="start">
        <DropdownMenuRadioGroup
          value={theme}
          onValueChange={(e) => setTheme(e)}
        >
          <DropdownMenuRadioItem className="flex gap-2" value="light">
            <Sun size={ICON_SIZE} className="text-muted-foreground" />{" "}
            <span>Light</span>
          </DropdownMenuRadioItem>
          <DropdownMenuRadioItem className="flex gap-2" value="dark">
            <Moon size={ICON_SIZE} className="text-muted-foreground" />{" "}
            <span>Dark</span>
          </DropdownMenuRadioItem>
          <DropdownMenuRadioItem className="flex gap-2" value="system">
            <Laptop size={ICON_SIZE} className="text-muted-foreground" />{" "}
            <span>System</span>
          </DropdownMenuRadioItem>
        </DropdownMenuRadioGroup>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};

export { ThemeSwitcher };

================
File: components/tutorial/code-block.tsx
================
"use client";

import { useState } from "react";
import { Button } from "../ui/button";

const CopyIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
  </svg>
);

const CheckIcon = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="20"
    height="20"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    strokeWidth="2"
    strokeLinecap="round"
    strokeLinejoin="round"
  >
    <polyline points="20 6 9 17 4 12"></polyline>
  </svg>
);

export function CodeBlock({ code }: { code: string }) {
  const [icon, setIcon] = useState(CopyIcon);

  const copy = async () => {
    await navigator?.clipboard?.writeText(code);
    setIcon(CheckIcon);
    setTimeout(() => setIcon(CopyIcon), 2000);
  };

  return (
    <pre className="bg-muted rounded-md p-6 my-6 relative">
      <Button
        size="icon"
        onClick={copy}
        variant={"outline"}
        className="absolute right-2 top-2"
      >
        {icon}
      </Button>
      <code className="text-xs p-3">{code}</code>
    </pre>
  );
}

================
File: components/tutorial/connect-supabase-steps.tsx
================
import { TutorialStep } from "./tutorial-step";

export default function ConnectSupabaseSteps() {
  return (
    <ol className="flex flex-col gap-6">
      <TutorialStep title="Create Supabase project">
        <p>
          Head over to{" "}
          <a
            href="https://app.supabase.com/project/_/settings/api"
            target="_blank"
            className="font-bold hover:underline text-foreground/80"
            rel="noreferrer"
          >
            database.new
          </a>{" "}
          and create a new Supabase project.
        </p>
      </TutorialStep>

      <TutorialStep title="Declare environment variables">
        <p>
          Rename the{" "}
          <span className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-xs font-medium text-secondary-foreground border">
            .env.example
          </span>{" "}
          file in your Next.js app to{" "}
          <span className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-xs font-medium text-secondary-foreground border">
            .env.local
          </span>{" "}
          and populate with values from{" "}
          <a
            href="https://app.supabase.com/project/_/settings/api"
            target="_blank"
            className="font-bold hover:underline text-foreground/80"
            rel="noreferrer"
          >
            your Supabase project's API Settings
          </a>
          .
        </p>
      </TutorialStep>

      <TutorialStep title="Restart your Next.js development server">
        <p>
          You may need to quit your Next.js development server and run{" "}
          <span className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-xs font-medium text-secondary-foreground border">
            npm run dev
          </span>{" "}
          again to load the new environment variables.
        </p>
      </TutorialStep>

      <TutorialStep title="Refresh the page">
        <p>
          You may need to refresh the page for Next.js to load the new
          environment variables.
        </p>
      </TutorialStep>
    </ol>
  );
}

================
File: components/tutorial/fetch-data-steps.tsx
================
import { TutorialStep } from "./tutorial-step";
import { CodeBlock } from "./code-block";

const create = `create table notes (
  id bigserial primary key,
  title text
);

insert into notes(title)
values
  ('Today I created a Supabase project.'),
  ('I added some data and queried it from Next.js.'),
  ('It was awesome!');
`.trim();

const server = `import { createClient } from '@/utils/supabase/server'

export default async function Page() {
  const supabase = createClient()
  const { data: notes } = await supabase.from('notes').select()

  return <pre>{JSON.stringify(notes, null, 2)}</pre>
}
`.trim();

const client = `'use client'

import { createClient } from '@/utils/supabase/client'
import { useEffect, useState } from 'react'

export default function Page() {
  const [notes, setNotes] = useState<any[] | null>(null)
  const supabase = createClient()

  useEffect(() => {
    const getData = async () => {
      const { data } = await supabase.from('notes').select()
      setNotes(data)
    }
    getData()
  }, [])

  return <pre>{JSON.stringify(notes, null, 2)}</pre>
}
`.trim();

export default function FetchDataSteps() {
  return (
    <ol className="flex flex-col gap-6">
      <TutorialStep title="Create some tables and insert some data">
        <p>
          Head over to the{" "}
          <a
            href="https://supabase.com/dashboard/project/_/editor"
            className="font-bold hover:underline text-foreground/80"
            target="_blank"
            rel="noreferrer"
          >
            Table Editor
          </a>{" "}
          for your Supabase project to create a table and insert some example
          data. If you're stuck for creativity, you can copy and paste the
          following into the{" "}
          <a
            href="https://supabase.com/dashboard/project/_/sql/new"
            className="font-bold hover:underline text-foreground/80"
            target="_blank"
            rel="noreferrer"
          >
            SQL Editor
          </a>{" "}
          and click RUN!
        </p>
        <CodeBlock code={create} />
      </TutorialStep>

      <TutorialStep title="Query Supabase data from Next.js">
        <p>
          To create a Supabase client and query data from an Async Server
          Component, create a new page.tsx file at{" "}
          <span className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-xs font-medium text-secondary-foreground border">
            /app/notes/page.tsx
          </span>{" "}
          and add the following.
        </p>
        <CodeBlock code={server} />
        <p>Alternatively, you can use a Client Component.</p>
        <CodeBlock code={client} />
      </TutorialStep>

      <TutorialStep title="Build in a weekend and scale to millions!">
        <p>You're ready to launch your product to the world! 🚀</p>
      </TutorialStep>
    </ol>
  );
}

================
File: components/tutorial/sign-up-user-steps.tsx
================
import Link from "next/link";
import { TutorialStep } from "./tutorial-step";
import { ArrowUpRight } from "lucide-react";

export default function SignUpUserSteps() {
  return (
    <ol className="flex flex-col gap-6">
      {process.env.VERCEL_ENV === "preview" ||
      process.env.VERCEL_ENV === "production" ? (
        <TutorialStep title="Set up redirect urls">
          <p>It looks like this App is hosted on Vercel.</p>
          <p className="mt-4">
            This particular deployment is
            <span className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-xs font-medium text-secondary-foreground border">
              "{process.env.VERCEL_ENV}"
            </span>{" "}
            on
            <span className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-xs font-medium text-secondary-foreground border">
              https://{process.env.VERCEL_URL}
            </span>
            .
          </p>
          <p className="mt-4">
            You will need to{" "}
            <Link
              className="text-primary hover:text-foreground"
              href={
                "https://supabase.com/dashboard/project/_/auth/url-configuration"
              }
            >
              update your Supabase project
            </Link>{" "}
            with redirect URLs based on your Vercel deployment URLs.
          </p>
          <ul className="mt-4">
            <li>
              -{" "}
              <span className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-xs font-medium text-secondary-foreground border">
                http://localhost:3000/**
              </span>
            </li>
            <li>
              -{" "}
              <span className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-xs font-medium text-secondary-foreground border">
                {`https://${process.env.VERCEL_PROJECT_PRODUCTION_URL}/**`}
              </span>
            </li>
            <li>
              -{" "}
              <span className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-xs font-medium text-secondary-foreground border">
                {`https://${process.env.VERCEL_PROJECT_PRODUCTION_URL?.replace(".vercel.app", "")}-*-[vercel-team-url].vercel.app/**`}
              </span>{" "}
              (Vercel Team URL can be found in{" "}
              <Link
                className="text-primary hover:text-foreground"
                href="https://vercel.com/docs/accounts/create-a-team#find-your-team-id"
                target="_blank"
              >
                Vercel Team settings
              </Link>
              )
            </li>
          </ul>
          <Link
            href="https://supabase.com/docs/guides/auth/redirect-urls#vercel-preview-urls"
            target="_blank"
            className="text-primary/50 hover:text-primary flex items-center text-sm gap-1 mt-4"
          >
            Redirect URLs Docs <ArrowUpRight size={14} />
          </Link>
        </TutorialStep>
      ) : null}
      <TutorialStep title="Sign up your first user">
        <p>
          Head over to the{" "}
          <Link
            href="/sign-up"
            className="font-bold hover:underline text-foreground/80"
          >
            Sign up
          </Link>{" "}
          page and sign up your first user. It's okay if this is just you for
          now. Your awesome idea will have plenty of users later!
        </p>
      </TutorialStep>
    </ol>
  );
}

================
File: components/tutorial/tutorial-step.tsx
================
import { Checkbox } from "../ui/checkbox";

export function TutorialStep({
  title,
  children,
}: {
  title: string;
  children: React.ReactNode;
}) {
  return (
    <li className="relative">
      <Checkbox
        id={title}
        name={title}
        className={`absolute top-[3px] mr-2 peer`}
      />
      <label
        htmlFor={title}
        className={`relative text-base text-foreground peer-checked:line-through font-medium`}
      >
        <span className="ml-8">{title}</span>
        <div
          className={`ml-8 text-sm peer-checked:line-through font-normal text-muted-foreground`}
        >
          {children}
        </div>
      </label>
    </li>
  );
}

================
File: components/typography/inline-code.tsx
================
export function TypographyInlineCode() {
  return (
    <code className="relative rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm font-semibold">
      @radix-ui/react-alert-dialog
    </code>
  );
}

================
File: components/ui/avatar.tsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 transition-opacity group-data-[state=inactive]:opacity-50",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        accent:
          "border-transparent bg-accent-foreground text-white hover:bg-accent-foreground/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
  VariantProps<typeof badgeVariants> { }

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
import Link from "next/link"


const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 leading-3 whitespace-nowrap rounded-lg text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        facha: cn(
          "inline-flex items-center justify-center bg-[#F8F7FC] text-blue-500 shadow-[inset_0_1px_0_#fff,inset_0_-2px_0_#3b82f621,0_0_0_1px_#3b82f64a,0_2px_7px_0px_#3b85f64a,0_0_0_3px_#3b82f614] font-medium",
          "relative transition-all duration-100 cursor-pointer will-change-transform ",
          "active:scale-[0.97] hover:bg-[#ece9f7] active:shadow-[inset_0_-1px_0_#fff,inset_0_2px_0_#3b82f621,0_0_0_1px_#3b82f64a,0_2px_7px_0px_#3b85f64a,0_0_0_3px_#3b82f614]"
        ),
        box: cn(
          "inline-flex flex-col items-center justify-center bg-muted/20 text-neutral-600 shadow-simple font-medium",
          "relative transition-all duration-100 cursor-pointer will-change-transform ",
          "active:scale-[0.97] hover:bg-muted/70"
        ),
        default: cn(
          "inline-flex items-center justify-center bg-black text-white shadow-simple font-medium",
          "relative transition-all duration-100 cursor-pointer will-change-transform ",
          "active:scale-[0.97] hover:shadow-simple-hover"
        ),
        secondary: cn(
          "inline-flex items-center justify-center bg-white text-black shadow border font-medium",
          "relative transition-all duration-100 cursor-pointer will-change-transform ",
          "active:translate-y-[1px] active:shadow-none hover:shadow-hover"
        ),
        tertiary: cn(
          "inline-flex items-center justify-center bg-white text-foreground-dim shadow border font-medium",
          "relative transition-all duration-100 cursor-pointer will-change-transform ",
          "hover:bg-input-foreground/10 active:translate-y-[1px] active:shadow-none"
        ),
        destructive:
          cn(
            "inline-flex items-center justify-center bg-destructive text-white shadow-simple-destructive font-medium",
            "relative transition-all duration-100 cursor-pointer will-change-transform ",
            "active:translate-y-[1px] hover:shadow-simple-destructive-hover"
          ),
        destructiveSecondary:
          cn(
            "bg-destructive/30 border border-destructive/30 shadow text-destructive-border",
            "hover:bg-destructive/90",
            "focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
            "active:bg-destructive/70 active:translate-y-[1px] active:shadow-none"
          ),
        success:
          cn(
            "inline-flex items-center justify-center bg-success text-white shadow-simple-success font-medium",
            "relative transition-all duration-100 cursor-pointer will-change-transform ",
            "active:translate-y-[1px] hover:shadow-simple-success-hover"
          ),
        successSecondary:
          cn(
            "bg-success/30 border border-success/30 shadow text-success-border",
            "hover:bg-success/90",
            "focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
            "active:bg-success/70 active:translate-y-[1px] active:shadow-none"
          ),
        alert:
          cn(
            "inline-flex items-center justify-center bg-alert text-white shadow-simple-alert font-medium",
            "relative transition-all duration-100 cursor-pointer will-change-transform ",
            "active:translate-y-[1px] hover:shadow-simple-alert-hover"
          ),
        alertSecondary:
          cn(
            "bg-alert/30 border border-alert/30 shadow text-alert-border",
            "hover:bg-alert/90",
            "focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
            "active:bg-alert/70 active:translate-y-[1px] active:shadow-none"
          ),
        outline:
          "border-2 border-input bg-background hover:bg-input-foreground/10 hover:text-accent-foreground",
        ghost: "hover:bg-input-foreground/10 hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-8 px-4 pb-1 pt-[0.2rem]",
        sm: "h-6 rounded-md px-3",
        lg: "h-10 rounded-md px-8",
        icon: "h-6 w-6",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
  VariantProps<typeof buttonVariants> {
  asChild?: boolean
  href?: string
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size = 'default', asChild = false, href, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"

    if (href) {
      return (
        <Link href={href} asChild>
          <Comp
            className={cn(buttonVariants({ variant, size, className }))}
            ref={ref}
            {...props}
          />
        </Link>
      )
    }

    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/calendar.tsx
================
"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/checkbox.tsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-input ring-offset-background focus-visible:outline-none focus-visible:ring-2",
      "focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:border-primary",
      "data-[state=checked]:bg-primary data-[state=checked]:text-white data-[state=checked]:shadow-[0px_4px_7px_-2px_rgba(00,00,00,0.4)] mx-auto my-auto translate-y-0.5 data-[state=checked]:translate-y-[3px]",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/command.tsx
================
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
// @ts-ignore
>(({ className, ...props }, ref) => (
  // @ts-ignore
  <CommandPrimitive
    // @ts-ignore
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        {/* @ts-ignore */}
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.Input>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
// @ts-ignore
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    {/* @ts-ignore */}
    <CommandPrimitive.Input
      // @ts-ignore
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.List>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
// @ts-ignore
>(({ className, ...props }, ref) => (
  // @ts-ignore
  <CommandPrimitive.List
    // @ts-ignore
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.Empty>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  // @ts-ignore
  <CommandPrimitive.Empty
    // @ts-ignore
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.Group>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
// @ts-ignore
>(({ className, ...props }, ref) => (
  // @ts-ignore
  <CommandPrimitive.Group
    // @ts-ignore
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.Separator>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
// @ts-ignore
>(({ className, ...props }, ref) => (
  // @ts-ignore
  <CommandPrimitive.Separator
    // @ts-ignore
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  // @ts-ignore
  React.ElementRef<typeof CommandPrimitive.Item>,
  // @ts-ignore
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
// @ts-ignore
>(({ className, ...props }, ref) => (
  // @ts-ignore
  <CommandPrimitive.Item
    // @ts-ignore
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"
import { Search, SearchIcon } from "lucide-react"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, hidden, children, ...props }, ref) => {
    return (
      <div className="relative flex items-center">
        <SearchIcon className="absolute left-4 text-foreground-secondary size-4" />
        <input
          type={type}
          className={cn(
            "flex h-10 w-full rounded-xl shadow border bg-background pl-10 pr-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
            hidden && "max-h-8 max-w-12 w-8 border-none px-0 text-right justify-end items-center focus:border-input focus:border focus:bg-sky-50 focus:text-left ",
            className
          )}
          ref={ref}
          {...props}
        />
      </div>
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: components/ui/radio-group.tsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: components/ui/scroll-area.tsx
================
"use client";

import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";
import * as React from "react";

import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-px",
      orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-px",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };

================
File: components/ui/select.tsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: components/ui/sidebar.tsx
================
"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/lib/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip || (!isMobile && state !== "collapsed")) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
        "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/switch.tsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"
import { cn } from "@/lib/utils"

interface SwitchProps
  extends React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> {
  size?: "large" | "medium" | "small"
}

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  SwitchProps
>(({ className, size = "large", ...props }, ref) => {
  const sizes = {
    large: {
      root: "h-6 w-11",
      thumb: "h-5 w-5 data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0",
    },
    medium: {
      root: "h-5 w-9",
      thumb: "h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0",
    },
    small: {
      root: "h-4 w-7",
      thumb: "h-3 w-3 data-[state=checked]:translate-x-3 data-[state=unchecked]:translate-x-0",
    },
  }

  return (
    <SwitchPrimitives.Root
      ref={ref}
      className={cn(
        `peer inline-flex shrink-0 cursor-pointer items-center 
         rounded-full border-2 border-transparent transition-colors 
         focus-visible:outline-none focus-visible:ring-2 
         focus-visible:ring-ring focus-visible:ring-offset-2 
         focus-visible:ring-offset-background disabled:cursor-not-allowed 
         disabled:opacity-50 data-[state=checked]:bg-input
         data-[state=unchecked]:bg-input-secondary ${sizes[size].root}`,
        className
      )}
      {...props}
    >
      <SwitchPrimitives.Thumb
        className={cn(
          `pointer-events-none block rounded-full bg-background 
           shadow-lg ring-0 transition-transform ${sizes[size].thumb}`
        )}
      />
    </SwitchPrimitives.Root>
  )
})

Switch.displayName = SwitchPrimitives.Root.displayName
export { Switch }

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left bg-muted align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-2 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
"use client";

import * as TabsPrimitive from "@radix-ui/react-tabs";
import * as React from "react";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center rounded-lg bg-muted p-0.5 text-muted-foreground/70",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium outline-offset-2",
      "transition-all hover:text-muted-foreground focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
      "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
      "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
      // custom
      "gap-1.5 group relative",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 outline-offset-2 focus-visible:outline focus-visible:outline-2 focus-visible:outline-ring/70",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsContent, TabsList, TabsTrigger };

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> { }

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/toast.tsx
================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
  VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: components/ui/toaster.tsx
================
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: components/ui/use-toast.ts
================
// Inspired by react-hot-toast library
import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
	id: string;
	title?: React.ReactNode;
	description?: React.ReactNode;
	action?: ToastActionElement;
};

const actionTypes = {
	ADD_TOAST: "ADD_TOAST",
	UPDATE_TOAST: "UPDATE_TOAST",
	DISMISS_TOAST: "DISMISS_TOAST",
	REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
	count = (count + 1) % Number.MAX_VALUE;
	return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
	| {
			type: ActionType["ADD_TOAST"];
			toast: ToasterToast;
	  }
	| {
			type: ActionType["UPDATE_TOAST"];
			toast: Partial<ToasterToast>;
	  }
	| {
			type: ActionType["DISMISS_TOAST"];
			toastId?: ToasterToast["id"];
	  }
	| {
			type: ActionType["REMOVE_TOAST"];
			toastId?: ToasterToast["id"];
	  };

interface State {
	toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
	if (toastTimeouts.has(toastId)) {
		return;
	}

	const timeout = setTimeout(() => {
		toastTimeouts.delete(toastId);
		dispatch({
			type: "REMOVE_TOAST",
			toastId: toastId,
		});
	}, TOAST_REMOVE_DELAY);

	toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
	switch (action.type) {
		case "ADD_TOAST":
			return {
				...state,
				toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
			};

		case "UPDATE_TOAST":
			return {
				...state,
				toasts: state.toasts.map((t) =>
					t.id === action.toast.id ? { ...t, ...action.toast } : t
				),
			};

		case "DISMISS_TOAST": {
			const { toastId } = action;

			// ! Side effects ! - This could be extracted into a dismissToast() action,
			// but I'll keep it here for simplicity
			if (toastId) {
				addToRemoveQueue(toastId);
			} else {
				state.toasts.forEach((toast) => {
					addToRemoveQueue(toast.id);
				});
			}

			return {
				...state,
				toasts: state.toasts.map((t) =>
					t.id === toastId || toastId === undefined
						? {
								...t,
								open: false,
						  }
						: t
				),
			};
		}
		case "REMOVE_TOAST":
			if (action.toastId === undefined) {
				return {
					...state,
					toasts: [],
				};
			}
			return {
				...state,
				toasts: state.toasts.filter((t) => t.id !== action.toastId),
			};
	}
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
	memoryState = reducer(memoryState, action);
	listeners.forEach((listener) => {
		listener(memoryState);
	});
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
	const id = genId();

	const update = (props: ToasterToast) =>
		dispatch({
			type: "UPDATE_TOAST",
			toast: { ...props, id },
		});
	const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

	dispatch({
		type: "ADD_TOAST",
		toast: {
			...props,
			id,
			open: true,
			onOpenChange: (open) => {
				if (!open) dismiss();
			},
		},
	});

	return {
		id: id,
		dismiss,
		update,
	};
}

function useToast() {
	const [state, setState] = React.useState<State>(memoryState);

	React.useEffect(() => {
		listeners.push(setState);
		return () => {
			const index = listeners.indexOf(setState);
			if (index > -1) {
				listeners.splice(index, 1);
			}
		};
	}, [state]);

	return {
		...state,
		toast,
		dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
	};
}

export { useToast, toast };

================
File: databaseSchema.txt
================
# Database Schema Documentation

## 1. Obras (Projects)
This table stores the main project information.

```sql
CREATE TABLE obras (
  id INT PRIMARY KEY AUTO_INCREMENT,
  nombre VARCHAR(200) NOT NULL,
  ubicacion VARCHAR(200),
  empresa VARCHAR(100),
  fechaInicio DATETIME,
  fechaFin DATETIME,
  estado VARCHAR(50),
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

## 2. Items (Catalog Items)
Stores the catalog of available items that can be used in budgets.

```sql
CREATE TABLE items (
  id INT PRIMARY KEY AUTO_INCREMENT,
  codigo VARCHAR(50) UNIQUE NOT NULL,
  nombre VARCHAR(200) NOT NULL,
  unidad VARCHAR(20) NOT NULL,
  categoria VARCHAR(100),
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

## 3. Precios (Price History)
Historical price records for items.

```sql
CREATE TABLE precios (
  id INT PRIMARY KEY AUTO_INCREMENT,
  itemId INT NOT NULL,
  precio DECIMAL(15,2) NOT NULL,
  fecha DATETIME NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (itemId) REFERENCES items(id)
);
```

## 4. Presupuestos (Budgets)
Main budget information for each project.

```sql
CREATE TABLE presupuestos (
  id INT PRIMARY KEY AUTO_INCREMENT,
  obraId INT NOT NULL,
  nombre VARCHAR(200) NOT NULL,
  total DECIMAL(15,2) NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (obraId) REFERENCES obras(id)
);
```

## 5. Presupuesto Secciones (Budget Sections)
Sections that organize budget items.

```sql
CREATE TABLE presupuesto_secciones (
  id INT PRIMARY KEY AUTO_INCREMENT,
  presupuestoId INT NOT NULL,
  nombre VARCHAR(200) NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (presupuestoId) REFERENCES presupuestos(id)
);
```

## 6. Presupuesto Items (Budget Items)
Items included in each budget section with their quantities and prices.

```sql
CREATE TABLE presupuesto_items (
  id INT PRIMARY KEY AUTO_INCREMENT,
  presupuestoSeccionId INT NOT NULL,
  itemId INT NOT NULL,
  cantidad DECIMAL(15,2) NOT NULL,
  precioUnitario DECIMAL(15,2) NOT NULL,
  precioTotal DECIMAL(15,2) NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (presupuestoSeccionId) REFERENCES presupuesto_secciones(id),
  FOREIGN KEY (itemId) REFERENCES items(id)
);
```

## 7. Mediciones (Measurements)
Progress measurements for projects.

```sql
CREATE TABLE mediciones (
  id INT PRIMARY KEY AUTO_INCREMENT,
  obraId INT NOT NULL,
  periodo DATETIME NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (obraId) REFERENCES obras(id)
);
```

## 8. Medicion Items (Measurement Items)
Individual item measurements with progress percentages.

```sql
CREATE TABLE medicion_items (
  id INT PRIMARY KEY AUTO_INCREMENT,
  medicionId INT NOT NULL,
  itemId INT NOT NULL,
  avanceMensual DECIMAL(5,2) NOT NULL,
  acumuladoAnterior DECIMAL(5,2) NOT NULL,
  acumuladoActual DECIMAL(5,2) NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (medicionId) REFERENCES mediciones(id),
  FOREIGN KEY (itemId) REFERENCES items(id)
);
```

## Relationships Overview

1. Obra (1) -> (*) Presupuesto
2. Obra (1) -> (*) Medicion
3. Presupuesto (1) -> (*) PresupuestoSeccion
4. PresupuestoSeccion (1) -> (*) PresupuestoItem
5. Item (1) -> (*) Precio
6. Item (1) -> (*) PresupuestoItem
7. Item (1) -> (*) MedicionItem
8. Medicion (1) -> (*) MedicionItem

## Data Flow

1. Items and their prices are maintained in the catalog (items + precios)
2. When creating a budget:
   - Create presupuesto record
   - Create sections
   - Add items to sections with quantities and prices
3. When creating measurements:
   - Create medicion record for the period
   - Add progress measurements for relevant items

## Notes

1. All monetary values use DECIMAL(15,2) for precision
2. Progress percentages use DECIMAL(5,2) (max 100.00%)
3. All tables include createdAt and updatedAt timestamps
4. Foreign keys ensure referential integrity
5. Unique constraints prevent duplicates where needed

================
File: hooks/useItems.ts
================
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";

interface Price {
	id: number;
	precio: number;
	fecha: string;
}

interface Item {
	id: number;
	codigo: string;
	nombre: string;
	unidad: string;
	categoria: string;
	precios: Price[];
}

// Fetch all items
async function fetchItems() {
	const response = await fetch("/api/items");
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Fetch single item with prices
async function fetchItem(id: number) {
	const response = await fetch(`/api/items?id=${id}`);
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Create item
async function createItem(data: Omit<Item, "id" | "precios">) {
	const response = await fetch("/api/items", {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(data),
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Update item
async function updateItem(data: Omit<Item, "precios">) {
	const response = await fetch("/api/items", {
		method: "PUT",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(data),
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Delete item
async function deleteItem(id: number) {
	const response = await fetch(`/api/items?id=${id}`, {
		method: "DELETE",
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Add price to item
async function addPrice(data: {
	itemId: number;
	precio: number;
	fecha: string;
}) {
	const response = await fetch("/api/items/precios", {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(data),
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

export function useItems() {
	return useQuery<Item[]>({
		queryKey: ["items"],
		queryFn: fetchItems,
	});
}

export function useItem(id: number) {
	return useQuery<Item>({
		queryKey: ["items", id],
		queryFn: () => fetchItem(id),
		enabled: !!id,
	});
}

export function useCreateItem() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: createItem,
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ["items"] });
		},
	});
}

export function useUpdateItem() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: updateItem,
		onSuccess: (data: Item) => {
			queryClient.invalidateQueries({ queryKey: ["items"] });
			queryClient.invalidateQueries({ queryKey: ["items", data.id] });
		},
	});
}

export function useDeleteItem() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: deleteItem,
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: ["items"] });
		},
	});
}

export function useAddPrice() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: addPrice,
		onSuccess: (data: { itemId: number }) => {
			queryClient.invalidateQueries({ queryKey: ["items", data.itemId] });
		},
	});
}

================
File: hooks/useMediciones.ts
================
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
	queryKeys,
	getPersistedQueryData,
	persistQueryData,
} from "@/utils/api-client";

export interface MedicionItem {
	id: number;
	itemId: number;
	avanceMensual: number;
	acumuladoAnterior: number;
	acumuladoActual: number;
	item: {
		id: number;
		nombre: string;
		unidad: string;
		categoria: string;
	};
}

export interface Medicion {
	id: number;
	month: string;
	measurements: {
		[key: string]: {
			monthlyProgress: number;
			cumulativePrevious: number;
			cumulativeCurrent: number;
		};
	};
}

interface MedicionResponse {
	id: number;
	periodo: string;
	data: {
		secciones: Array<{
			nombre: string;
			items: Array<{
				id: string;
				anterior: number;
				presente: number;
				acumulado: number;
			}>;
		}>;
	};
}

const transformMedicionResponse = (data: MedicionResponse[]): Medicion[] => {
	return data.map((medicion) => ({
		id: medicion.id,
		month: medicion.periodo,
		measurements: medicion.data.secciones.reduce(
			(acc, seccion) => {
				seccion.items.forEach((item) => {
					acc[item.id] = {
						monthlyProgress: item.presente,
						cumulativePrevious: item.anterior,
						cumulativeCurrent: item.acumulado,
					};
				});
				return acc;
			},
			{} as Medicion["measurements"]
		),
	}));
};

const fetchMediciones = async (obraId: number) => {
	const response = await fetch(`/api/mediciones?obraId=${obraId}`);
	if (!response.ok) {
		throw new Error("Failed to fetch mediciones");
	}
	const data = await response.json();
	return transformMedicionResponse(data);
};

// Fetch single medicion
async function fetchMedicion(id: number) {
	const response = await fetch(`/api/mediciones?id=${id}`);
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Create medicion
async function createMedicion(data: {
	obraId: number;
	periodo: string;
	items: Omit<MedicionItem, "id" | "item">[];
}) {
	const response = await fetch("/api/mediciones", {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(data),
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Update medicion
async function updateMedicion(data: {
	id: number;
	items: Omit<MedicionItem, "id" | "item">[];
}) {
	const response = await fetch("/api/mediciones", {
		method: "PUT",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(data),
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Delete medicion
async function deleteMedicion(id: number) {
	const response = await fetch(`/api/mediciones?id=${id}`, {
		method: "DELETE",
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

export function useMediciones(obraId: number) {
	return useQuery({
		queryKey: ["mediciones", obraId],
		queryFn: () => fetchMediciones(obraId),
		enabled: !!obraId,
		staleTime: 1000 * 60 * 5, // 5 minutes
	});
}

export function useMedicion(id: number) {
	return useQuery<Medicion>({
		queryKey: queryKeys.mediciones.detail(id),
		queryFn: () => fetchMedicion(id),
		enabled: !!id,
		initialData: undefined,
	});
}

export function useCreateMedicion() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: createMedicion,
		onSuccess: (data: Medicion) => {
			queryClient.invalidateQueries({
				queryKey: queryKeys.mediciones.byObraId(data.obraId),
			});
		},
	});
}

export function useUpdateMedicion() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: updateMedicion,
		onSuccess: (data: Medicion) => {
			queryClient.invalidateQueries({
				queryKey: queryKeys.mediciones.byObraId(data.obraId),
			});
			queryClient.invalidateQueries({
				queryKey: queryKeys.mediciones.detail(data.id),
			});
		},
	});
}

export function useDeleteMedicion() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: deleteMedicion,
		onSuccess: (_data, variables) => {
			queryClient.invalidateQueries({ queryKey: queryKeys.mediciones.all });
		},
	});
}

interface SaveMedicionParams {
	obraId: number;
	periodo: string;
	data: {
		secciones: Array<{
			nombre: string;
			items: Array<{
				id: string;
				anterior: number;
				presente: number;
				acumulado: number;
			}>;
		}>;
	};
}

export function useSaveMedicion() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: async (params: SaveMedicionParams) => {
			const response = await fetch("/api/mediciones", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
				},
				body: JSON.stringify(params),
			});

			if (!response.ok) {
				const errorData = await response.json();
				throw new Error(errorData.error || "Error al guardar la medición");
			}

			return response.json();
		},
		onSuccess: (_, variables) => {
			queryClient.invalidateQueries({
				queryKey: ["mediciones", variables.obraId],
			});
		},
	});
}

================
File: hooks/useObras.ts
================
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
	queryKeys,
	getPersistedQueryData,
	persistQueryData,
} from "@/utils/api-client";

export interface Obra {
	id: number;
	nombre: string;
	ubicacion: string;
	empresa: string;
	fechaInicio: string;
	fechaFin: string;
	estado: string;
}

// Fetch all obras
async function fetchObras() {
	const response = await fetch("/api/obras");
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Fetch single obra
async function fetchObra(id: number) {
	const response = await fetch(`/api/obras?id=${id}`);
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Create obra
async function createObra(obra: Omit<Obra, "id">) {
	const response = await fetch("/api/obras", {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(obra),
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Update obra
async function updateObra(obra: Obra) {
	const response = await fetch("/api/obras", {
		method: "PUT",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(obra),
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Delete obra
async function deleteObra(id: number) {
	const response = await fetch(`/api/obras?id=${id}`, {
		method: "DELETE",
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

export function useObras() {
	return useQuery<Obra[]>({
		queryKey: queryKeys.obras.all,
		queryFn: fetchObras,
		initialData: () => {
			const data = getPersistedQueryData<"obras">(["obras"]);
			return data;
		},
		gcTime: 1000 * 60 * 30, // 30 minutes
		staleTime: 1000 * 60 * 5, // 5 minutes
	});
}

export function useObra(id: number) {
	return useQuery<Obra>({
		queryKey: queryKeys.obras.detail(id),
		queryFn: () => fetchObra(id),
		enabled: !!id,
		initialData: () => {
			const obras = getPersistedQueryData<"obras">(["obras"]);
			return obras?.find((obra) => obra.id === id);
		},
	});
}

export function useCreateObra() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: createObra,
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: queryKeys.obras.all });
		},
	});
}

export function useUpdateObra() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: updateObra,
		onSuccess: (data) => {
			queryClient.invalidateQueries({ queryKey: queryKeys.obras.all });
			queryClient.invalidateQueries({
				queryKey: queryKeys.obras.detail(data.id),
			});
		},
	});
}

export function useDeleteObra() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: deleteObra,
		onSuccess: () => {
			queryClient.invalidateQueries({ queryKey: queryKeys.obras.all });
		},
	});
}

================
File: hooks/usePrefetch.ts
================
import { useQueryClient } from "@tanstack/react-query";
import { useCallback } from "react";

export function usePrefetch() {
	const queryClient = useQueryClient();

	const prefetchMediciones = useCallback(
		async (obraId: number) => {
			await queryClient.prefetchQuery({
				queryKey: ["mediciones", obraId],
				queryFn: async () => {
					const response = await fetch(`/api/mediciones?obraId=${obraId}`);
					if (!response.ok) throw new Error("Failed to fetch mediciones");
					return response.json();
				},
			});
		},
		[queryClient]
	);

	const prefetchPresupuesto = useCallback(
		async (obraId: number) => {
			await queryClient.prefetchQuery({
				queryKey: ["presupuestos", obraId],
				queryFn: async () => {
					const response = await fetch(`/api/presupuestos?obraId=${obraId}`);
					if (!response.ok) throw new Error("Failed to fetch presupuestos");
					return response.json();
				},
			});
		},
		[queryClient]
	);

	const prefetchObra = useCallback(
		async (obraId: number) => {
			await queryClient.prefetchQuery({
				queryKey: ["obra", obraId],
				queryFn: async () => {
					const response = await fetch(`/api/obras?id=${obraId}`);
					if (!response.ok) throw new Error("Failed to fetch obra");
					return response.json();
				},
			});
		},
		[queryClient]
	);

	return {
		prefetchMediciones,
		prefetchPresupuesto,
		prefetchObra,
	};
}

================
File: hooks/usePresupuestoData.ts
================
import { useQuery } from "@tanstack/react-query";

interface Item {
	id: number;
	codigo: string;
	nombre: string;
	unidad: string;
	categoria: string;
	precios: {
		id: number;
		precio: number;
		fecha: string;
	}[];
}

interface PresupuestoData {
	id?: number;
	obra_id: number;
	nombre: string;
	total: number;
	data: {
		secciones: {
			nombre: string;
			items: {
				itemId: number;
				cantidad: number;
				precioUnitario: number;
				item: {
					id: number;
					nombre: string;
					unidad: string;
					categoria: string;
				};
			}[];
		}[];
	};
}

async function fetchPresupuestoData(id?: string) {
	if (!id) return null;
	const response = await fetch(`/api/presupuestos?id=${id}`);
	if (!response.ok) throw new Error("Failed to fetch presupuesto");
	return response.json();
}

async function fetchItems() {
	const response = await fetch("/api/items");
	if (!response.ok) throw new Error("Failed to fetch items");
	const data = await response.json();
	console.log("data", data);
	return data.items;
}

export function usePresupuestoData(presupuestoId?: string) {
	const { data: presupuesto, isLoading: isLoadingPresupuesto } =
		useQuery<PresupuestoData | null>({
			queryKey: ["presupuesto", presupuestoId],
			queryFn: () => fetchPresupuestoData(presupuestoId),
			enabled: !!presupuestoId,
		});

	const { data: items = [], isLoading: isLoadingItems } = useQuery<Item[]>({
		queryKey: ["items"],
		queryFn: fetchItems,
	});

	return {
		presupuesto,
		items,
		isLoading: isLoadingPresupuesto || isLoadingItems,
	};
}

================
File: hooks/usePresupuestos.ts
================
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
	queryKeys,
	getPersistedQueryData,
	persistQueryData,
} from "@/utils/api-client";

export interface PresupuestoItem {
	id: number;
	itemId: number;
	cantidad: number;
	precioUnitario: number;
	precioTotal: number;
	item: {
		id: number;
		nombre: string;
		unidad: string;
		categoria: string;
	};
}

export interface PresupuestoSeccion {
	id: number;
	nombre: string;
	items: PresupuestoItem[];
}

export interface Presupuesto {
	id: number;
	obraId: number;
	nombre: string;
	total: number;
	secciones: PresupuestoSeccion[];
}

// Fetch all presupuestos for an obra
async function fetchPresupuestos(obraId: number) {
	const response = await fetch(`/api/presupuestos?obraId=${obraId}`);
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Fetch single presupuesto
async function fetchPresupuesto(id: number) {
	const response = await fetch(`/api/presupuestos?id=${id}`);
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Create presupuesto
async function createPresupuesto(data: {
	obraId: number;
	nombre: string;
	secciones: Omit<PresupuestoSeccion, "id">[];
}) {
	const response = await fetch("/api/presupuestos", {
		method: "POST",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(data),
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Update presupuesto
async function updatePresupuesto(data: {
	id: number;
	nombre: string;
	secciones: Omit<PresupuestoSeccion, "id">[];
}) {
	const response = await fetch("/api/presupuestos", {
		method: "PUT",
		headers: {
			"Content-Type": "application/json",
		},
		body: JSON.stringify(data),
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

// Delete presupuesto
async function deletePresupuesto(id: number) {
	const response = await fetch(`/api/presupuestos?id=${id}`, {
		method: "DELETE",
	});
	if (!response.ok) {
		throw new Error("Network response was not ok");
	}
	return response.json();
}

export function usePresupuestos(obraId: number) {
	return useQuery<Presupuesto[]>({
		queryKey: queryKeys.presupuesto.byObraId(obraId),
		queryFn: () => fetchPresupuestos(obraId),
		enabled: !!obraId,
		initialData: () => {
			const data = getPersistedQueryData<"presupuestos">([
				"presupuestos",
				obraId.toString(),
			]);
			return data;
		},
		gcTime: 1000 * 60 * 30, // 30 minutes
		staleTime: 1000 * 60 * 5, // 5 minutes
	});
}

export function usePresupuesto(id: number) {
	return useQuery<Presupuesto>({
		queryKey: queryKeys.presupuesto.detail(id),
		queryFn: () => fetchPresupuesto(id),
		enabled: !!id,
		initialData: () => {
			const presupuestos = getPersistedQueryData<"presupuestos">([
				"presupuestos",
			]);
			if (presupuestos) {
				return presupuestos.find((p) => p.id === id);
			}
			return undefined;
		},
	});
}

export function useCreatePresupuesto() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: createPresupuesto,
		onSuccess: (data: Presupuesto) => {
			queryClient.invalidateQueries({
				queryKey: queryKeys.presupuesto.byObraId(data.obraId),
			});
		},
	});
}

export function useUpdatePresupuesto() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: updatePresupuesto,
		onSuccess: (data: Presupuesto) => {
			queryClient.invalidateQueries({
				queryKey: queryKeys.presupuesto.byObraId(data.obraId),
			});
			queryClient.invalidateQueries({
				queryKey: queryKeys.presupuesto.detail(data.id),
			});
		},
	});
}

export function useDeletePresupuesto() {
	const queryClient = useQueryClient();

	return useMutation({
		mutationFn: deletePresupuesto,
		onSuccess: (_data, variables) => {
			queryClient.invalidateQueries({ queryKey: queryKeys.presupuesto.all });
		},
	});
}

================
File: hooks/useQueries.ts
================
import { useQuery, UseQueryOptions } from "@tanstack/react-query";
import {
	fetchSelectedItems,
	queryKeys,
	getPersistedQueryData,
	persistQueryData,
} from "@/utils/api-client";
import type { TableItem, GroupedData, Medicion } from "@/utils/api-client";

interface PresupuestoData {
	presupuestoData: GroupedData;
	allElements: TableItem[];
	mediciones: Medicion[];
}

type QueryKey = ReturnType<typeof queryKeys.items.selected>;

export function useSelectedItems(
	ids: string[],
	options?: Omit<
		UseQueryOptions<PresupuestoData, Error, PresupuestoData, QueryKey>,
		"queryKey" | "queryFn"
	>
) {
	const queryKey = queryKeys.items.selected(ids);

	return useQuery<PresupuestoData, Error, PresupuestoData, QueryKey>({
		queryKey,
		queryFn: () => fetchSelectedItems(ids),
		initialData: () => {
			const persisted = getPersistedQueryData(queryKey.map(String));
			return persisted as PresupuestoData | undefined;
		},
		gcTime: 1000 * 60 * 30, // 30 minutes
		staleTime: 1000 * 60 * 5, // 5 minutes
		enabled: ids.length > 0,
		...options,
	});
}

// Add more custom hooks as needed for other data fetching operations

================
File: hooks/useQueryConfig.ts
================
import { QueryClient } from "@tanstack/react-query";
import { persistQueryData } from "@/utils/api-client";

export function useQueryConfig() {
	return new QueryClient({
		defaultOptions: {
			queries: {
				staleTime: 1000 * 60 * 5, // 5 minutes
				gcTime: 1000 * 60 * 30, // 30 minutes
				refetchOnWindowFocus: false,
				refetchOnMount: false, // Don't refetch on mount if we have cached data
				retry: 1, // Only retry failed requests once
			},
		},
	});
}

================
File: lib/hooks/use-mobile.tsx
================
"use client"

import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: lib/hooks/use-toast.ts
================
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: lib/hooks/useMedicion.ts
================
import { useState, useCallback, useEffect } from "react";
import {
	MedicionItem,
	MedicionData,
	Medicion,
	GroupedMedicionData,
} from "@/lib/types/medicion";
import { calculateMedicionAcumulado } from "@/utils/calculations";

interface UseMedicionProps {
	presupuestoId: string | number;
	initialData: GroupedMedicionData;
}

export function useMedicion({ presupuestoId, initialData }: UseMedicionProps) {
	const [data, setData] = useState<GroupedMedicionData>(initialData);
	const [mediciones, setMediciones] = useState<Medicion[]>([]);
	const [loading, setLoading] = useState(false);
	const [error, setError] = useState<string | null>(null);

	// Fetch mediciones history
	const fetchMediciones = useCallback(async () => {
		try {
			setLoading(true);
			const response = await fetch(
				`/api/presupuestos/${presupuestoId}/mediciones`
			);
			if (!response.ok) throw new Error("Error al cargar las mediciones.");

			const medicionesData = await response.json();
			setMediciones(medicionesData);

			// If we have mediciones, update the current data with the latest values
			if (medicionesData.length > 0) {
				const lastMedicion = medicionesData[0]; // mediciones are ordered by date desc
				setData((prev) => {
					const newData = { ...prev };
					Object.keys(newData).forEach((tag) => {
						newData[tag] = newData[tag].map((item) => {
							const lastMedicionItem = lastMedicion?.data?.items?.find(
								(mi) => String(mi.itemId) === String(item.id)
							);
							return {
								...item,
								anterior: lastMedicionItem?.acumulado || 0,
								presente: 0,
								acumulado: lastMedicionItem?.acumulado || 0,
							};
						});
					});
					return newData;
				});
			}
		} catch (err) {
			console.error("Error fetching mediciones:", err);
			setError("Error al cargar las mediciones.");
		} finally {
			setLoading(false);
		}
	}, [presupuestoId]);

	// Load latest medicion values on mount
	useEffect(() => {
		fetchMediciones();
	}, [fetchMediciones]);

	// Reset to latest medicion values
	const resetToLatestMedicion = useCallback(() => {
		if (!mediciones.length) return;

		const lastMedicion = mediciones[0]; // mediciones are ordered by date desc
		setData((prev) => {
			const newData = { ...prev };
			Object.keys(newData).forEach((tag) => {
				newData[tag] = newData[tag].map((item) => {
					const lastMedicionItem = lastMedicion?.data?.items?.find(
						(mi) => String(mi.itemId) === String(item.id)
					);
					return {
						...item,
						anterior: lastMedicionItem?.acumulado || 0,
						presente: 0,
						acumulado: lastMedicionItem?.acumulado || 0,
					};
				});
			});
			return newData;
		});
	}, [mediciones]);

	// View specific medicion details
	const viewMedicionDetail = useCallback((medicion: Medicion) => {
		setData((prev) => {
			const newData = { ...prev };
			Object.keys(newData).forEach((tag) => {
				newData[tag] = newData[tag].map((item) => {
					const medicionItem = medicion.data.items.find(
						(mi) => String(mi.itemId) === String(item.id)
					);
					return {
						...item,
						anterior: medicionItem?.anterior || 0,
						presente: medicionItem?.presente || 0,
						acumulado: medicionItem?.acumulado || 0,
					};
				});
			});
			return newData;
		});
	}, []);

	// Update medicion data
	const updateData = useCallback(
		(
			tag: string,
			itemId: string | number,
			key: keyof MedicionItem,
			value: string
		) => {
			setData((prev) => {
				const newData = { ...prev };
				const itemIndex = newData[tag].findIndex(
					(item) => String(item.id) === String(itemId)
				);

				if (itemIndex === -1) return prev;

				const item = { ...newData[tag][itemIndex] };
				const numValue = parseFloat(value) || 0;

				if (key === "presente") {
					item.presente = numValue;
					item.acumulado = calculateMedicionAcumulado(item.anterior, numValue);
				}

				newData[tag][itemIndex] = item;
				return newData;
			});
		},
		[]
	);

	// Save new medicion
	const saveMedicion = useCallback(async () => {
		try {
			setLoading(true);
			// Validate that at least one item has a presente value
			const hasChanges = Object.values(data)
				.flat()
				.some((item) => (item.presente || 0) > 0);

			if (!hasChanges) {
				throw new Error(
					'Debe ingresar al menos un valor en la columna "Presente" antes de guardar.'
				);
			}

			// Prepare medicion data
			const medicionData: MedicionData = {
				fecha: new Date().toISOString(),
				items: Object.values(data)
					.flat()
					.map((item) => ({
						itemId: item.id,
						anterior: item.anterior || 0,
						presente: item.presente || 0,
						acumulado: calculateMedicionAcumulado(
							item.anterior || 0,
							item.presente || 0
						),
					})),
			};

			// Save medicion
			const response = await fetch(
				`/api/presupuestos/${presupuestoId}/mediciones`,
				{
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify(medicionData),
				}
			);

			if (!response.ok) throw new Error("Error al guardar la medición.");

			// Refresh mediciones list and reset form
			await fetchMediciones();

			return true;
		} catch (err) {
			console.error("Error saving medicion:", err);
			setError(
				err instanceof Error ? err.message : "Error al guardar la medición."
			);
			throw err;
		} finally {
			setLoading(false);
		}
	}, [presupuestoId, data, fetchMediciones]);

	return {
		data,
		mediciones,
		loading,
		error,
		fetchMediciones,
		resetToLatestMedicion,
		viewMedicionDetail,
		updateData,
		saveMedicion,
	};
}

================
File: lib/prisma.ts
================
-- Create obras table
DROP TABLE IF EXISTS obras CASCADE;
CREATE TABLE obras (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(200) NOT NULL,
  ubicacion VARCHAR(200),
  empresa VARCHAR(100),
  fecha_inicio TIMESTAMP WITH TIME ZONE,
  fecha_fin TIMESTAMP WITH TIME ZONE,
  estado VARCHAR(50),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create items table
DROP TABLE IF EXISTS items CASCADE;
CREATE TABLE items (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  codigo VARCHAR(50) UNIQUE NOT NULL,
  nombre VARCHAR(200) NOT NULL,
  unidad VARCHAR(20) NOT NULL,
  categoria VARCHAR(100),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create precios table
DROP TABLE IF EXISTS precios CASCADE  ;
CREATE TABLE precios (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  item_id BIGINT REFERENCES items(id) ON DELETE CASCADE,
  precio DECIMAL(15,2) NOT NULL,
  fecha TIMESTAMP WITH TIME ZONE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Simplified presupuestos table with JSONB
DROP TABLE IF EXISTS presupuestos CASCADE ;
CREATE TABLE presupuestos (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  obra_id BIGINT REFERENCES obras(id) ON DELETE CASCADE,
  nombre VARCHAR(200) NOT NULL,
  total DECIMAL(15,2) NOT NULL,
  data JSONB NOT NULL, -- Store all sections and items here
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Simplified mediciones table with JSONB
DROP TABLE IF EXISTS mediciones CASCADE;
CREATE TABLE mediciones (
  id BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  obra_id BIGINT REFERENCES obras(id) ON DELETE CASCADE,
  periodo TIMESTAMP WITH TIME ZONE NOT NULL,
  data JSONB NOT NULL, -- Store all measurements here
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

// -- Create RLS policies
// ALTER TABLE obras ENABLE ROW LEVEL SECURITY;
// ALTER TABLE items ENABLE ROW LEVEL SECURITY;
// ALTER TABLE precios ENABLE ROW LEVEL SECURITY;
// ALTER TABLE presupuestos ENABLE ROW LEVEL SECURITY;
// ALTER TABLE mediciones ENABLE ROW LEVEL SECURITY;
// ALTER TABLE medicion_items ENABLE ROW LEVEL SECURITY;

// -- Create basic policies (you might want to adjust these based on your needs)
// CREATE POLICY "Enable read access for all users" ON obras FOR SELECT USING (true);
// CREATE POLICY "Enable read access for all users" ON items FOR SELECT USING (true);
// CREATE POLICY "Enable read access for all users" ON precios FOR SELECT USING (true);
// CREATE POLICY "Enable read access for all users" ON presupuestos FOR SELECT USING (true);
// CREATE POLICY "Enable read access for all users" ON mediciones FOR SELECT USING (true);
// CREATE POLICY "Enable read access for all users" ON medicion_items FOR SELECT USING (true);

// -- Add update triggers for updated_at
// CREATE OR REPLACE FUNCTION update_updated_at_column()
// RETURNS TRIGGER AS $$
// BEGIN
//     NEW.updated_at = now();
//     RETURN NEW;
// END;
// $$ language 'plpgsql';

// CREATE TRIGGER update_obras_updated_at
//     BEFORE UPDATE ON obras
//     FOR EACH ROW
//     EXECUTE PROCEDURE update_updated_at_column();

// -- Repeat for other tables...

================
File: lib/query-client.ts
================
import { QueryClient } from "@tanstack/react-query";
import { createSyncStoragePersister } from "@tanstack/query-sync-storage-persister";

const STALE_TIME = 1000 * 60 * 5; // 5 minutes
const GC_TIME = 1000 * 60 * 60 * 24; // 24 hours

// Create the client
const queryClient = new QueryClient({
	defaultOptions: {
		queries: {
			staleTime: STALE_TIME,
			gcTime: GC_TIME,
			refetchOnMount: false,
			refetchOnReconnect: true,
			refetchOnWindowFocus: false,
		},
	},
});

// Create the persister
const persister = createSyncStoragePersister({
	storage: typeof window !== "undefined" ? window.localStorage : undefined,
});

export { queryClient, persister };

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

================
File: middleware.ts
================
import { type NextRequest } from "next/server";
import { updateSession } from "@/utils/supabase/middleware";

export async function middleware(request: NextRequest) {
  return await updateSession(request);
}

export const config = {
  matcher: [
    /*
     * Match all request paths except:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - images - .svg, .png, .jpg, .jpeg, .gif, .webp
     * Feel free to modify this pattern to include more paths.
     */
    "/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)",
  ],
};

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
	"private": true,
	"scripts": {
		"dev": "next dev",
		"build": "next build",
		"start": "next start"
	},
	"dependencies": {
		"@dnd-kit/core": "^6.3.1",
		"@dnd-kit/modifiers": "^9.0.0",
		"@dnd-kit/sortable": "^10.0.0",
		"@radix-ui/react-avatar": "^1.1.2",
		"@radix-ui/react-checkbox": "^1.1.1",
		"@radix-ui/react-collapsible": "^1.1.2",
		"@radix-ui/react-dialog": "^1.1.5",
		"@radix-ui/react-dropdown-menu": "^2.1.1",
		"@radix-ui/react-label": "^2.1.0",
		"@radix-ui/react-popover": "^1.1.4",
		"@radix-ui/react-radio-group": "^1.2.2",
		"@radix-ui/react-scroll-area": "^1.2.2",
		"@radix-ui/react-select": "^2.1.4",
		"@radix-ui/react-separator": "^1.1.1",
		"@radix-ui/react-slot": "^1.1.2",
		"@radix-ui/react-switch": "^1.1.2",
		"@radix-ui/react-tabs": "^1.1.2",
		"@radix-ui/react-toast": "^1.1.5",
		"@radix-ui/react-tooltip": "^1.1.6",
		"@supabase/auth-helpers-nextjs": "^0.10.0",
		"@supabase/ssr": "latest",
		"@supabase/supabase-js": "latest",
		"@tailwindcss/container-queries": "^0.1.1",
		"@tanstack/query-sync-storage-persister": "^5.66.0",
		"@tanstack/react-query": "^5.66.0",
		"@tanstack/react-query-devtools": "^5.66.0",
		"@tanstack/react-query-persist-client": "^5.66.0",
		"@tanstack/react-table": "^8.20.6",
		"@tanstack/react-virtual": "^3.11.2",
		"@types/papaparse": "^5.3.15",
		"autoprefixer": "10.4.20",
		"class-variance-authority": "^0.7.0",
		"clsx": "^2.1.1",
		"cmdk": "^1.0.4",
		"date-fns": "^4.1.0",
		"fs": "^0.0.1-security",
		"fs-extra": "^11.3.0",
		"lodash": "^4.17.21",
		"lucide-react": "^0.468.0",
		"motion": "^12.4.1",
		"next": "latest",
		"next-themes": "^0.4.3",
		"papaparse": "^5.5.2",
		"prettier": "^3.3.3",
		"react": "19.0.0",
		"react-day-picker": "^8.10.1",
		"react-dom": "19.0.0",
		"react-scan": "^0.1.1",
		"react-use-measure": "^2.1.1",
		"shadcn": "^2.3.0"
	},
	"devDependencies": {
		"@eslint/eslintrc": "^3",
		"@types/lodash": "^4.17.15",
		"@types/node": "22.10.2",
		"@types/react": "^19.0.2",
		"@types/react-dom": "19.0.2",
		"eslint": "^9",
		"eslint-config-next": "15.1.2",
		"eslint-plugin-react-compiler": "^19.0.0-beta-27714ef-20250124",
		"postcss": "8.4.49",
		"tailwind-merge": "^2.5.2",
		"tailwindcss": "3.4.17",
		"tailwindcss-animate": "^1.0.7",
		"typescript": "5.7.2"
	}
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: README.md
================
<a href="https://demo-nextjs-with-supabase.vercel.app/">
  <img alt="Next.js and Supabase Starter Kit - the fastest way to build apps with Next.js and Supabase" src="https://demo-nextjs-with-supabase.vercel.app/opengraph-image.png">
  <h1 align="center">Next.js and Supabase Starter Kit</h1>
</a>

<p align="center">
 The fastest way to build apps with Next.js and Supabase
</p>

<p align="center">
  <a href="#features"><strong>Features</strong></a> ·
  <a href="#demo"><strong>Demo</strong></a> ·
  <a href="#deploy-to-vercel"><strong>Deploy to Vercel</strong></a> ·
  <a href="#clone-and-run-locally"><strong>Clone and run locally</strong></a> ·
  <a href="#feedback-and-issues"><strong>Feedback and issues</strong></a>
  <a href="#more-supabase-examples"><strong>More Examples</strong></a>
</p>
<br/>

## Features

- Works across the entire [Next.js](https://nextjs.org) stack
  - App Router
  - Pages Router
  - Middleware
  - Client
  - Server
  - It just works!
- supabase-ssr. A package to configure Supabase Auth to use cookies
- Styling with [Tailwind CSS](https://tailwindcss.com)
- Components with [shadcn/ui](https://ui.shadcn.com/)
- Optional deployment with [Supabase Vercel Integration and Vercel deploy](#deploy-your-own)
  - Environment variables automatically assigned to Vercel project

## Demo

You can view a fully working demo at [demo-nextjs-with-supabase.vercel.app](https://demo-nextjs-with-supabase.vercel.app/).

## Deploy to Vercel

Vercel deployment will guide you through creating a Supabase account and project.

After installation of the Supabase integration, all relevant environment variables will be assigned to the project so the deployment is fully functioning.

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&project-name=nextjs-with-supabase&repository-name=nextjs-with-supabase&demo-title=nextjs-with-supabase&demo-description=This+starter+configures+Supabase+Auth+to+use+cookies%2C+making+the+user%27s+session+available+throughout+the+entire+Next.js+app+-+Client+Components%2C+Server+Components%2C+Route+Handlers%2C+Server+Actions+and+Middleware.&demo-url=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2F&external-id=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&demo-image=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2Fopengraph-image.png)

The above will also clone the Starter kit to your GitHub, you can clone that locally and develop locally.

If you wish to just develop locally and not deploy to Vercel, [follow the steps below](#clone-and-run-locally).

## Clone and run locally

1. You'll first need a Supabase project which can be made [via the Supabase dashboard](https://database.new)

2. Create a Next.js app using the Supabase Starter template npx command

   ```bash
   npx create-next-app --example with-supabase with-supabase-app
   ```

   ```bash
   yarn create next-app --example with-supabase with-supabase-app
   ```

   ```bash
   pnpm create next-app --example with-supabase with-supabase-app
   ```

3. Use `cd` to change into the app's directory

   ```bash
   cd with-supabase-app
   ```

4. Rename `.env.example` to `.env.local` and update the following:

   ```
   NEXT_PUBLIC_SUPABASE_URL=[INSERT SUPABASE PROJECT URL]
   NEXT_PUBLIC_SUPABASE_ANON_KEY=[INSERT SUPABASE PROJECT API ANON KEY]
   ```

   Both `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` can be found in [your Supabase project's API settings](https://app.supabase.com/project/_/settings/api)

5. You can now run the Next.js local development server:

   ```bash
   npm run dev
   ```

   The starter kit should now be running on [localhost:3000](http://localhost:3000/).

6. This template comes with the default shadcn/ui style initialized. If you instead want other ui.shadcn styles, delete `components.json` and [re-install shadcn/ui](https://ui.shadcn.com/docs/installation/next)

> Check out [the docs for Local Development](https://supabase.com/docs/guides/getting-started/local-development) to also run Supabase locally.

## Feedback and issues

Please file feedback and issues over on the [Supabase GitHub org](https://github.com/supabase/supabase/issues/new/choose).

## More Supabase examples

- [Next.js Subscription Payments Starter](https://github.com/vercel/nextjs-subscription-payments)
- [Cookie-based Auth and the Next.js 13 App Router (free course)](https://youtube.com/playlist?list=PL5S4mPUpp4OtMhpnp93EFSo42iQ40XjbF)
- [Supabase Auth and the Next.js App Router](https://github.com/supabase/supabase/tree/master/examples/auth/nextjs)

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: utils/api-client.ts
================
import { createClient } from "@/utils/supabase/server";
import type { TableItem, GroupedData, Medicion } from "@/app/presupuesto/types";
import type { Obra } from "@/hooks/useObras";
import type { Presupuesto } from "@/hooks/usePresupuestos";

export type { TableItem, GroupedData, Medicion };

// API Functions
export const fetchSelectedItems = async (ids: string[]) => {
	const response = await fetch(`/api/items/selected?ids=${ids.join(",")}`);
	if (!response.ok) {
		throw new Error("Failed to fetch items");
	}
	return response.json();
};

// Cache Keys
export const queryKeys = {
	items: {
		all: ["items"] as const,
		selected: (ids: string[]) =>
			[...queryKeys.items.all, "selected", ids] as const,
	},
	presupuesto: {
		all: ["presupuestos"] as const,
		byObraId: (obraId: number) =>
			[...queryKeys.presupuesto.all, obraId] as const,
		detail: (id: number) =>
			[...queryKeys.presupuesto.all, "detail", id] as const,
	},
	mediciones: {
		all: ["mediciones"] as const,
		byObraId: (obraId: number) =>
			[...queryKeys.mediciones.all, obraId] as const,
		detail: (id: number) =>
			[...queryKeys.mediciones.all, "detail", id] as const,
	},
	obras: {
		all: ["obras"] as const,
		detail: (id: number) => [...queryKeys.obras.all, id] as const,
	},
};

// Types for cacheable data
type CacheableData = {
	obras?: Obra[];
	presupuestos?: Presupuesto[];
	mediciones?: Medicion[];
	items?: TableItem[];
	selectedItems?: {
		presupuestoData: GroupedData;
		allElements: TableItem[];
		mediciones: Medicion[];
	};
};

// Local Storage Persistence
const CACHE_PREFIX = "app_cache_";
const CACHE_TTL = 1000 * 60 * 30; // 30 minutes

export const persistQueryData = <T extends keyof CacheableData>(
	queryKey: string[],
	data: CacheableData[T]
) => {
	try {
		localStorage.setItem(
			`${CACHE_PREFIX}${JSON.stringify(queryKey)}`,
			JSON.stringify({
				data,
				timestamp: Date.now(),
			})
		);
	} catch (error) {
		console.error("Error persisting query data:", error);
	}
};

export const getPersistedQueryData = <T extends keyof CacheableData>(
	queryKey: string[]
): CacheableData[T] | undefined => {
	try {
		const cached = localStorage.getItem(
			`${CACHE_PREFIX}${JSON.stringify(queryKey)}`
		);
		if (!cached) return undefined;

		const { data, timestamp } = JSON.parse(cached);
		if (Date.now() - timestamp > CACHE_TTL) {
			localStorage.removeItem(`${CACHE_PREFIX}${JSON.stringify(queryKey)}`);
			return undefined;
		}

		return data as CacheableData[T];
	} catch (error) {
		console.error("Error reading persisted query data:", error);
		return undefined;
	}
};

================
File: utils/calculations.ts
================
import { PresupuestoItem } from "@/lib/types/presupuesto";
import { GroupedData } from "@/lib/types/common";

export function calculateItemTotal(
	quantity: number = 0,
	unitPrice: number = 0
): number {
	return quantity * unitPrice;
}

export function calculateGrandTotal(
	data: GroupedData<PresupuestoItem>
): number {
	return Object.values(data).reduce((total, items) => {
		return (
			total +
			items.reduce((sectionTotal, item) => {
				return sectionTotal + calculateItemTotal(item.quantity, item.unitPrice);
			}, 0)
		);
	}, 0);
}

export function calculateSectionRubros(
	data: GroupedData<PresupuestoItem>,
	grandTotal: number
): number[] {
	return Object.entries(data).map(([_, items]) => {
		const sectionTotal = items.reduce((sum, item) => {
			return sum + calculateItemTotal(item.quantity, item.unitPrice);
		}, 0);

		return grandTotal > 0 ? (sectionTotal * 100) / grandTotal : 0;
	});
}

export function calculateSectionIacums(
	data: GroupedData<PresupuestoItem>,
	grandTotal: number
): number[] {
	let runningTotal = 0;
	return Object.entries(data).map(([_, items]) => {
		const sectionTotal = items.reduce((sum, item) => {
			return sum + calculateItemTotal(item.quantity, item.unitPrice);
		}, 0);

		runningTotal += sectionTotal;
		return grandTotal > 0 ? (runningTotal * 100) / grandTotal : 0;
	});
}

export function calculateParcialPercentage(
	itemTotal: number,
	grandTotal: number
): number {
	return grandTotal > 0 ? (itemTotal * 100) / grandTotal : 0;
}

export function calculateMedicionAcumulado(
	anterior: number = 0,
	presente: number = 0
): number {
	return anterior + presente;
}

================
File: utils/supabase/check-env-vars.ts
================
// This check can be removed
// it is just for tutorial purposes

export const hasEnvVars =
  process.env.NEXT_PUBLIC_SUPABASE_URL &&
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

================
File: utils/supabase/client.ts
================
import { createBrowserClient } from "@supabase/ssr";

export const createClient = () =>
  createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
  );

================
File: utils/supabase/middleware.ts
================
import { createServerClient } from "@supabase/ssr";
import { type NextRequest, NextResponse } from "next/server";

export const updateSession = async (request: NextRequest) => {
	// This `try/catch` block is only here for the interactive tutorial.
	// Feel free to remove once you have Supabase connected.
	try {
		// Create an unmodified response
		let response = NextResponse.next({
			request: {
				headers: request.headers,
			},
		});

		const supabase = createServerClient(
			process.env.NEXT_PUBLIC_SUPABASE_URL!,
			process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
			{
				cookies: {
					getAll() {
						return request.cookies.getAll();
					},
					setAll(cookiesToSet) {
						cookiesToSet.forEach(({ name, value }) =>
							request.cookies.set(name, value)
						);
						response = NextResponse.next({
							request,
						});
						cookiesToSet.forEach(({ name, value, options }) =>
							response.cookies.set(name, value, options)
						);
					},
				},
			}
		);

		// This will refresh session if expired - required for Server Components
		// https://supabase.com/docs/guides/auth/server-side/nextjs
		const user = await supabase.auth.getUser();

		// protected routes
		if (request.nextUrl.pathname.startsWith("/protected") && user.error) {
			return NextResponse.redirect(new URL("/sign-in", request.url));
		}

		if (request.nextUrl.pathname === "/" && !user.error) {
			//this would redirect to protected page
			// return NextResponse.redirect(new URL("/protected", request.url));
		}

		return response;
	} catch (e) {
		// If you are here, a Supabase client could not be created!
		// This is likely because you have not set up environment variables.
		// Check out http://localhost:3000 for Next Steps.
		return NextResponse.next({
			request: {
				headers: request.headers,
			},
		});
	}
};

================
File: utils/supabase/server.ts
================
import { createServerClient } from "@supabase/ssr";
import { cookies } from "next/headers";

export const createClient = async () => {
  const cookieStore = await cookies();

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll();
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) => {
              cookieStore.set(name, value, options);
            });
          } catch (error) {
            // The `set` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    },
  );
};

================
File: utils/utils.ts
================
import { redirect } from "next/navigation";

/**
 * Redirects to a specified path with an encoded message as a query parameter.
 * @param {('error' | 'success')} type - The type of message, either 'error' or 'success'.
 * @param {string} path - The path to redirect to.
 * @param {string} message - The message to be encoded and added as a query parameter.
 * @returns {never} This function doesn't return as it triggers a redirect.
 */
export function encodedRedirect(
  type: "error" | "success",
  path: string,
  message: string,
) {
  return redirect(`${path}?${type}=${encodeURIComponent(message)}`);
}



================================================================
End of Codebase
================================================================
