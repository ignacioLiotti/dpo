This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
[id]/create/certificado/CertificadoCreateClient.tsx
[id]/create/certificado/page.tsx
[id]/create/medicion/MedicionCreateClient.tsx
[id]/create/medicion/page.tsx
[id]/create/presupuesto/page.tsx
[id]/create/presupuesto/PresupuestoCreateClient.tsx
[id]/ObraPage.tsx
[id]/page.tsx
[id]/PresupuestosSelector.tsx
create/page.tsx
page.tsx

================================================================
Files
================================================================

================
File: [id]/create/certificado/CertificadoCreateClient.tsx
================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { format, parseISO } from "date-fns";
import { es } from "date-fns/locale";
import { Label } from "@/components/ui/label";
import { MedicionesEditor } from "@/components/editores/MedicionesEditor";
import type { Medicion as MedicionOutput } from "@/hooks/useMediciones";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';
import { Table, TableHeader, TableBody, TableCell, TableRow, TableHead } from "@/components/ui/table";
import { EditableInput } from "@/components/Table/EditableInput";

interface MedicionInput {
  id: number;
  obra_id: number;
  periodo: string;
  data: {
    secciones: Array<{
      nombre: string;
      items: Array<{
        id: string;
        anterior: number;
        presente: number;
        acumulado: number;
      }>;
    }>;
  };
  created_at: string;
  updated_at: string;
}

interface CertificadoCreateClientProps {
  obraId: string;
  obraName: string;
  presupuestoData: Record<string, any>;
  selectedMedicion: MedicionInput;
  fechaInicio: string;
  fechaFin: string;
  obraData: Record<string, any>;
  display?: boolean;
  certificado?: {
    id: number;
    obra_id: number;
    medicion_id: number;
    periodo: string;
    data: {
      editedData: Record<string, any>;
      presupuestoData: Record<string, any>;
      progress: ProgressData[];
    };
    created_at: string;
  };
}

interface TableItem {
  [key: string]: string | number;
}

interface ProgressData {
  month: string;
  value1: number;
  value2: number;
  value3: number;
}

const InfoRow = ({ label, value, path, onChange, editable }: {
  label: string;
  value: string | number;
  path: string;
  onChange: (path: string, value: any) => void;
  editable: boolean;
}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editValue, setEditValue] = useState(value);

  const handleChange = (newValue: string) => {
    setEditValue(newValue);
    onChange(path, newValue);
  };

  return (
    <div className="flex justify-between group relative">
      <span className="text-gray-600">{label}</span>
      {editable ? (
        <Input
          icon={false}
          value={value}
          onChange={(e) => handleChange(e.target.value)}
          className="font-medium border-none bg-transparent rounded-none shadow-none outline outline-2 outline-transparent hover:underline decoration-gray-300 hover:outline-gray-300 focus:outline-gray-300 focus-visible:outline-gray-300 focus-visible:ring-0 focus:border-none transition-all"
        />
      ) : (
        <span className="block p-2 hover:bg-gray-50 rounded transition-colors">
          {value}
        </span>
      )}
    </div>
  );
};

const EditableInpuasdasdasdt = ({ value, path, onChange }: {
  value: string | number;
  path: string;
  onChange: (path: string, value: any) => void;
}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editValue, setEditValue] = useState(value);

  const handleChange = (newValue: string) => {
    setEditValue(newValue);
    onChange(path, newValue);
  };

  return (
    <div
      className="group relative"
      onMouseEnter={() => setIsEditing(true)}
      onMouseLeave={() => setIsEditing(false)}
    >
      {isEditing ? (
        <Input
          value={editValue}
          onChange={(e) => handleChange(e.target.value)}
          className="w-full border-none bg-gray-50 focus:ring-2 focus:ring-blue-500"
        />
      ) : (
        <span className="block p-2 hover:bg-gray-50 rounded transition-colors">
          {value}
        </span>
      )}
    </div>
  );
};

// Add new components for array fields
const ArrayTable = ({ items, path, columns, onChange }: {
  items: any[];
  path: string;
  columns: { key: string; label: string }[];
  onChange: (path: string, value: any) => void;
}) => {
  return (
    <Table>
      <TableHeader>
        <TableRow>
          {columns.map(col => (
            <TableHead key={col.key}>{col.label}</TableHead>
          ))}
        </TableRow>
      </TableHeader>
      <TableBody>
        {items.map((item, index) => (
          <TableRow key={index}>
            {columns.map(col => (
              <TableCell key={col.key}>
                <EditableInput
                  editable
                  value={item[col.key] || ''}
                  onChange={(val) => onChange(`${path}.${index}.${col.key}`, val)}
                />
              </TableCell>
            ))}
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};

export default function CertificadoCreateClient({
  obraId,
  obraName,
  presupuestoData,
  selectedMedicion,
  fechaInicio,
  fechaFin,
  obraData,
  display = false,
  certificado,
}: CertificadoCreateClientProps) {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [editedData, setEditedData] = useState(certificado?.data.editedData || obraData);
  const [progress, setProgress] = useState<ProgressData[]>(() => {
    if (certificado?.data.progress) {
      return certificado.data.progress;
    }

    // Generate months between fechaInicio and fechaFin
    const months = [];
    let currentDate = new Date(fechaInicio);
    const endDate = new Date(fechaFin);

    console.log('fechaInicio', fechaInicio);
    console.log('fechaFin', fechaFin);

    console.log('fechacurrentDate', currentDate);
    console.log('fechaendDate', endDate);

    while (currentDate <= endDate) {
      months.push({
        month: format(currentDate, 'MMM yyyy', { locale: es }),
        value1: 0,
        value2: 0,
        value3: 0
      });
      currentDate = new Date(currentDate.setMonth(currentDate.getMonth() + 1));
    }

    console.log('months', months);

    return months;
  });

  console.log('selectedMedicion', selectedMedicion);

  if (!selectedMedicion.periodo) {
    return 'bolas'
  }

  const handleDataChange = (path: string, value: any) => {
    const keys = path.split('.');
    const lastKey = keys.pop()!;
    let current = editedData;

    for (const key of keys) {
      current = current[key];
    }

    current[lastKey] = value;
    setEditedData({ ...editedData });
  };

  const handleProgressChange = (index: number, field: 'value1' | 'value2' | 'value3', value: string) => {
    const newProgress = [...progress];
    newProgress[index] = {
      ...newProgress[index],
      [field]: Number(value) || 0
    };
    setProgress(newProgress);
  };

  // Transform presupuestoData for MedicionesEditor
  const transformedPresupuestoData = Object.entries(presupuestoData).reduce((acc, [section, items]) => {
    if (Array.isArray(items)) {
      acc[section] = items.map(item => ({
        id: String(item.id),
        name: item.name,
        totalPrice: item.totalPrice
      }));
    }
    return acc;
  }, {} as Record<string, { id: string; name: string; totalPrice: number }[]>);

  // Transform medicion data for MedicionesEditor
  //@ts-ignore
  const transformedMedicion: MedicionOutput = {
    id: selectedMedicion.id,
    month: selectedMedicion.periodo,
    measurements: selectedMedicion.data.secciones.reduce((acc: Record<string, { monthlyProgress: number; cumulativePrevious: number; cumulativeCurrent: number }>, seccion) => {
      seccion.items.forEach(item => {
        acc[item.id] = {
          monthlyProgress: item.presente,
          cumulativePrevious: item.anterior,
          cumulativeCurrent: item.acumulado
        };
      });
      return acc;
    }, {})
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    setError(null);

    try {
      const response = await fetch("/api/certificados", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          obra_id: Number(obraId),
          medicion_id: selectedMedicion.id,
          periodo: selectedMedicion.periodo,
          data: {
            editedData,
            presupuestoData,
            progress,
          }
        }),
      });

      if (!response.ok) {
        throw new Error("Error al crear el certificado");
      }

      router.push(`/obras/${obraId}`);
      router.refresh();
    } catch (err) {
      setError(err instanceof Error ? err.message : "Error desconocido");
    } finally {
      setIsSubmitting(false);
    }
  };

  if (error) {
    return (
      <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
        {error}
      </div>
    );
  }



  const totalItems = selectedMedicion.data.secciones.reduce((acc, seccion) => acc + seccion.items.length, 0);
  const totalAcumulado = selectedMedicion.data.secciones.reduce((acc, seccion) =>
    acc + seccion.items.reduce((itemAcc, item) => itemAcc + item.acumulado, 0), 0);
  const promedioAcumulado = totalItems > 0 ? (totalAcumulado / totalItems).toFixed(2) : "0";

  return (
    <div className="space-y-6">
      {!display && (
        <div className="flex justify-between items-center mb-6">
          <Button
            onClick={handleSubmit}
            disabled={isSubmitting}
          >
            {isSubmitting ? "Guardando..." : "Generar Certificado"}
          </Button>
        </div>
      )}

      <div className="space-y-8">
        <Card className="max-w-[1000px] mx-auto p-8 bg-white">
          {/* Header */}
          <div className="flex justify-between items-start mb-12 bg-gray-50 -m-8 p-8 rounded-lg">
            <div>
              <div className="w-16 h-16 bg-gray-200 mb-4"></div>
              <h1 className="text-xl font-bold text-gray-800">Gobierno Provincial</h1>
              <div className="text-gray-600">
                <p>Ministerio de Obras y Servicios Públicos</p>
                <p>DPO</p>
              </div>
            </div>
            <div className="text-right">
              <h2 className="text-3xl font-bold text-gray-800 mb-2">CERTIFICADO DE OBRA</h2>
              <div className="text-gray-600">
                <p>N° Expediente: {editedData.nroExpediente || '-'}</p>
                <p>Fecha: {format(parseISO(selectedMedicion.periodo), 'dd/MM/yyyy')}</p>
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="space-y-8">
            {/* Basic Info Section */}
            <div className="grid grid-cols-2 gap-8">
              <div>
                <h3 className="text-[14px] font-bold bg-input/20 rounded-lg p-2 pl-4 flex items-center justify-between gap-2">Información Básica</h3>
                <div className="space-y-2 px-4">
                  <InfoRow label="UBICACIÓN" value={editedData.ubicacion || ''} path="ubicacion" onChange={handleDataChange} editable={!display} />
                  <InfoRow label="CONTRATISTA" value={editedData.contratista || ''} path="contratista" onChange={handleDataChange} editable={!display} />
                  <InfoRow label="N° LICITACIÓN" value={editedData.nroLicitacion || ''} path="nroLicitacion" onChange={handleDataChange} editable={!display} />
                  <InfoRow label="N° RESOLUCIÓN" value={editedData.nroResolucion || ''} path="nroResolucion" onChange={handleDataChange} editable={!display} />
                  <InfoRow label="IMPUTACIÓN" value={editedData.imputacion || ''} path="imputacion" onChange={handleDataChange} editable={!display} />
                </div>
              </div>
              <div>
                <h3 className="text-[14px] font-bold bg-input/20 rounded-lg p-2 pl-4 flex items-center justify-between gap-2">Fechas y Plazos</h3>
                <div className="space-y-2 px-4">
                  <InfoRow label="FECHA DE CONTRATO" value={editedData.fechaDeContrato || ''} path="fechaDeContrato" onChange={handleDataChange} editable={!display} />
                  <InfoRow label="FECHA DE INICIO" value={editedData.fechaDeInicio || ''} path="fechaDeInicio" onChange={handleDataChange} editable={!display} />
                  <InfoRow label="PLAZO (DÍAS)" value={editedData.plazoDias || ''} path="plazoDias" onChange={handleDataChange} editable={!display} />
                </div>
              </div>
            </div>

            {/* Table Sections */}
            <div className="space-y-6">
              <div>
                <h3 className="text-[14px] font-bold bg-input/20 rounded-lg p-2 pl-4 flex items-center justify-between gap-2">Prórrogas</h3>
                <Table>
                  <TableHeader>
                    <TableRow className="border-b border-gray-200">
                      <TableHead className="text-left py-2 text-gray-600 bg-white">N° Prórroga</TableHead>
                      <TableHead className="text-left py-2 text-gray-600 bg-white">Disposición</TableHead>
                      <TableHead className="text-left py-2 text-gray-600 bg-white">Plazo</TableHead>
                      <TableHead className="text-left py-2 text-gray-600 bg-white">Fecha Finalización</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {(editedData.prorroga || []).map((item: TableItem, index: number) => (
                      <TableRow key={index}>
                        <TableCell className="py-2 border-r hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text">
                          <EditableInput
                            editable={!display}
                            value={item.nroProrroga || ''}
                            onChange={(val) => handleDataChange(`prorroga.${index}.nroProrroga`, val)}
                          />
                        </TableCell>
                        <TableCell className="py-2 border-r hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text">
                          <EditableInput
                            editable={!display}
                            value={item.disposicion || ''}
                            onChange={(val) => handleDataChange(`prorroga.${index}.disposicion`, val)}
                          />
                        </TableCell>
                        <TableCell className="py-2 border-r hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text">
                          <EditableInput
                            editable={!display}
                            value={item.plazo || ''}
                            onChange={(val) => handleDataChange(`prorroga.${index}.plazo`, val)}
                          />
                        </TableCell>
                        <TableCell className="py-2 hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text">
                          <EditableInput
                            editable={!display}
                            value={item.fechaDeFinalizacion || ''}
                            onChange={(val) => handleDataChange(`prorroga.${index}.fechaDeFinalizacion`, val)}
                          />
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>

              <div>
                <h3 className="text-[14px] font-bold bg-input/20 rounded-lg p-2 pl-4 flex items-center justify-between gap-2">Ampliaciones</h3>
                <Table>
                  <TableHeader>
                    <TableRow className="border-b border-gray-200">
                      <TableHead className="text-left py-2 text-gray-600 bg-white">N° Ampliación</TableHead>
                      <TableHead className="text-left py-2 text-gray-600 bg-white">N° Resolución</TableHead>
                      <TableHead className="text-left py-2 text-gray-600 bg-white">N° Expediente</TableHead>
                      <TableHead className="text-right py-2 text-gray-600 bg-white">Monto</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {(editedData.Ampliacion || []).map((item: TableItem, index: number) => (
                      <TableRow key={index}>
                        <TableCell className="py-2 border-r hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text">
                          <EditableInput
                            editable={!display}
                            value={item.nroAmpliacion || ''}
                            onChange={(val) => handleDataChange(`Ampliacion.${index}.nroAmpliacion`, val)}
                          />
                        </TableCell>
                        <TableCell className="py-2 border-r hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text">
                          <EditableInput
                            editable={!display}
                            value={item.nroResolucion || ''}
                            onChange={(val) => handleDataChange(`Ampliacion.${index}.nroResolucion`, val)}
                          />
                        </TableCell>
                        <TableCell className="py-2 border-r hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text">
                          <EditableInput
                            editable={!display}
                            value={item.nroExpediente || ''}
                            onChange={(val) => handleDataChange(`Ampliacion.${index}.nroExpediente`, val)}
                          />
                        </TableCell>
                        <TableCell className="py-2 text-right hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text">
                          <EditableInput
                            editable={!display}
                            value={item.Monto || ''}
                            onChange={(val) => handleDataChange(`Ampliacion.${index}.Monto`, val)}
                          />
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </div>

            {/* Financial Information */}
            <div className="grid grid-cols-2 gap-8">
              <div>
                <h3 className="text-[14px] font-bold bg-input/20 rounded-lg p-2 pl-4 flex items-center justify-between gap-2">Balance</h3>
                <div className="space-y-2 px-4">
                  {Object.entries(editedData.Balance || {}).map(([key, value]) => (
                    <InfoRow
                      key={key}
                      label={key.toUpperCase()}
                      value={value as string}
                      path={`Balance.${key}`}
                      onChange={handleDataChange}
                      editable={!display}
                    />
                  ))}
                </div>
              </div>
              <div>
                <h3 className="text-[14px] font-bold bg-input/20 rounded-lg p-2 pl-4 flex items-center justify-between gap-2">Certificación</h3>
                <div className="space-y-2 px-4">
                  {Object.entries(editedData.Certificacion || {}).map(([key, value]) => (
                    <InfoRow
                      key={key}
                      label={key.toUpperCase()}
                      value={value as string}
                      path={`Certificacion.${key}`}
                      onChange={handleDataChange}
                      editable={!display}
                    />
                  ))}
                </div>
              </div>
            </div>

            {/* Guarantees */}
            <div>
              <h3 className="text-[14px] font-bold bg-input/20 rounded-lg p-2 pl-4 flex items-center justify-between gap-2">Garantías</h3>
              <Table>
                <TableHeader>
                  <TableRow className="border-b border-gray-200">
                    <TableHead className="text-left py-2 text-gray-600 bg-white">N° Póliza</TableHead>
                    <TableHead className="text-left py-2 text-gray-600 bg-white">Suma Asegurada</TableHead>
                    <TableHead className="text-left py-2 text-gray-600 bg-white">Nombre</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {(editedData.garantias || []).map((item: TableItem, index: number) => (
                    <TableRow key={index}>
                      <TableCell className="py-2 border-r hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text">
                        <EditableInput
                          editable={!display}
                          value={item.nroPoliza || ''}
                          onChange={(val) => handleDataChange(`garantias.${index}.nroPoliza`, val)}
                        />
                      </TableCell>
                      <TableCell className="py-2 border-r hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text">
                        <EditableInput
                          editable={!display}
                          value={item.sumaPoliza || ''}
                          onChange={(val) => handleDataChange(`garantias.${index}.sumaPoliza`, val)}
                        />
                      </TableCell>
                      <TableCell className="py-2 hover:shadow-[inset_0px_0px_0px_2px_rgba(188,202,220,1)] cursor-text ">
                        <EditableInput
                          editable={!display}
                          value={item.nombrePoliza || ''}
                          onChange={(val) => handleDataChange(`garantias.${index}.nombrePoliza`, val)}
                        />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>

            {/* Additional Information */}
            <div>
              <h3 className="text-[14px] font-bold bg-input/20 rounded-lg p-2 pl-4 flex items-center justify-between gap-2">Información Adicional</h3>
              <div className="grid grid-cols-2 gap-8 px-4">
                <div>
                  <h4 className="text-gray-600 text-sm mb-1">AUTORES</h4>
                  {(editedData.autores || []).map((autor: string, index: number) => (
                    <EditableInput
                      editable={!display}
                      key={index}
                      value={autor}
                      onChange={(val) => handleDataChange(`autores.${index}`, val)}
                    />
                  ))}
                </div>
                <div>
                  <h4 className="text-gray-600 text-sm mb-1">LINKS</h4>
                  {(editedData.links || []).map((link: string, index: number) => (
                    <EditableInput
                      editable={!display}
                      key={index}
                      value={link}
                      onChange={(val) => handleDataChange(`links.${index}`, val)}
                    />
                  ))}
                </div>
              </div>
            </div>
          </div>
        </Card>

        {/* Page 2: Medicion Details */}
        <h2 className="text-xl font-semibold mb-4">Detalles de la Medición</h2>
        <MedicionesEditor
          medicion={transformedMedicion}
          presupuestoData={certificado?.data.presupuestoData || transformedPresupuestoData}
          display={true}
          obraId={Number(obraId)}
        />

        {/* Page 3: Summary */}
        <Card className="p-6 max-w-[1000px] mx-auto">
          <h2 className="text-xl font-semibold mb-4">Resumen del Certificado</h2>
          <div className="space-y-6">
            <div className="grid grid-cols-4 gap-4">
              <div className="space-y-2">
                <Label>Obra</Label>
                <p className="text-muted-foreground">{obraName}</p>
              </div>
              <div className="space-y-2">
                <Label>Período</Label>
                <p className="text-muted-foreground">
                  {format(parseISO(selectedMedicion.periodo), 'MMMM yyyy', { locale: es })}
                </p>
              </div>
              <div className="space-y-2">
                <Label>Items Medidos</Label>
                <p className="text-muted-foreground">
                  {totalItems} items
                </p>
              </div>
              <div className="space-y-2">
                <Label>Progreso Promedio</Label>
                <p className="text-muted-foreground">
                  {promedioAcumulado}%
                </p>
              </div>
            </div>

            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium">Progreso Mensual</h3>
                <div className="flex gap-4 items-center">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                    <span className="text-sm text-gray-600">Línea 1</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-green-500"></div>
                    <span className="text-sm text-gray-600">Línea 2</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-purple-500"></div>
                    <span className="text-sm text-gray-600">Línea 3</span>
                  </div>
                </div>
              </div>

              <div className="w-full overflow-x-auto">
                <LineChart
                  width={800}
                  height={400}
                  data={progress}
                  margin={{ top: 5, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis domain={[0, 100]} />
                  <Tooltip />
                  <Legend />
                  <Line
                    type="monotone"
                    dataKey="value1"
                    stroke="#3b82f6"
                    name="Línea 1"
                    strokeWidth={2}
                  />
                  <Line
                    type="monotone"
                    dataKey="value2"
                    stroke="#22c55e"
                    name="Línea 2"
                    strokeWidth={2}
                  />
                  <Line
                    type="monotone"
                    dataKey="value3"
                    stroke="#a855f7"
                    name="Línea 3"
                    strokeWidth={2}
                  />
                </LineChart>
              </div>

              <div className="w-full overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Mes</TableHead>
                      <TableHead>Línea 1 (%)</TableHead>
                      <TableHead>Línea 2 (%)</TableHead>
                      <TableHead>Línea 3 (%)</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {progress.map((item, index) => (
                      <TableRow key={item.month}>
                        <TableCell>{item.month}</TableCell>
                        <TableCell>
                          <Input
                            type="number"
                            min="0"
                            max="100"
                            value={item.value1}
                            onChange={(e) => handleProgressChange(index, 'value1', e.target.value)}
                            className="w-24"
                            disabled={display}
                          />
                        </TableCell>
                        <TableCell>
                          <Input
                            type="number"
                            min="0"
                            max="100"
                            value={item.value2}
                            onChange={(e) => handleProgressChange(index, 'value2', e.target.value)}
                            className="w-24"
                            disabled={display}
                          />
                        </TableCell>
                        <TableCell>
                          <Input
                            type="number"
                            min="0"
                            max="100"
                            value={item.value3}
                            onChange={(e) => handleProgressChange(index, 'value3', e.target.value)}
                            className="w-24"
                            disabled={display}
                          />
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>

            </div>
          </div>
        </Card>
      </div>
    </div>
  );
}

================
File: [id]/create/certificado/page.tsx
================
import { createClient } from "@/utils/supabase/server";
import { redirect } from "next/navigation";
import CertificadoCreateClient from "./CertificadoCreateClient";

interface PageProps {
  params: Promise<{
    id: string;
  }>;
  searchParams: Promise<{
    presupuestoId?: string;
    medicionId?: string;
  }>;
}

export default async function CreateCertificadoPage({ params, searchParams }: PageProps) {
  const { id } = await params;
  const { presupuestoId, medicionId } = await searchParams;
  const supabase = await createClient();

  if (!presupuestoId) {
    redirect(`/obras/${id}?error=no-presupuesto-selected`);
  }

  if (!medicionId) {
    redirect(`/obras/${id}?error=no-medicion-selected`);
  }

  // Verify obra exists
  const { data: obra, error: obraError } = await supabase
    .from("obras")
    .select("*")
    .eq("id", id)
    .single();

  if (obraError || !obra) {
    redirect("/obras");
  }

  // Get the specific presupuesto
  const { data: presupuesto, error: presupuestoError } = await supabase
    .from("presupuestos")
    .select("*")
    .eq("id", presupuestoId)
    .single();

  if (presupuestoError || !presupuesto) {
    redirect(`/obras/${id}?error=invalid-presupuesto`);
  }

  // Verify the presupuesto belongs to this obra
  if (presupuesto.obra_id !== Number(id)) {
    redirect(`/obras/${id}?error=presupuesto-mismatch`);
  }

  // Get the specific medicion
  const { data: medicion, error: medicionError } = await supabase
    .from("mediciones")
    .select("*")
    .eq("id", medicionId)
    .single();

  if (medicionError || !medicion) {
    redirect(`/obras/${id}?error=invalid-medicion`);
  }

  // Verify the medicion belongs to this obra
  if (medicion.obra_id !== Number(id)) {
    redirect(`/obras/${id}?error=medicion-mismatch`);
  }

  // Parse the obra data
  const obraData = obra.data ?
    typeof obra.data === 'string' ? JSON.parse(obra.data) : obra.data
    : {};

  return (
    <div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">Crear Certificado para {obra.nombre}</h1>
      <p className="text-sm text-muted-foreground mb-6">
        Presupuesto: {presupuesto.nombre} - Total: ${presupuesto.total.toLocaleString('es-AR')}
      </p>
      <CertificadoCreateClient
        obraId={id}
        obraName={obra.nombre}
        presupuestoData={presupuesto.data}
        selectedMedicion={medicion}
        fechaInicio={obra.fecha_inicio}
        fechaFin={obra.fecha_fin}
        obraData={obraData}
      />
    </div>
  );
}

================
File: [id]/create/medicion/MedicionCreateClient.tsx
================
"use client";

import { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { MedicionesEditor } from "@/components/editores/MedicionesEditor";
import type { Medicion } from "@/hooks/useMediciones";
import { format, addMonths, isBefore, isAfter, startOfMonth, isSameMonth } from "date-fns";
import { es } from "date-fns/locale";
import { ScrollArea, ScrollBar } from "@/components/ui/scroll-area";

interface PresupuestoItem {
  id: number;
  name: string;
  unit: string;
  price: number;
  rubro: number;
  quantity?: number;
  totalPrice?: number;
}

interface MedicionCreateClientProps {
  obraId: string;
  obraName: string;
  presupuestoData: Record<string, PresupuestoItem[]>;
  fechaInicio: string;
  fechaFin: string;
}

export default function MedicionCreateClient({
  obraId,
  obraName,
  presupuestoData,
  fechaInicio,
  fechaFin,
}: MedicionCreateClientProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [currentDate, setCurrentDate] = useState<Date>(() => {
    const urlPeriod = searchParams.get('periodo');
    if (urlPeriod) {
      // Parse the date string and adjust for timezone
      const [year, month, day] = urlPeriod.split('-').map(Number);
      const date = new Date(year, month - 1, day); // month is 0-based in JS Date
      return date;
    }
    const startDate = new Date(fechaInicio);
    const endDate = new Date(fechaFin);
    const today = startOfMonth(new Date());

    // If today is within the range, use it
    if (isBefore(today, endDate) && isAfter(today, startDate)) {
      return today;
    }
    // Otherwise use the start date
    return startDate;
  });

  // Create an empty medicion structure
  //@ts-ignore
  const emptyMedicion: Medicion = {
    id: 0,
    month: currentDate.toISOString(),
    measurements: {},
  };

  if (!presupuestoData) {
    return <div>No se encontró presupuesto</div>;
  }

  // Get all months between start and end date
  const getMonthsInRange = () => {
    const months = [];
    let currentMonth = startOfMonth(new Date(fechaInicio));
    const endDate = startOfMonth(new Date(fechaFin));

    while (isBefore(currentMonth, endDate) || isSameMonth(currentMonth, endDate)) {
      months.push(new Date(currentMonth));
      currentMonth = addMonths(currentMonth, 1);
    }
    return months;
  };

  const monthsInRange = getMonthsInRange();

  0  // Transform presupuestoData into the format expected by MedicionesEditor
  const transformedPresupuestoData = Object.entries(presupuestoData).reduce(
    (acc, [sectionName, items]) => {
      // Skip empty sections or the 'categoria' section if it's empty
      console.log('items', items)
      if (!items || items.length === 0 || (sectionName === 'categoria' && items.length === 1 && items[0].name === 'item')) {
        return acc;
      }

      acc[sectionName] = items.map((item) => ({
        id: String(item.id),
        name: item.name,
        totalPrice: item.price * (item.quantity || 1), // Use quantity if available, default to 1
      }));
      return acc;
    },
    {} as Record<string, { id: string; name: string; totalPrice: number }[]>
  );

  const handleMonthChange = (newDate: Date) => {
    setCurrentDate(newDate);
    const formattedDate = format(newDate, 'yyyy-MM-dd');
    const params = new URLSearchParams(searchParams.toString());
    params.set('periodo', formattedDate);
    router.push(`?${params.toString()}`);
  };

  return (
    <div>
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      )}

      <div className="mb-6">
        <h3 className="text-sm font-medium text-gray-700 mb-3">
          Seleccione un período:
        </h3>
        <ScrollArea className="w-full whitespace-nowrap rounded-md border">
          <div className="flex p-4 gap-2">
            {monthsInRange.map((date, index) => {
              const isSelected = isSameMonth(date, currentDate);
              return (
                <button
                  key={date.toISOString()}
                  onClick={() => handleMonthChange(date)}
                  className={`
                    inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium
                    transition-colors min-w-[50px] justify-center
                    ${isSelected
                      ? 'bg-primary text-primary-foreground'
                      : 'bg-muted hover:bg-muted/80 text-muted-foreground'
                    }
                  `}
                >
                  {format(date, 'MMMM yyyy', { locale: es })}
                </button>
              );
            })}
          </div>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </div>

      <MedicionesEditor
        medicion={{
          ...emptyMedicion,
          month: currentDate.toISOString(),
        }}
        presupuestoData={transformedPresupuestoData}
        display={false}
        obraId={Number(obraId)}
      />
    </div>
  );
}

================
File: [id]/create/medicion/page.tsx
================
import { createClient } from "@/utils/supabase/server";
import { redirect } from "next/navigation";
import MedicionCreateClient from "./MedicionCreateClient";

interface PageProps {
  params: Promise<{
    id: string;
  }>;
  searchParams: Promise<{
    presupuestoId?: string;
  }>;
}

export default async function CreateMedicionPage({ params, searchParams }: PageProps) {
  const { id } = await params;
  const { presupuestoId } = await searchParams;
  const supabase = await createClient();

  if (!presupuestoId) {
    redirect(`/obras/${id}?error=no-presupuesto-selected`);
  }

  // Verify obra exists
  const { data: obra, error: obraError } = await supabase
    .from("obras")
    .select("*")
    .eq("id", id)
    .single();

  if (obraError || !obra) {
    redirect("/obras");
  }

  // Get the specific presupuesto
  const { data: presupuesto, error: presupuestoError } = await supabase
    .from("presupuestos")
    .select("*")
    .eq("id", presupuestoId)
    .single();

  if (presupuestoError || !presupuesto) {
    redirect(`/obras/${id}?error=invalid-presupuesto`);
  }

  // Verify the presupuesto belongs to this obra
  if (presupuesto.obra_id !== Number(id)) {
    redirect(`/obras/${id}?error=presupuesto-mismatch`);
  }

  const presupuestoData = presupuesto.data;

  // Validate presupuesto data structure
  if (!presupuestoData || typeof presupuestoData !== 'object') {
    redirect(`/obras/${id}?error=invalid-presupuesto-data`);
  }

  // Validate obra dates
  if (!obra.fecha_inicio || !obra.fecha_fin) {
    redirect(`/obras/${id}?error=invalid-obra-dates`);
  }

  return (
    <div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">Crear Medición para {obra.nombre}</h1>
      <p className="text-sm text-muted-foreground mb-6">
        Presupuesto: {presupuesto.nombre} - Total: ${presupuesto.total.toLocaleString('es-AR')}
      </p>
      <MedicionCreateClient
        obraId={id}
        obraName={obra.nombre}
        presupuestoData={presupuestoData}
        fechaInicio={obra.fecha_inicio}
        fechaFin={obra.fecha_fin}
      />
    </div>
  );
}

================
File: [id]/create/presupuesto/page.tsx
================
import { Suspense } from 'react'
import PresupuestoPageClient from './PresupuestoCreateClient'

export default function PresupuestoPage() {
  return (
    <Suspense fallback={
      <div className="container mx-auto p-4 space-y-4">
        <div className="h-10 w-full bg-muted animate-pulse rounded" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="h-[200px] bg-muted animate-pulse rounded" />
          <div className="h-[200px] bg-muted animate-pulse rounded" />
        </div>
      </div>
    }>
      <PresupuestoPageClient />
    </Suspense>
  )
}

================
File: [id]/create/presupuesto/PresupuestoCreateClient.tsx
================
'use client'

import React, { useEffect, useState } from 'react'
import { useSearchParams } from 'next/navigation'
import { Plus, PanelsTopLeft, Calculator } from "lucide-react"
import { Button } from "@/components/ui/button"

import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { motion, AnimatePresence } from 'framer-motion'
import { cn } from '@/lib/utils'
import { useSelectedItems } from '@/hooks/useQueries'
import { useObras } from '@/hooks/useObras'
import { usePresupuestos } from '@/hooks/usePresupuestos'
import { usePresupuestoData } from '@/hooks/usePresupuestoData'
import { PresupuestoEditor } from '@/components/editores/PresupuestoEditor'

interface AddSectionDialogProps {
  onAdd: (sectionName: string) => void;
}

function AddSectionDialog({ onAdd }: AddSectionDialogProps) {
  const [open, setOpen] = useState(false)
  const [sectionName, setSectionName] = useState('')

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    if (sectionName.trim()) {
      onAdd(sectionName.trim())
      setSectionName('')
      setOpen(false)
    }
  }

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button
          type="button"
          variant="outline"
          size="icon"
          className="h-8 w-full"
        >
          <Plus className="w-4 h-4" />
          Agregar Sección
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Agregar Nueva Sección</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <Input
            placeholder="Nombre de la sección"
            value={sectionName}
            onChange={(e) => setSectionName(e.target.value)}
            autoFocus
          />
          <Button type="submit" className="w-full">
            Agregar Sección
          </Button>
        </form>
      </DialogContent>
    </Dialog>
  )
}

export default function PresupuestoPageClient() {
  const searchParams = useSearchParams();
  const [isScrolled, setIsScrolled] = useState(false)
  const [activeView, setActiveView] = useState<'presupuesto' | 'mediciones'>('presupuesto')

  // Get obra ID from URL path or fallback to first obra
  const pathObraId = window.location.pathname.split('/')[2]; // Extract ID from /obra/[id]/create/presupuesto
  const { data: obras, isLoading: isLoadingObras } = useObras();
  const obraId = pathObraId || obras?.[0]?.id;

  // Get presupuestos for the obra
  const { data: presupuestos, isLoading: isLoadingPresupuestos } = usePresupuestos(obraId ?? 0);
  const presupuestoId = presupuestos?.[0]?.id;

  // Get detailed presupuesto data
  const { presupuesto, items, isLoading: isLoadingPresupuesto } =
    usePresupuestoData(presupuestoId?.toString());

  // Get selected items data
  const selectedIds = searchParams.get('selectedIds')?.split(',') || [];
  const { data: selectedItemsData, isLoading: isLoadingSelected } = useSelectedItems(selectedIds);

  const isLoading = isLoadingObras || isLoadingPresupuestos || isLoadingPresupuesto || isLoadingSelected;

  // Add scroll detection
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0)
    }

    window.addEventListener('scroll', handleScroll)
    handleScroll() // Check initial scroll position

    return () => window.removeEventListener('scroll', handleScroll)
  }, [])

  if (isLoading) {
    return (
      <div className="container mx-auto p-4 space-y-4">
        <div className="h-10 w-full bg-muted animate-pulse rounded" />
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="h-[200px] bg-muted animate-pulse rounded" />
          <div className="h-[200px] bg-muted animate-pulse rounded" />
        </div>
      </div>
    );
  }

  if (!obras?.length) {
    return (
      <div className="container mx-auto p-4">
        <p>No obra available. Please create an obra first.</p>
      </div>
    );
  }

  if (!selectedItemsData && selectedIds.length > 0) {
    return (
      <div className="container mx-auto p-4">
        <p>No data available for the selected items.</p>
      </div>
    );
  }

  const pageData = selectedItemsData || {
    presupuestoData: {},
    allElements: [],
    mediciones: []
  };

  return (
    <div className="container mx-auto p-4">
      {/* <Tabs
        defaultValue="presupuesto"
        className={cn("sticky top-0 z-10 p-3 pt-5 -mt-5", isScrolled ? "-ml-20" : "w-1/2")}
        onValueChange={(value: any) => setActiveView(value as 'presupuesto' | 'mediciones')}
      >
        {!isScrolled ? (
          <TabsList>
            <motion.div
              key="expanded"
              className="bg-muted rounded-lg flex"
            >
              <span className='w-full'>
                <TabsTrigger value="presupuesto" className="py-2 w-full justify-start" asChild>
                  <motion.button className={cn(
                    "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                    "transition-all hover:text-muted-foreground",
                    "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                    "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                    "gap-1.5 group relative",
                  )}>
                    <motion.div layoutId="icon-1" className="flex-shrink-0">
                      <Calculator size={16} strokeWidth={2} aria-hidden="true" />
                    </motion.div>
                    <motion.div layoutId="text-1" className="flex-shrink-0">
                      Presupuesto
                    </motion.div>
                  </motion.button>
                </TabsTrigger>
              </span>
              <span className='w-full'>
                <TabsTrigger value="mediciones" className="py-2 w-full justify-start" asChild>
                  <motion.button className={cn(
                    "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                    "transition-all hover:text-muted-foreground",
                    "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                    "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                    "gap-1.5 group relative",
                  )}>
                    <motion.div layoutId="icon-2" className="flex-shrink-0">
                      <PanelsTopLeft size={16} strokeWidth={2} aria-hidden="true" />
                    </motion.div>
                    <motion.div layoutId="text-2" className="flex-shrink-0">
                      Mediciones
                    </motion.div>
                  </motion.button>
                </TabsTrigger>
              </span>
            </motion.div>
          </TabsList>
        ) : (
          <TabsList>
            <motion.div
              key="collapsed"
              className="bg-muted rounded-lg flex"
            >
              <TabsTrigger value="presupuesto" className="py-2" asChild>
                <motion.button className={cn(
                  "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                  "transition-all hover:text-muted-foreground",
                  "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                  "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                  "gap-1.5 group relative",
                )}>
                  <motion.div layoutId="icon-1" className="flex-shrink-0">
                    <Calculator size={16} strokeWidth={2} aria-hidden="true" />
                  </motion.div>
                </motion.button>
              </TabsTrigger>
              <TabsTrigger value="mediciones" className="py-2" asChild>
                <motion.button className={cn(
                  "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1.5 text-sm font-medium",
                  "transition-all hover:text-muted-foreground",
                  "disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground",
                  "data-[state=active]:shadow-sm data-[state=active]:shadow-black/5",
                  "gap-1.5 group relative",
                )}>
                  <motion.div layoutId="icon-2" className="flex-shrink-0">
                    <PanelsTopLeft size={16} strokeWidth={2} aria-hidden="true" />
                  </motion.div>
                </motion.button>
              </TabsTrigger>
            </motion.div>
          </TabsList>
        )}
      </Tabs> */}

      <AnimatePresence mode="wait">
        {/* {activeView === 'presupuesto' ? ( */}
        <PresupuestoEditor
          key="presupuesto"
          presupuestoData={pageData.presupuestoData}
          allElements={pageData.allElements}
          obraId={obraId}
          obraData={obras?.[0]}
        />
        {/* ) : (
          <MedicionesEditor
            key="mediciones"
            // @ts-ignore
            initialMediciones={pageData.mediciones}
            presupuestoData={pageData.presupuestoData}
            obraId={obraId!}
            presupuestoId={presupuestoId?.toString() || '1'}
          />
        )} */}
      </AnimatePresence>
    </div>
  );
}

================
File: [id]/ObraPage.tsx
================
// app/obras/[id]/ObraPage.tsx
'use client';

import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import { useEffect, useState, useRef } from 'react';
import { Button } from "@/components/ui/button";
import { motion, AnimatePresence, m } from 'framer-motion';
import { cn } from '@/lib/utils';
import { ClipboardPenLineIcon, ClipboardPen, PlusIcon, Stamp, FileBadgeIcon, FileChartPieIcon, House, PanelsTopLeft, Box } from 'lucide-react';
import { usePrefetch } from '@/hooks/usePrefetch';
import { useQuery } from '@tanstack/react-query';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { ScrollArea, ScrollBar } from '@/components/ui/scroll-area';
import PresupuestosSelector from './PresupuestosSelector';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { isArray } from 'lodash';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { format, addMonths, isBefore, isAfter, startOfMonth, isSameMonth, parseISO } from "date-fns";
import { es } from "date-fns/locale";
import { CheckCircle2, Circle, Lock } from "lucide-react";
import { useMediciones } from "@/hooks/useMediciones";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import ExpandingButton from '@/components/ExpandingButton';
import useMeasure from 'react-use-measure';
import { CalendarIcon } from "lucide-react";
import CertificadoCreateClient from './create/certificado/CertificadoCreateClient';
import type { TableItem } from "@/app/presupuesto/types";
import type { Presupuesto } from "@/app/presupuesto/hooks/usePresupuestoData";

interface Obra {
  id: number;
  nombre: string;
  ubicacion: string;
  empresa: string;
  fecha_inicio: string | null;
  fecha_fin: string | null;
  estado: string | null;
  created_at: string;
  updated_at: string;
}

interface Medicion {
  id: number;
  month: string;
  measurements: Record<string, {
    monthlyProgress: number;
    cumulativePrevious: number;
    cumulativeCurrent: number;
  }>;
  obra_id: number;
}

interface MedicionInput {
  id: number;
  obra_id: number;
  periodo: string;
  data: {
    secciones: Array<{
      nombre: string;
      items: Array<{
        id: string;
        anterior: number;
        presente: number;
        acumulado: number;
      }>;
    }>;
  };
  created_at: string;
  updated_at: string;
}

interface Certificado {
  id: number;
  obra_id: number;
  medicion_id: number;
  periodo: string;
  data: {
    editedData: Record<string, any>;
    presupuestoData: Record<string, any>;
    progress: Array<{
      month: string;
      value1: number;
      value2: number;
      value3: number;
    }>;
  };
  created_at: string;
}

interface ObraPageProps {
  id: string;
  initialObra: Obra;
  initialPresupuestos: Presupuesto[];
}

export default function ObraPage({ id, initialObra, initialPresupuestos }: ObraPageProps) {
  const router = useRouter();
  const pathname = usePathname();
  const searchParams = useSearchParams();

  // Get current tab from URL or default to 'overview'
  const currentTab = searchParams.get('tab') || 'overview';

  const handleTabChange = (value: string) => {
    const params = new URLSearchParams(searchParams.toString());
    params.set('tab', value);
    router.push(`${pathname}?${params.toString()}`);
  };

  const [open, setOpen] = useState(false);
  const [formState, setFormState] = useState("idle");
  const [feedback, setFeedback] = useState("");
  const ref = useRef<HTMLDivElement>(null);
  const { prefetchMediciones, prefetchPresupuesto } = usePrefetch();
  const [latestPresupuestoId, setLatestPresupuestoId] = useState<number | null>(null);
  const [isPresupuestoDialogOpen, setIsPresupuestoDialogOpen] = useState(false);
  const [selectedPeriod, setSelectedPeriod] = useState<Date | null>(null);
  const [selectedPresupuestoId, setSelectedPresupuestoId] = useState<number | null>(null);
  const [isCertificadoDialogOpen, setIsCertificadoDialogOpen] = useState(false);
  const [selectedPresupuestoForCertificado, setSelectedPresupuestoForCertificado] = useState<number | null>(null);
  const [selectedMedicionForCertificado, setSelectedMedicionForCertificado] = useState<number | null>(null);
  const [selectedCertificadoId, setSelectedCertificadoId] = useState<number | null>(null);

  // Use the server-provided data
  const { data: obra } = useQuery({
    queryKey: ['obra', id],
    queryFn: () => Promise.resolve(initialObra),
    initialData: initialObra
  });

  // Use the server-provided presupuestos data
  const { data: presupuestos } = useQuery({
    queryKey: ['presupuestos', id],
    queryFn: () => Promise.resolve(initialPresupuestos),
    initialData: initialPresupuestos
  });

  const { data: mediciones } = useMediciones(Number(id));

  // Add certificados fetching
  const { data: certificados } = useQuery({
    queryKey: ['certificados', id],
    queryFn: async () => {
      const response = await fetch(`/api/certificados?obraId=${id}`);
      if (!response.ok) throw new Error('Failed to fetch certificados');
      return response.json();
    }
  });

  console.log("aca", { certificados });

  // When presupuestos data is available, update the latest presupuesto id.
  useEffect(() => {
    if (presupuestos && presupuestos.length > 0) {
      const latestPresupuesto = presupuestos[presupuestos.length - 1]
      setLatestPresupuestoId(latestPresupuesto?.id || null)
    }
  }, [presupuestos])

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (ref.current && !ref.current.contains(event.target as Node)) {
        setOpen(false);
        setFormState("idle");
        setFeedback("");
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleCreateMedicion = () => {
    if (presupuestos.length === 0) {
      alert('No hay presupuestos disponibles. Por favor, cree un presupuesto primero.');
      return;
    }
    setIsPresupuestoDialogOpen(true);
  };

  const handleCreateCertificado = () => {
    if (presupuestos.length === 0) {
      alert('No hay presupuestos disponibles. Por favor, cree un presupuesto primero.');
      return;
    }
    setIsCertificadoDialogOpen(true);
  };

  const handleCertificadoContinue = () => {
    if (!selectedPresupuestoForCertificado) {
      alert("Por favor seleccione un presupuesto");
      return;
    }

    if (!selectedMedicionForCertificado) {
      alert("Por favor seleccione una medición");
      return;
    }

    router.push(
      `/obras/${obra.id}/create/certificado?presupuestoId=${selectedPresupuestoForCertificado}&medicionId=${selectedMedicionForCertificado}`
    );
    setIsCertificadoDialogOpen(false);
  };

  // Get all months between start and end date
  const getMonthsInRange = () => {
    console.log('obra', obra);
    console.log('obra.fecha_inicio', obra.fecha_inicio);
    console.log('obra.fecha_fin', obra.fecha_fin);
    if (!obra.fecha_inicio || !obra.fecha_fin) return [];

    const months = [];
    let currentMonth = startOfMonth(new Date(obra.fecha_inicio));
    const endDate = startOfMonth(new Date(obra.fecha_fin));

    while (isBefore(currentMonth, endDate) || isSameMonth(currentMonth, endDate)) {
      // Create a Date in UTC at midnight
      const utcMidnight = new Date(Date.UTC(
        currentMonth.getFullYear(),
        currentMonth.getMonth(),
        currentMonth.getDate() + 1
      ));


      // Convert to "YYYY-MM-DDT00:00:00+00:00"
      let isoString = utcMidnight.toISOString();   // e.g. "2024-01-01T00:00:00.000Z"
      isoString = isoString.replace('.000Z', '+00:00'); // => "2024-01-01T00:00:00+00:00"

      months.push(isoString);
      currentMonth = addMonths(currentMonth, 1);
    }

    return months;
  };

  // Get the next available month for medicion
  const getNextAvailableMonth = () => {
    if (!mediciones) return obra.fecha_inicio ? new Date(obra.fecha_inicio) : null;

    const sortedMediciones = [...mediciones].sort((a, b) =>
      new Date(a.month).getTime() - new Date(b.month).getTime()
    );

    if (sortedMediciones.length === 0) {
      return obra.fecha_inicio ? new Date(obra.fecha_inicio) : null;
    }

    const lastMedicionDate = sortedMediciones[sortedMediciones.length - 1].month;
    if (!lastMedicionDate) return null;

    const [lastYear, lastMonth] = lastMedicionDate.split('-').map(Number);
    if (isNaN(lastYear) || isNaN(lastMonth)) return null;

    let nextMonth = lastMonth + 1;
    let nextYear = lastYear;

    if (nextMonth > 11) {
      nextMonth = 0;
      nextYear++;
    }

    return new Date(nextYear, nextMonth, 1);
  };

  const handleContinue = () => {
    if (selectedPeriod && selectedPresupuestoId) {
      router.push(
        `/obras/${obra.id}/create/medicion?presupuestoId=${selectedPresupuestoId}&periodo=${format(selectedPeriod, 'yyyy-MM-dd')}`
      );
      setIsPresupuestoDialogOpen(false);
    }
  };

  if (isArray(obra)) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <div className="text-lg">Obra not found</div>
      </div>
    );
  }

  console.log('selectedperiod', selectedPeriod)

  return (
    <div className="flex flex-col bg-muted/70 min-h-screen">
      <div className="flex-1 p-6">
        <Tabs
          defaultValue={currentTab}
          onValueChange={handleTabChange}
        >
          <div className="flex justify-between items-center">
            <div className="flex flex-col gap-2">
              <h1 className="text-3xl font-semibold">{obra.nombre}</h1>
              <p className="text-sm text-input/60 font-semibold">{obra.ubicacion}</p>
            </div>

            <ScrollArea>
              <TabsList className="mb-3">
                <TabsTrigger value="overview">
                  <House
                    className="-ms-0.5 me-1.5 opacity-60"
                    size={16}
                    strokeWidth={2}
                    aria-hidden="true"
                  />
                  Overview
                </TabsTrigger>
                <TabsTrigger
                  value="presupuestos"
                  className="group"
                  onMouseEnter={() => prefetchPresupuesto(obra.id)}
                >
                  <PanelsTopLeft
                    className="-ms-0.5 me-1.5 opacity-60"
                    size={16}
                    strokeWidth={2}
                    aria-hidden="true"
                  />
                  Presupuestos
                  <Badge className="ms-1.5 bg-primary/15 px-1 transition-opacity group-data-[state=inactive]:opacity-50">
                    {presupuestos.length}
                  </Badge>
                </TabsTrigger>
                <TabsTrigger
                  value="certificados"
                  className="group"
                  onMouseEnter={() => prefetchMediciones(obra.id)}
                >
                  <Box
                    className="-ms-0.5 me-1.5 opacity-60"
                    size={16}
                    strokeWidth={2}
                    aria-hidden="true"
                  />
                  Certificados
                  {/* <Badge className="ms-1.5 transition-opacity group-data-[state=inactive]:opacity-50">
                    New
                  </Badge> */}
                </TabsTrigger>
              </TabsList>
              <ScrollBar orientation="horizontal" />
            </ScrollArea>
          </div>

          <TabsContent value="overview" className="mt-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>General Information</CardTitle>
                  <CardDescription>Basic details about the obra</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="font-medium">ID:</label>
                    <p>{obra.id}</p>
                  </div>
                  <div>
                    <label className="font-medium">Nombre:</label>
                    <p>{obra.nombre}</p>
                  </div>
                  <div>
                    <label className="font-medium">Ubicación:</label>
                    <p>{obra.ubicacion}</p>
                  </div>
                  <div>
                    <label className="font-medium">Empresa:</label>
                    <p>{obra.empresa}</p>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Status & Dates</CardTitle>
                  <CardDescription>Current status and important dates</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div>
                    <label className="font-medium">Estado:</label>
                    <p>{obra.estado || 'No establecido'}</p>
                  </div>
                  <div>
                    <label className="font-medium">Fecha de Inicio:</label>
                    <p>{obra.fecha_inicio ? new Date(obra.fecha_inicio).toLocaleDateString() : 'No establecida'}</p>
                  </div>
                  <div>
                    <label className="font-medium">Fecha de Fin:</label>
                    <p>{obra.fecha_fin ? new Date(obra.fecha_fin).toLocaleDateString() : 'No establecida'}</p>
                  </div>
                </CardContent>
              </Card>

              <Card className="md:col-span-2">
                <CardHeader>
                  <CardTitle>System Information</CardTitle>
                  <CardDescription>System tracking information</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="font-medium">Created At:</label>
                      <p>{new Date(obra.created_at).toLocaleString()}</p>
                    </div>
                    <div>
                      <label className="font-medium">Last Updated:</label>
                      <p>{new Date(obra.updated_at).toLocaleString()}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
            <ExpandingButton width={390}>
              <div className="flex gap-2 px-4">
                <Button
                  variant="box"
                  className="h-28 w-28"
                  href={`/?obraId=${obra.id}`}
                >
                  <FileChartPieIcon className="!size-6" />
                  Presupuesto
                </Button>
                <Button
                  variant="box"
                  className="h-28 w-28"
                  onClick={handleCreateMedicion}
                >
                  <ClipboardPenLineIcon className="!size-6" />
                  Medicion
                </Button>
                <Button
                  variant="box"
                  className="h-28 w-28"
                  onClick={handleCreateCertificado}
                >
                  <FileBadgeIcon className="!size-6" />
                  Certificado
                </Button>
              </div>
            </ExpandingButton>

            {/* Presupuesto Selection Dialog */}
            <Dialog open={isPresupuestoDialogOpen} onOpenChange={setIsPresupuestoDialogOpen}>
              <DialogContent className="max-w-3xl">
                <DialogHeader>
                  <DialogTitle>Seleccionar Presupuesto y Periodo</DialogTitle>
                </DialogHeader>

                <div className="grid gap-6 py-4">
                  <div className="flex flex-col gap-2">
                    <label className="text-sm font-medium">Periodos Disponibles</label>
                    <ScrollArea className="w-full whitespace-nowrap rounded-md border max-h-48">
                      <div className="grid grid-cols-4 gap-2 p-4">
                        {getMonthsInRange().map((date) => {
                          const monthStr = format(date, 'yyyy-MM-dd');
                          const isCompleted = mediciones?.some(m => {
                            return m.month?.split('-')[0] === date.split('-')[0] && m.month?.split('-')[1] === date.split('-')[1]
                          });
                          const nextAvailable = getNextAvailableMonth();
                          const isNext = nextAvailable && isSameMonth(date, nextAvailable);
                          const isFuture = nextAvailable && isAfter(date, nextAvailable);

                          return (
                            <button
                              key={monthStr}
                              onClick={() => {
                                if (isNext) {
                                  setSelectedPeriod(new Date(date));
                                }
                              }}
                              disabled={!isNext}
                              className={`
                          flex items-center justify-between px-4 py-2 rounded-lg text-sm
                          ${isCompleted
                                  ? 'bg-green-50 text-green-700 border border-green-200'
                                  : isNext
                                    ? 'bg-blue-50 text-blue-700 border border-blue-200 hover:bg-blue-100'
                                    : isFuture
                                      ? 'bg-gray-50 text-gray-400 border border-gray-200'
                                      : 'bg-white border'
                                }
                        `}
                            >
                              <span>{format(date, 'MMMM yyyy', { locale: es })}</span>
                              {isCompleted ? (
                                <CheckCircle2 className="w-4 h-4 text-green-500" />
                              ) : isNext ? (
                                selectedPeriod && isSameMonth(date, selectedPeriod) ? (
                                  <CheckCircle2 className="w-4 h-4 text-green-500" />
                                ) : (
                                  <Circle className="w-4 h-4 text-blue-500" />
                                )
                              ) : (
                                <Lock className="w-4 h-4 text-gray-400" />
                              )}
                            </button>
                          );
                        })}
                      </div>
                      <ScrollBar orientation="vertical" />
                    </ScrollArea>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium">Seleccionar Presupuesto</label>
                    <RadioGroup
                      value={selectedPresupuestoId?.toString()}
                      onValueChange={(value) => setSelectedPresupuestoId(Number(value))}
                      className="space-y-2"
                    >
                      {presupuestos.map((presupuesto) => (
                        <div
                          key={presupuesto.id}
                          className={`
                      flex items-center space-x-2 rounded-lg border p-4 transition-colors
                      ${selectedPresupuestoId === presupuesto.id ? 'bg-muted border-primary' : 'hover:bg-muted/50'}
                    `}
                        >
                          <RadioGroupItem
                            value={presupuesto.id.toString()}
                            id={`presupuesto-${presupuesto.id}`}
                          // disabled={!selectedPeriod}
                          />
                          <Label
                            htmlFor={`presupuesto-${presupuesto.id}`}
                            className="flex-1 cursor-pointer"
                          >
                            <div className="flex items-center gap-2">
                              <ClipboardPenLineIcon className="w-5 h-5 text-muted-foreground" />
                              <div className="flex flex-col">
                                <span className="font-medium">{presupuesto.nombre}</span>
                                <span className="text-sm text-muted-foreground">
                                  Total: ${presupuesto.total.toLocaleString('es-AR')}
                                </span>
                              </div>
                            </div>
                          </Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </div>

                  <div className="flex justify-end pt-4 border-t">
                    <Button
                      onClick={handleContinue}
                      disabled={!selectedPeriod || !selectedPresupuestoId}
                      className="w-full sm:w-auto"
                    >
                      Continuar
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>

            {/* Certificado Selection Dialog */}
            <Dialog open={isCertificadoDialogOpen} onOpenChange={setIsCertificadoDialogOpen}>
              <DialogContent className="max-w-3xl">
                <DialogHeader>
                  <DialogTitle>Seleccionar Presupuesto y Medición para Certificado</DialogTitle>
                </DialogHeader>

                <div className="space-y-6 py-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium">Seleccionar Presupuesto</label>
                    <RadioGroup
                      value={selectedPresupuestoForCertificado?.toString()}
                      onValueChange={(value) => setSelectedPresupuestoForCertificado(Number(value))}
                      className="space-y-2"
                    >
                      {presupuestos.map((presupuesto) => (
                        <div
                          key={presupuesto.id}
                          className={`
                            flex items-center space-x-2 rounded-lg border p-4 transition-colors
                            ${selectedPresupuestoForCertificado === presupuesto.id ? 'bg-muted border-primary' : 'hover:bg-muted/50'}
                          `}
                        >
                          <RadioGroupItem
                            value={presupuesto.id.toString()}
                            id={`certificado-presupuesto-${presupuesto.id}`}
                          />
                          <Label
                            htmlFor={`certificado-presupuesto-${presupuesto.id}`}
                            className="flex-1 cursor-pointer"
                          >
                            <div className="flex items-center gap-2">
                              <ClipboardPenLineIcon className="w-5 h-5 text-muted-foreground" />
                              <div className="flex flex-col">
                                <span className="font-medium">{presupuesto.nombre}</span>
                                <span className="text-sm text-muted-foreground">
                                  Total: ${presupuesto.total.toLocaleString('es-AR')}
                                </span>
                              </div>
                            </div>
                          </Label>
                        </div>
                      ))}
                    </RadioGroup>
                  </div>

                  {selectedPresupuestoForCertificado && mediciones && mediciones.length > 0 && (
                    <div className="space-y-2">
                      <label className="text-sm font-medium">Seleccionar Medición</label>
                      <RadioGroup
                        value={selectedMedicionForCertificado?.toString()}
                        onValueChange={(value) => setSelectedMedicionForCertificado(Number(value))}
                        className="space-y-2"
                      >
                        {mediciones.map((medicion) => {
                          const date = medicion.month.includes('T')
                            ? parseISO(medicion.month)
                            : new Date(medicion.month);

                          return (
                            <div
                              key={medicion.id}
                              className={`
                                flex items-center space-x-2 rounded-lg border p-4 transition-colors
                                ${selectedMedicionForCertificado === medicion.id ? 'bg-muted border-primary' : 'hover:bg-muted/50'}
                              `}
                            >
                              <RadioGroupItem
                                value={medicion.id.toString()}
                                id={`certificado-medicion-${medicion.id}`}
                              />
                              <Label
                                htmlFor={`certificado-medicion-${medicion.id}`}
                                className="flex-1 cursor-pointer"
                              >
                                <div className="flex items-center gap-2">
                                  <CalendarIcon className="w-5 h-5 text-muted-foreground" />
                                  <div className="flex flex-col">
                                    <span className="font-medium">
                                      {format(date, 'MMMM yyyy', { locale: es })}
                                    </span>
                                    <span className="text-sm text-muted-foreground">
                                      {Object.keys(medicion.measurements).length} items medidos
                                    </span>
                                  </div>
                                </div>
                              </Label>
                            </div>
                          );
                        })}
                      </RadioGroup>
                    </div>
                  )}

                  <div className="flex justify-end pt-4 border-t">
                    <Button
                      onClick={handleCertificadoContinue}
                      disabled={!selectedPresupuestoForCertificado || !selectedMedicionForCertificado}
                      className="w-full sm:w-auto"
                    >
                      Continuar
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </TabsContent>

          <TabsContent value="presupuestos">
            <PresupuestosSelector
              obraId={obra.id.toString()}
              initialPresupuestos={presupuestos}
            />
          </TabsContent>

          <TabsContent value="certificados">
            <div className="space-y-6">
              <div className="flex justify-between items-center">
                <h2 className="text-2xl font-semibold">Certificados de Obra</h2>
                <Button onClick={handleCreateCertificado}>
                  <PlusIcon className="w-4 h-4 mr-2" />
                  Nuevo Certificado
                </Button>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                {/* Certificados List */}
                <Card className="md:col-span-1">
                  <CardHeader>
                    <CardTitle>Certificados</CardTitle>
                    <CardDescription>Seleccione un certificado para ver los detalles</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <ScrollArea className="h-[600px] w-full pr-4">
                      <RadioGroup
                        value={selectedCertificadoId?.toString()}
                        onValueChange={(value) => setSelectedCertificadoId(Number(value))}
                        className="space-y-2"
                      >
                        {certificados?.map((certificado: Certificado) => {
                          const date = parseISO(certificado.periodo);
                          return (
                            <div
                              key={certificado.id}
                              className={`
                                flex items-center space-x-2 rounded-lg border p-4 transition-colors cursor-pointer
                                ${selectedCertificadoId === certificado.id ? 'bg-muted border-primary' : 'hover:bg-muted/50'}
                              `}
                            >
                              <RadioGroupItem
                                value={certificado.id.toString()}
                                id={`certificado-${certificado.id}`}
                              />
                              <Label
                                htmlFor={`certificado-${certificado.id}`}
                                className="flex-1 cursor-pointer"
                              >
                                <div className="flex items-center gap-2">
                                  <Stamp className="w-5 h-5 text-muted-foreground" />
                                  <div className="flex flex-col">
                                    <span className="font-medium">
                                      {format(date, 'MMMM yyyy', { locale: es })}
                                    </span>
                                    <span className="text-sm text-muted-foreground">
                                      Creado el {format(parseISO(certificado.created_at), 'dd/MM/yyyy')}
                                    </span>
                                  </div>
                                </div>
                              </Label>
                            </div>
                          );
                        })}

                        {certificados?.length === 0 && (
                          <div className="text-center py-12 text-muted-foreground">
                            No hay certificados creados aún
                          </div>
                        )}
                      </RadioGroup>
                    </ScrollArea>
                  </CardContent>
                </Card>

                {/* Certificado Details */}
                <Card className="md:col-span-2">
                  <CardContent className="p-6">
                    {selectedCertificadoId && certificados ? (
                      (() => {
                        const certificado = certificados.find((c: Certificado) => c.id === selectedCertificadoId);
                        if (!certificado) return null;

                        const matchingMedicion = mediciones?.find(m => m.id === certificado.medicion_id);

                        if (!matchingMedicion) return null;

                        console.log('matchingMedicion', matchingMedicion);

                        // Add null check for measurements
                        const measurements = matchingMedicion.measurements || {};

                        // Transform medicion to match MedicionInput type
                        const transformedMedicion: MedicionInput = {
                          id: matchingMedicion.id,
                          obra_id: Number(id),
                          periodo: matchingMedicion.month || matchingMedicion.periodo || '',
                          data: {
                            secciones: Object.entries(measurements).reduce((acc, [itemId, values]) => {
                              let sectionName = '';
                              const presupuestoData = certificado.data.presupuestoData || {};

                              for (const section of Object.keys(presupuestoData)) {
                                const items = presupuestoData[section];
                                if (items.some((item: { id: { toString: () => string } }) => item.id.toString() === itemId)) {
                                  sectionName = section;
                                  break;
                                }
                              }

                              let section = acc.find(s => s.nombre === sectionName);
                              if (!section) {
                                section = { nombre: sectionName, items: [] };
                                acc.push(section);
                              }

                              section.items.push({
                                id: itemId,
                                anterior: values.cumulativePrevious,
                                presente: values.monthlyProgress,
                                acumulado: values.cumulativeCurrent
                              });

                              return acc;
                            }, [] as MedicionInput['data']['secciones'])
                          },
                          created_at: certificado.created_at,
                          updated_at: certificado.created_at
                        };

                        return (
                          <CertificadoCreateClient
                            obraId={id}
                            obraName={obra.nombre}
                            presupuestoData={certificado.data.presupuestoData}
                            selectedMedicion={transformedMedicion}
                            fechaInicio={obra.fecha_inicio || ''}
                            fechaFin={obra.fecha_fin || ''}
                            obraData={certificado.data.editedData}
                            display={true}
                            certificado={certificado}
                          />
                        );
                      })()
                    ) : (
                      <div className="flex flex-col items-center justify-center h-[600px] text-muted-foreground">
                        <Stamp className="w-12 h-12 mb-4 opacity-20" />
                        <p>Seleccione un certificado para ver los detalles</p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

================
File: [id]/page.tsx
================
// app/obras/[id]/page.tsx
import { dehydrate, HydrationBoundary, QueryClient } from '@tanstack/react-query'
import ObraPage from './ObraPage'
import { getQueryClient } from '@/app/get-query-clients'
import { getObra } from '@/utils/hooks/useObras'

interface Obra {
  id: number;
  nombre: string;
  ubicacion: string;
  empresa: string;
  fecha_inicio: string | null;
  fecha_fin: string | null;
  estado: string | null;
  created_at: string;
  updated_at: string;
}

interface Presupuesto {
  id: number;
  obra_id: number;
  nombre: string;
  total: number;
  data: {
    secciones: {
      nombre: string;
      items: {
        id: number;
        nombre: string;
        unidad: string;
        cantidad: number;
        precioUnitario: number;
        total: number;
      }[];
    }[];
  };
  created_at: string;
  updated_at: string;
}

export default async function ObraServerPage({ params }: { params: Promise<{ id: string }> }) {
  const queryClient = getQueryClient()
  const { id } = await params

  // Fetch obra data
  const obra = await getObra(Number(id)) as unknown as Obra

  // Fetch presupuesto data
  const presupuestoResponse = await fetch(`${process.env.NEXT_PUBLIC_APP_URL}/api/presupuestos?obraId=${id}`)
  if (!presupuestoResponse.ok) {
    throw new Error('Failed to fetch presupuesto')
  }
  const presupuestos = await presupuestoResponse.json() as Presupuesto[]

  // Prefetch the data into the query client
  await queryClient.prefetchQuery({
    queryKey: ['obra', id],
    queryFn: () => Promise.resolve(obra)
  })

  await queryClient.prefetchQuery({
    queryKey: ['presupuestos', id],
    queryFn: () => Promise.resolve(presupuestos)
  })

  return (
    <HydrationBoundary state={dehydrate(queryClient)}>
      {/* @ts-ignore */}
      <ObraPage id={id} initialObra={obra} initialPresupuestos={presupuestos} />
    </HydrationBoundary>
  )
}

================
File: [id]/PresupuestosSelector.tsx
================
// app/obras/[id]/PresupuestosSelector.tsx
import { TabsContent } from '@/components/ui/tabs';
import { motion } from "framer-motion";
import { cn } from '@/lib/utils';
import React, { useEffect, useState } from 'react';
import { TableItem } from '@/app/presupuesto/types';
import { PresupuestoEditor } from '@/components/editores/PresupuestoEditor';
import { MedicionesEditor } from '@/components/editores/MedicionesEditor';
import { useMediciones } from '@/hooks/useMediciones';

interface OldPresupuestoItem {
  id: number;
  nombre: string;
  unidad: string;
  cantidad: number;
  precioUnitario: number;
  total: number;
}

interface OldPresupuestoSection {
  nombre: string;
  items: OldPresupuestoItem[];
}

interface OldPresupuestoData {
  secciones: OldPresupuestoSection[];
}

interface Presupuesto {
  id: number;
  obra_id: number;
  nombre: string;
  total: number;
  data: Record<string, TableItem[]> | OldPresupuestoData;
  created_at: string;
  updated_at: string;
}

interface MedicionItem {
  id: string;
  anterior: number;
  presente: number;
  acumulado: number;
}

interface MedicionSeccion {
  nombre: string;
  items: MedicionItem[];
}

interface PresupuestosSelectorProps {
  obraId: string;
  initialPresupuestos: Presupuesto[];
}

function PresupuestosSelector({ obraId, initialPresupuestos }: PresupuestosSelectorProps) {
  // Sort initial presupuestos from newest to oldest based on created_at
  const sortedInitialPresupuestos = [...initialPresupuestos].sort(
    (a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
  );

  // Initialize state with sorted presupuestos
  const [selectedPresupuesto, setSelectedPresupuesto] = useState<Presupuesto | null>(null);
  const [selectedMedicion, setSelectedMedicion] = useState<any | null>(null);
  const [presupuestos, setPresupuestos] = useState<Presupuesto[]>(sortedInitialPresupuestos);
  const [transformedPresupuestos, setTransformedPresupuestos] = useState<Record<number, Record<string, TableItem[]>>>({});
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isScrolled, setIsScrolled] = useState(false);

  // Get mediciones for the selected presupuesto
  const { data: mediciones = [] } = useMediciones(selectedPresupuesto?.obra_id || 0);

  // Reset selected medicion when presupuesto changes
  useEffect(() => {
    setSelectedMedicion(null);
  }, [selectedPresupuesto]);

  // Set default selection to the newest presupuesto if none is selected
  useEffect(() => {
    if (!selectedPresupuesto && presupuestos.length > 0) {
      setSelectedPresupuesto(presupuestos[0]);
    }
  }, [selectedPresupuesto, presupuestos]);

  // Transform all presupuestos on initial load
  useEffect(() => {
    const transformed = presupuestos.reduce((acc, presupuesto) => {
      acc[presupuesto.id] = transformPresupuestoData(presupuesto);
      return acc;
    }, {} as Record<number, Record<string, TableItem[]>>);

    setTransformedPresupuestos(transformed);
  }, [presupuestos]);

  // Use transformed data directly when selecting a presupuesto
  const selectedPresupuestoData = selectedPresupuesto
    ? transformedPresupuestos[selectedPresupuesto.id]
    : {};

  // Calculate grand total and section rubros
  const { grandTotal, sectionRubros } = React.useMemo(() => {
    if (!selectedPresupuesto) return { grandTotal: 0, sectionRubros: [] };

    const total = selectedPresupuesto.total;
    console.log('selectedPresupuestoData', selectedPresupuestoData)
    Object.entries(selectedPresupuestoData).forEach(([_, items]) => {
      console.log('items', items)
    })
    const rubros = Object.entries(selectedPresupuestoData).map(([_, items]) => {
      return (items.reduce((sum, item) => sum + item.totalPrice, 0) * 100) / total;
    });

    return { grandTotal: total, sectionRubros: rubros };
  }, [selectedPresupuestoData, selectedPresupuesto]);

  // Calculate running total (IACUM) for each section
  const sectionIacums = React.useMemo(() => {
    let runningTotal = 0;
    return Object.entries(selectedPresupuestoData).map(([_, items]) => {
      runningTotal += items.reduce((sum, item) => sum + item.totalPrice, 0);
      return (runningTotal * 100) / grandTotal;
    });
  }, [selectedPresupuestoData, grandTotal]);

  // Update scroll detection
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0);
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll();

    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Transform presupuesto data to match PresupuestoEditor format
  const transformPresupuestoData = (presupuesto: Presupuesto): Record<string, TableItem[]> => {
    // If data is already in the correct format, return it directly
    if (typeof presupuesto.data === 'object' && !Array.isArray(presupuesto.data) && !('secciones' in presupuesto.data)) {
      return presupuesto.data as Record<string, TableItem[]>;
    }

    // For backwards compatibility with old format
    const oldData = presupuesto.data as OldPresupuestoData;
    if (oldData.secciones) {
      const result: Record<string, TableItem[]> = {};

      oldData.secciones.forEach(seccion => {
        result[seccion.nombre] = seccion.items.map(item => ({
          id: item.id.toString(),
          name: item.nombre,
          unit: item.unidad,
          quantity: item.cantidad,
          unitPrice: item.precioUnitario,
          totalPrice: item.total,
          price: item.precioUnitario,
          category: seccion.nombre,
          parcial: (item.total * 100) / presupuesto.total,
          rubro: (seccion.items.reduce((acc: number, i) => acc + i.total, 0) * 100) / presupuesto.total,
          accumulated: 0,
          element_tags: [],
          originalUnit: item.unidad,
          originalQuantity: item.cantidad,
          originalUnitPrice: item.precioUnitario,
          targetSection: seccion.nombre,
          nombre: item.nombre
        }));
      });

      return result;
    }

    // If neither format is found, return empty object
    console.warn('Presupuesto data is in an unknown format:', presupuesto.data);
    return {};
  };

  if (loading) {
    return (
      <TabsContent value="tab-2" className="h-full mt-16">
        <div className="flex items-center justify-center h-64">
          <p className="text-lg">Loading presupuestos...</p>
        </div>
      </TabsContent>
    );
  }

  if (error) {
    return (
      <TabsContent value="tab-2" className="h-full mt-16">
        <div className="flex flex-col items-center justify-center h-64 gap-4">
          <p className="text-lg text-red-500">{error}</p>
          <button
            onClick={() => window.location.reload()}
            className="px-4 py-2 bg-primary text-white rounded-md hover:bg-primary/90"
          >
            Retry
          </button>
        </div>
      </TabsContent>
    );
  }

  return (
    <div className="flex gap-4 h-full items-start mt-24">
      <div className="flex flex-col gap-5">
        {presupuestos.map((presupuesto) => (
          <div
            key={presupuesto.id}
            onClick={() => setSelectedPresupuesto(presupuesto)}
            className={cn(
              'flex flex-col justify-center items-start p-4 w-[15vw] max-w-[15vw] h-20 rounded-lg relative z-20 cursor-pointer'
            )}
          >
            <h2 className="font-semibold text-xl">Presupuesto {presupuesto.id}</h2>
            <div className='flex justify-between w-full pr-3'>
              <p className="text-sm text-muted-foreground font-bold">
                ${presupuesto.total.toLocaleString('es-AR', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}
              </p>
              <p className="text-sm text-muted-foreground">
                {new Date(presupuesto.created_at).toLocaleDateString()}
              </p>
            </div>
            <motion.span
              className={cn(
                '-z-10 w-full h-[80px] absolute',
                selectedPresupuesto?.id === presupuesto.id
                  ? 'shadow-[-20px_4px_6px_-1px_#0000001a]'
                  : ''
              )}
              animate={{
                width: selectedPresupuesto?.id === presupuesto.id ? 310 : 275,
              }}
              exit={{ width: 275 }}
            />
            <motion.span
              className={cn(
                'flex flex-col justify-center items-start p-4 w-[15vw] h-20 rounded-lg absolute left-0 -z-10 cursor-pointer transition-colors',
                selectedPresupuesto?.id === presupuesto.id
                  ? 'bg-white'
                  : 'bg-gray-200'
              )}
              animate={{
                width: selectedPresupuesto?.id === presupuesto.id ? 310 : 275,
              }}
              exit={{ width: 275 }}
            />
          </div>
        ))}
      </div>

      <div className="bg-white rounded-lg w-full h-full min-h-[500px] flex-1 relative shadow-md flex justify-end">
        {selectedPresupuesto ? (
          <div className='flex flex-col gap-2 mb-16 absolute -top-20 left-20 h-full'>
            {selectedMedicion ? (
              <MedicionesEditor
                medicion={selectedMedicion}
                presupuestoData={Object.entries(selectedPresupuestoData).reduce((acc, [section, items]) => {
                  acc[section] = items.map(item => ({
                    id: String(item.id),
                    name: item.name,
                    totalPrice: item.totalPrice
                  }))
                  return acc
                }, {} as Record<string, { id: string; name: string; totalPrice: number }[]>)}
                display={true}
                obraId={selectedPresupuesto.obra_id}
              />
            ) : (
              <PresupuestoEditor
                key={selectedPresupuesto.id}
                presupuestoData={selectedPresupuestoData}
                allElements={[]}
                display={true}
              />
            )}
          </div>
        ) : (
          <div className="flex flex-col items-center justify-center h-[500px] text-muted-foreground">
            <p>Select a presupuesto to view details</p>
          </div>
        )}
        <div className='flex flex-col gap-2 mb-16 h-full'>
          {selectedPresupuesto && (
            <div className="flex flex-col gap-4 p-4">
              {mediciones.map((medicion) => (
                <div
                  key={medicion.id}
                  onClick={() => {
                    setSelectedMedicion(medicion);
                  }}
                  className={cn(
                    "bg-white p-4 h-36 w-28 rounded-lg shadow border hover:shadow-md transition-shadow cursor-pointer",
                    selectedMedicion?.id === medicion.id ? "ring-2 ring-primary" : ""
                  )}
                >
                  <p className="font-medium text-sm">Medición #{medicion.id}</p>
                  <p className="text-xs text-gray-500">
                    {new Date(medicion.month).toLocaleDateString()}
                  </p>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

    </div>
  );
}

export default PresupuestosSelector;

================
File: create/page.tsx
================
"use client";

import React, { useState } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

type Field = {
  name: string;
  label: string;
  type: string; // e.g. 'text', 'number', 'date'...
};

type FieldSection = {
  sectionName: string;
  fields: Field[];
};

// Example: only a small subset of your actual fields.
const obraFieldSections: FieldSection[] = [
  {
    sectionName: "General Info",
    fields: [
      { name: "NombreObra", label: "Nombre de la Obra", type: "text" },
      { name: "Norma_Legal", label: "Norma Legal", type: "text" },
      { name: "Norma_Legal2", label: "Norma Legal 2", type: "text" },
      { name: "IdEmpresa", label: "IdEmpresa (Int)", type: "number" },
    ],
  },
  {
    sectionName: "Montos & Contratos",
    fields: [
      { name: "Monto_Contrato", label: "Monto Contrato (Float)", type: "number" },
      { name: "Plazo", label: "Plazo (Int)", type: "number" },
      { name: "Monto_Adicional_1", label: "Monto Adicional 1 (Float)", type: "number" },
      { name: "Monto_Adicional_2", label: "Monto Adicional 2 (Float)", type: "number" },
    ],
  },
  {
    sectionName: "Fechas",
    fields: [
      { name: "Fecha_de_Contrato", label: "Fecha de Contrato", type: "date" },
      { name: "Fecha_de_Inicio", label: "Fecha de Inicio", type: "date" },
      { name: "Fecha_de_Finalizaci_n", label: "Fecha de Finalización", type: "date" },
    ],
  },
  {
    sectionName: "Observaciones & Memorias",
    fields: [
      { name: "Observaciones", label: "Observaciones", type: "text" },
      { name: "Memoria_Desc", label: "Memoria Desc", type: "text" },
    ],
  },
  // ... Create as many sections as you like and add the rest of your fields
];

export default function CreateObraPage() {
  const router = useRouter();
  const [formData, setFormData] = useState<Record<string, any>>({});

  // Handle changes from any input
  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setFormData((prev) => ({
      ...prev,
      [e.target.name]: e.target.value,
    }));
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // Example: parse numeric or date fields if needed
    // if (formData["IdEmpresa"]) {
    //   formData["IdEmpresa"] = parseInt(formData["IdEmpresa"], 10);
    // }
    // if (formData["Monto_Contrato"]) {
    //   formData["Monto_Contrato"] = parseFloat(formData["Monto_Contrato"]);
    // }

    try {
      const res = await fetch("/api/obras", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });
      if (res.ok) {
        router.push("/db/obras");
      } else {
        console.error("Error creating obra:", await res.text());
      }
    } catch (error) {
      console.error("Error creating obra:", error);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-6">Create New Obra</h1>

      <form onSubmit={handleSubmit}>
        {obraFieldSections.map((section) => (
          <div key={section.sectionName} className="mb-10">
            <h2 className="text-xl font-semibold mb-4">{section.sectionName}</h2>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {section.fields.map((field) => (
                <div key={field.name} className="space-y-2">
                  <Label htmlFor={field.name}>{field.label}</Label>
                  <Input
                    id={field.name}
                    name={field.name}
                    type={field.type}
                    value={formData[field.name] || ""}
                    onChange={handleChange}
                  // You can add required if needed:
                  // required
                  />
                </div>
              ))}
            </div>
          </div>
        ))}

        <div className="flex gap-4 pt-4">
          <Button type="submit">Create Obra</Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push("/db/obras")}
          >
            Cancel
          </Button>
        </div>
      </form>
    </div>
  );
}

================
File: page.tsx
================
"use client";

import { Key, useState, useEffect } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { useObras } from "@/utils/hooks/useObras";
interface Obra {
  id: number;
  nombre: string;
  montoContrato: number;
  ubicacion: string;
  idEmpresa: string;
  idReparticion: string;
  idAvance: string;
  idInspectores: string;
  idProyectista: string;
  responsableProyecto: string;
  idLocalidad: string;
  departamento: string;
  plazo: string;
  fecha_contrato: string;
  fecha_inicio: string;
  fecha_fin: string;
  estado: string;
  Fechalicit: string;
  Edificio: string;
  prioridad: string;
  Proyecto: string;
  inaugurada: string;
  fechaInauguracion: string;
  data: any;
  created_at: string;
  updated_at: string;
}

export default function ObrasPage() {

  const [obras, setObras] = useState<Obra[]>([]);
  useEffect(() => {
    useObras().then((data) => {
      // @ts-ignore
      setObras(data);
    });
  }, []);

  console.log("obras", obras);

  return (
    <div className="container mx-auto p-4">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Obras</h1>
        <Link href="/obras/create">
          <Button>Create New</Button>
        </Link>
      </div>

      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>ID</TableHead>
            <TableHead>Nombre</TableHead>
            <TableHead>Ubicación</TableHead>
            <TableHead>Empresa</TableHead>
            <TableHead>Fecha Inicio</TableHead>
            <TableHead>Fecha Fin</TableHead>
            <TableHead>Estado</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {obras.map((obra) => (
            <TableRow key={obra.id}>
              <TableCell>{obra.id}</TableCell>
              <TableCell>{obra.nombre}</TableCell>
              <TableCell>{obra.ubicacion}</TableCell>
              <TableCell>{obra.idEmpresa}</TableCell>
              <TableCell>{new Date(obra.fecha_inicio).toLocaleDateString()}</TableCell>
              <TableCell>{obra.fecha_fin ? new Date(obra.fecha_fin).toLocaleDateString() : '-'}</TableCell>
              <TableCell>{obra.estado}</TableCell>
              <TableCell>
                <div className="flex gap-2">
                  <Link href={`/obras/${obra.id}`}>
                    <Button variant="outline" size="sm">View</Button>
                  </Link>
                  <Link href={`/obras/${obra.id}/edit`}>
                    <Button variant="outline" size="sm">Edit</Button>
                  </Link>
                </div>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  );
}



================================================================
End of Codebase
================================================================
